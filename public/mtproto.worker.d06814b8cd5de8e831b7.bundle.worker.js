/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/ts-loader/index.js!./node_modules/ifdef-loader/ifdef-loader.js?!./src/lib/mtproto/mtproto.worker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@cryptography/aes/dist/es/aes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cryptography/aes/dist/es/aes.js ***!
  \*******************************************************/
/*! exports provided: default, CTR, IGE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTR", function() { return AES_IGE$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IGE", function() { return AES_IGE; });
var S = new Uint8Array(256);
var Si = new Uint8Array(256);
var T1 = new Uint32Array(256);
var T2 = new Uint32Array(256);
var T3 = new Uint32Array(256);
var T4 = new Uint32Array(256);
var T5 = new Uint32Array(256);
var T6 = new Uint32Array(256);
var T7 = new Uint32Array(256);
var T8 = new Uint32Array(256);
function computeTables() {
    var d = new Uint8Array(256);
    var t = new Uint8Array(256);
    var x2;
    var x4;
    var x8;
    var s;
    var tEnc;
    var tDec;
    var x = 0;
    var xInv = 0;
    // Compute double and third tables
    for (var i = 0; i < 256; i++) {
        d[i] = i << 1 ^ (i >> 7) * 283;
        t[d[i] ^ i] = i;
    }
    for (; !S[x]; x ^= x2 || 1) {
        // Compute sbox
        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
        s = s >> 8 ^ s & 255 ^ 99;
        S[x] = s;
        Si[s] = x;
        // Compute MixColumns
        x8 = d[x4 = d[x2 = d[x]]];
        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        tEnc = d[s] * 0x101 ^ s * 0x1010100;
        T1[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
        T2[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
        T3[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
        T4[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
        T5[s] = tDec = tDec << 24 ^ tDec >>> 8;
        T6[s] = tDec = tDec << 24 ^ tDec >>> 8;
        T7[s] = tDec = tDec << 24 ^ tDec >>> 8;
        T8[s] = tDec = tDec << 24 ^ tDec >>> 8;
        xInv = t[xInv] || 1;
    }
}

/**
 * Gets a uint32 from string in big-endian order order
 */
function s2i(str, pos) {
    return (str.charCodeAt(pos) << 24
        ^ str.charCodeAt(pos + 1) << 16
        ^ str.charCodeAt(pos + 2) << 8
        ^ str.charCodeAt(pos + 3));
}

/* eslint-disable import/prefer-default-export */
/**
 * Helper function for transforming string key to Uint32Array
 */
function getWords(key) {
    if (key instanceof Uint32Array) {
        return key;
    }
    if (typeof key === 'string') {
        if (key.length % 4 !== 0)
            for (var i = key.length % 4; i <= 4; i++)
                key += '\0x00';
        var buf = new Uint32Array(key.length / 4);
        for (var i = 0; i < key.length; i += 4)
            buf[i / 4] = s2i(key, i);
        return buf;
    }
    if (key instanceof Uint8Array) {
        var buf = new Uint32Array(key.length / 4);
        for (var i = 0; i < key.length; i += 4) {
            buf[i / 4] = (key[i] << 24
                ^ key[i + 1] << 16
                ^ key[i + 2] << 8
                ^ key[i + 3]);
        }
        return buf;
    }
    throw new Error('Unable to create 32-bit words');
}
function xor(left, right, to) {
    if (to === void 0) { to = left; }
    for (var i = 0; i < left.length; i++)
        to[i] = left[i] ^ right[i];
}

computeTables();
/**
 * Low-level AES Cipher
 */
var AES = /** @class */ (function () {
    function AES(_key) {
        var key = getWords(_key);
        if (key.length !== 4 && key.length !== 6 && key.length !== 8) {
            throw new Error('Invalid key size');
        }
        this.encKey = new Uint32Array(4 * key.length + 28);
        this.decKey = new Uint32Array(4 * key.length + 28);
        this.encKey.set(key);
        var rcon = 1;
        var i = key.length;
        var tmp;
        // schedule encryption keys
        for (; i < 4 * key.length + 28; i++) {
            tmp = this.encKey[i - 1];
            // apply sbox
            if (i % key.length === 0 || (key.length === 8 && i % key.length === 4)) {
                tmp = S[tmp >>> 24] << 24 ^ S[(tmp >> 16) & 255] << 16 ^ S[(tmp >> 8) & 255] << 8 ^ S[tmp & 255];
                // shift rows and add rcon
                if (i % key.length === 0) {
                    tmp = tmp << 8 ^ tmp >>> 24 ^ (rcon << 24);
                    rcon = rcon << 1 ^ (rcon >> 7) * 283;
                }
            }
            this.encKey[i] = this.encKey[i - key.length] ^ tmp;
        }
        // schedule decryption keys
        for (var j = 0; i; j++, i--) {
            tmp = this.encKey[j & 3 ? i : i - 4];
            if (i <= 4 || j < 4) {
                this.decKey[j] = tmp;
            }
            else {
                this.decKey[j] = (T5[S[tmp >>> 24]]
                    ^ T6[S[(tmp >> 16) & 255]]
                    ^ T7[S[(tmp >> 8) & 255]]
                    ^ T8[S[tmp & 255]]);
            }
        }
    }
    AES.prototype.encrypt = function (_message) {
        var message = getWords(_message);
        var out = new Uint32Array(4);
        var a = message[0] ^ this.encKey[0];
        var b = message[1] ^ this.encKey[1];
        var c = message[2] ^ this.encKey[2];
        var d = message[3] ^ this.encKey[3];
        var rounds = this.encKey.length / 4 - 2;
        var k = 4;
        var a2;
        var b2;
        var c2;
        // Inner rounds.  Cribbed from OpenSSL.
        for (var i = 0; i < rounds; i++) {
            a2 = T1[a >>> 24] ^ T2[(b >> 16) & 255] ^ T3[(c >> 8) & 255] ^ T4[d & 255] ^ this.encKey[k];
            b2 = T1[b >>> 24] ^ T2[(c >> 16) & 255] ^ T3[(d >> 8) & 255] ^ T4[a & 255] ^ this.encKey[k + 1];
            c2 = T1[c >>> 24] ^ T2[(d >> 16) & 255] ^ T3[(a >> 8) & 255] ^ T4[b & 255] ^ this.encKey[k + 2];
            d = T1[d >>> 24] ^ T2[(a >> 16) & 255] ^ T3[(b >> 8) & 255] ^ T4[c & 255] ^ this.encKey[k + 3];
            a = a2;
            b = b2;
            c = c2;
            k += 4;
            // console.log(a, b, c, d);
        }
        // Last round.
        for (var i = 0; i < 4; i++) {
            out[i] = (S[a >>> 24] << 24
                ^ S[(b >> 16) & 255] << 16
                ^ S[(c >> 8) & 255] << 8
                ^ S[d & 255]
                ^ this.encKey[k++]);
            a2 = a;
            a = b;
            b = c;
            c = d;
            d = a2;
        }
        return out;
    };
    AES.prototype.decrypt = function (_message) {
        var message = getWords(_message);
        var out = new Uint32Array(4);
        var a = message[0] ^ this.decKey[0];
        var b = message[3] ^ this.decKey[1];
        var c = message[2] ^ this.decKey[2];
        var d = message[1] ^ this.decKey[3];
        var rounds = this.decKey.length / 4 - 2;
        var a2;
        var b2;
        var c2;
        var k = 4;
        // Inner rounds.  Cribbed from OpenSSL.
        for (var i = 0; i < rounds; i++) {
            a2 = T5[a >>> 24] ^ T6[(b >> 16) & 255] ^ T7[(c >> 8) & 255] ^ T8[d & 255] ^ this.decKey[k];
            b2 = T5[b >>> 24] ^ T6[(c >> 16) & 255] ^ T7[(d >> 8) & 255] ^ T8[a & 255] ^ this.decKey[k + 1];
            c2 = T5[c >>> 24] ^ T6[(d >> 16) & 255] ^ T7[(a >> 8) & 255] ^ T8[b & 255] ^ this.decKey[k + 2];
            d = T5[d >>> 24] ^ T6[(a >> 16) & 255] ^ T7[(b >> 8) & 255] ^ T8[c & 255] ^ this.decKey[k + 3];
            a = a2;
            b = b2;
            c = c2;
            k += 4;
        }
        // Last round.
        for (var i = 0; i < 4; i++) {
            out[3 & -i] = (Si[a >>> 24] << 24
                ^ Si[(b >> 16) & 255] << 16
                ^ Si[(c >> 8) & 255] << 8
                ^ Si[d & 255]
                ^ this.decKey[k++]);
            a2 = a;
            a = b;
            b = c;
            c = d;
            d = a2;
        }
        return out;
    };
    return AES;
}());

/**
 * AES-IGE mode.
 */
var AES_IGE = /** @class */ (function () {
    function AES_IGE(key, iv, blockSize) {
        if (blockSize === void 0) { blockSize = 16; }
        this.key = getWords(key);
        this.iv = getWords(iv);
        this.cipher = new AES(key);
        this.blockSize = blockSize / 4;
    }
    /**
     * Encrypts plain text with AES-IGE mode.
     */
    AES_IGE.prototype.encrypt = function (message, buf) {
        var text = getWords(message);
        var cipherText = buf || new Uint32Array(text.length);
        var prevX = this.iv.subarray(this.blockSize, this.iv.length);
        var prevY = this.iv.subarray(0, this.blockSize);
        var yXOR = new Uint32Array(this.blockSize);
        for (var i = 0; i < text.length; i += this.blockSize) {
            var x = text.subarray(i, i + this.blockSize);
            xor(x, prevY, yXOR);
            var y = this.cipher.encrypt(yXOR);
            xor(y, prevX);
            prevX = x;
            prevY = y;
            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)
                cipherText[j] = y[k];
        }
        return cipherText;
    };
    /**
     * Decrypts cipher text with AES-IGE mode.
     */
    AES_IGE.prototype.decrypt = function (message, buf) {
        var cipherText = getWords(message);
        var text = buf || new Uint32Array(cipherText.length);
        var prevY = this.iv.subarray(this.blockSize, this.iv.length);
        var prevX = this.iv.subarray(0, this.blockSize);
        var yXOR = new Uint32Array(this.blockSize);
        for (var i = 0; i < text.length; i += this.blockSize) {
            var x = cipherText.subarray(i, i + this.blockSize);
            xor(x, prevY, yXOR);
            var y = this.cipher.decrypt(yXOR);
            xor(y, prevX);
            prevX = x;
            prevY = y;
            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)
                text[j] = y[k];
        }
        return text;
    };
    return AES_IGE;
}());

/**
 * AES-IGE mode.
 */
var AES_IGE$1 = /** @class */ (function () {
    function AES_IGE(key, counter, blockSize) {
        if (blockSize === void 0) { blockSize = 16; }
        this.offset = 0;
        this.key = getWords(key);
        this.counter = getWords(counter);
        this.cipher = new AES(key);
        this.blockSize = blockSize / 4;
        if (this.counter.length !== 4) {
            throw new Error('AES-CTR mode counter must be 16 bytes length');
        }
    }
    /**
     * Encrypts plain text with AES-IGE mode.
     */
    AES_IGE.prototype.encrypt = function (message, buf) {
        var text = getWords(message);
        var cipherText = buf || new Uint32Array(text.length);
        var offset = this.offset;
        for (var i = 0; i < text.length; i += this.blockSize) {
            var x = this.cipher.encrypt(this.counter);
            for (var j = i, k = offset; j < text.length && k < this.blockSize; j++, k++)
                cipherText[j] = x[k] ^ text[j];
            if (text.length - i >= this.blockSize)
                this.incrementCounter();
            if (offset) {
                i -= offset;
                offset = 0;
            }
        }
        this.offset = (this.offset + (text.length % 4)) % 4;
        return cipherText;
    };
    /**
     * Decrypts cipher text with AES-IGE mode.
     */
    AES_IGE.prototype.decrypt = function (message, buf) {
        return this.encrypt(message, buf);
    };
    AES_IGE.prototype.incrementCounter = function () {
        // increment counter
        for (var carry = this.counter.length - 1; carry >= 0; carry--) {
            if (++this.counter[carry] < 0xFFFFFFFF)
                break; // If overflowing, it'll be 0 and we'll have to continue propagating the carry
        }
    };
    return AES_IGE;
}());

/* harmony default export */ __webpack_exports__["default"] = (AES);



/***/ }),

/***/ "./node_modules/pako/dist/pako_inflate.min.js":
/*!****************************************************!*\
  !*** ./node_modules/pako/dist/pako_inflate.min.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! pako 2.0.3 https://github.com/nodeca/pako @license (MIT AND Zlib) */
!function(e,t){ true?t(exports):undefined}(this,(function(e){"use strict";var t=(e,t,i,n)=>{let a=65535&e|0,r=e>>>16&65535|0,s=0;for(;0!==i;){s=i>2e3?2e3:i,i-=s;do{a=a+t[n++]|0,r=r+a|0}while(--s);a%=65521,r%=65521}return a|r<<16|0};const i=new Uint32Array((()=>{let e,t=[];for(var i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t})());var n=(e,t,n,a)=>{const r=i,s=a+n;e^=-1;for(let i=a;i<s;i++)e=e>>>8^r[255&(e^t[i])];return-1^e};var a=function(e,t){let i,n,a,r,s,o,l,d,f,h,c,u,w,b,k,m,_,g,v,p,y,x,E,R;const A=e.state;i=e.next_in,E=e.input,n=i+(e.avail_in-5),a=e.next_out,R=e.output,r=a-(t-e.avail_out),s=a+(e.avail_out-257),o=A.dmax,l=A.wsize,d=A.whave,f=A.wnext,h=A.window,c=A.hold,u=A.bits,w=A.lencode,b=A.distcode,k=(1<<A.lenbits)-1,m=(1<<A.distbits)-1;e:do{u<15&&(c+=E[i++]<<u,u+=8,c+=E[i++]<<u,u+=8),_=w[c&k];t:for(;;){if(g=_>>>24,c>>>=g,u-=g,g=_>>>16&255,0===g)R[a++]=65535&_;else{if(!(16&g)){if(0==(64&g)){_=w[(65535&_)+(c&(1<<g)-1)];continue t}if(32&g){A.mode=12;break e}e.msg="invalid literal/length code",A.mode=30;break e}v=65535&_,g&=15,g&&(u<g&&(c+=E[i++]<<u,u+=8),v+=c&(1<<g)-1,c>>>=g,u-=g),u<15&&(c+=E[i++]<<u,u+=8,c+=E[i++]<<u,u+=8),_=b[c&m];i:for(;;){if(g=_>>>24,c>>>=g,u-=g,g=_>>>16&255,!(16&g)){if(0==(64&g)){_=b[(65535&_)+(c&(1<<g)-1)];continue i}e.msg="invalid distance code",A.mode=30;break e}if(p=65535&_,g&=15,u<g&&(c+=E[i++]<<u,u+=8,u<g&&(c+=E[i++]<<u,u+=8)),p+=c&(1<<g)-1,p>o){e.msg="invalid distance too far back",A.mode=30;break e}if(c>>>=g,u-=g,g=a-r,p>g){if(g=p-g,g>d&&A.sane){e.msg="invalid distance too far back",A.mode=30;break e}if(y=0,x=h,0===f){if(y+=l-g,g<v){v-=g;do{R[a++]=h[y++]}while(--g);y=a-p,x=R}}else if(f<g){if(y+=l+f-g,g-=f,g<v){v-=g;do{R[a++]=h[y++]}while(--g);if(y=0,f<v){g=f,v-=g;do{R[a++]=h[y++]}while(--g);y=a-p,x=R}}}else if(y+=f-g,g<v){v-=g;do{R[a++]=h[y++]}while(--g);y=a-p,x=R}for(;v>2;)R[a++]=x[y++],R[a++]=x[y++],R[a++]=x[y++],v-=3;v&&(R[a++]=x[y++],v>1&&(R[a++]=x[y++]))}else{y=a-p;do{R[a++]=R[y++],R[a++]=R[y++],R[a++]=R[y++],v-=3}while(v>2);v&&(R[a++]=R[y++],v>1&&(R[a++]=R[y++]))}break}}break}}while(i<n&&a<s);v=u>>3,i-=v,u-=v<<3,c&=(1<<u)-1,e.next_in=i,e.next_out=a,e.avail_in=i<n?n-i+5:5-(i-n),e.avail_out=a<s?s-a+257:257-(a-s),A.hold=c,A.bits=u};const r=15,s=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),o=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),l=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),d=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var f=(e,t,i,n,a,f,h,c)=>{const u=c.bits;let w,b,k,m,_,g,v=0,p=0,y=0,x=0,E=0,R=0,A=0,Z=0,S=0,O=0,U=null,T=0;const D=new Uint16Array(16),I=new Uint16Array(16);let B,N,C,z=null,F=0;for(v=0;v<=r;v++)D[v]=0;for(p=0;p<n;p++)D[t[i+p]]++;for(E=u,x=r;x>=1&&0===D[x];x--);if(E>x&&(E=x),0===x)return a[f++]=20971520,a[f++]=20971520,c.bits=1,0;for(y=1;y<x&&0===D[y];y++);for(E<y&&(E=y),Z=1,v=1;v<=r;v++)if(Z<<=1,Z-=D[v],Z<0)return-1;if(Z>0&&(0===e||1!==x))return-1;for(I[1]=0,v=1;v<r;v++)I[v+1]=I[v]+D[v];for(p=0;p<n;p++)0!==t[i+p]&&(h[I[t[i+p]]++]=p);if(0===e?(U=z=h,g=19):1===e?(U=s,T-=257,z=o,F-=257,g=256):(U=l,z=d,g=-1),O=0,p=0,v=y,_=f,R=E,A=0,k=-1,S=1<<E,m=S-1,1===e&&S>852||2===e&&S>592)return 1;for(;;){B=v-A,h[p]<g?(N=0,C=h[p]):h[p]>g?(N=z[F+h[p]],C=U[T+h[p]]):(N=96,C=0),w=1<<v-A,b=1<<R,y=b;do{b-=w,a[_+(O>>A)+b]=B<<24|N<<16|C|0}while(0!==b);for(w=1<<v-1;O&w;)w>>=1;if(0!==w?(O&=w-1,O+=w):O=0,p++,0==--D[v]){if(v===x)break;v=t[i+h[p]]}if(v>E&&(O&m)!==k){for(0===A&&(A=E),_+=y,R=v-A,Z=1<<R;R+A<x&&(Z-=D[R+A],!(Z<=0));)R++,Z<<=1;if(S+=1<<R,1===e&&S>852||2===e&&S>592)return 1;k=O&m,a[k]=E<<24|R<<16|_-f|0}}return 0!==O&&(a[_+O]=v-A<<24|64<<16|0),c.bits=E,0},h={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{Z_FINISH:c,Z_BLOCK:u,Z_TREES:w,Z_OK:b,Z_STREAM_END:k,Z_NEED_DICT:m,Z_STREAM_ERROR:_,Z_DATA_ERROR:g,Z_MEM_ERROR:v,Z_BUF_ERROR:p,Z_DEFLATED:y}=h,x=12,E=30,R=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function A(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Z=e=>{if(!e||!e.state)return _;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,b},S=e=>{if(!e||!e.state)return _;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,Z(e)},O=(e,t)=>{let i;if(!e||!e.state)return _;const n=e.state;return t<0?(i=0,t=-t):(i=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?_:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,S(e))},U=(e,t)=>{if(!e)return _;const i=new A;e.state=i,i.window=null;const n=O(e,t);return n!==b&&(e.state=null),n};let T,D,I=!0;const B=e=>{if(I){T=new Int32Array(512),D=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(f(1,e.lens,0,288,T,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;f(2,e.lens,0,32,D,0,e.work,{bits:5}),I=!1}e.lencode=T,e.lenbits=9,e.distcode=D,e.distbits=5},N=(e,t,i,n)=>{let a;const r=e.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),n>=r.wsize?(r.window.set(t.subarray(i-r.wsize,i),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>n&&(a=n),r.window.set(t.subarray(i-n,i-n+a),r.wnext),(n-=a)?(r.window.set(t.subarray(i-n,i),0),r.wnext=n,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0};var C={inflateReset:S,inflateReset2:O,inflateResetKeep:Z,inflateInit:e=>U(e,15),inflateInit2:U,inflate:(e,i)=>{let r,s,o,l,d,h,A,Z,S,O,U,T,D,I,C,z,F,L,M,H,j,K,P=0;const Y=new Uint8Array(4);let G,X;const W=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return _;r=e.state,r.mode===x&&(r.mode=13),d=e.next_out,o=e.output,A=e.avail_out,l=e.next_in,s=e.input,h=e.avail_in,Z=r.hold,S=r.bits,O=h,U=A,K=b;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;S<16;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(2&r.wrap&&35615===Z){r.check=0,Y[0]=255&Z,Y[1]=Z>>>8&255,r.check=n(r.check,Y,2,0),Z=0,S=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&Z)<<8)+(Z>>8))%31){e.msg="incorrect header check",r.mode=E;break}if((15&Z)!==y){e.msg="unknown compression method",r.mode=E;break}if(Z>>>=4,S-=4,j=8+(15&Z),0===r.wbits)r.wbits=j;else if(j>r.wbits){e.msg="invalid window size",r.mode=E;break}r.dmax=1<<r.wbits,e.adler=r.check=1,r.mode=512&Z?10:x,Z=0,S=0;break;case 2:for(;S<16;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(r.flags=Z,(255&r.flags)!==y){e.msg="unknown compression method",r.mode=E;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=E;break}r.head&&(r.head.text=Z>>8&1),512&r.flags&&(Y[0]=255&Z,Y[1]=Z>>>8&255,r.check=n(r.check,Y,2,0)),Z=0,S=0,r.mode=3;case 3:for(;S<32;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.head&&(r.head.time=Z),512&r.flags&&(Y[0]=255&Z,Y[1]=Z>>>8&255,Y[2]=Z>>>16&255,Y[3]=Z>>>24&255,r.check=n(r.check,Y,4,0)),Z=0,S=0,r.mode=4;case 4:for(;S<16;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.head&&(r.head.xflags=255&Z,r.head.os=Z>>8),512&r.flags&&(Y[0]=255&Z,Y[1]=Z>>>8&255,r.check=n(r.check,Y,2,0)),Z=0,S=0,r.mode=5;case 5:if(1024&r.flags){for(;S<16;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.length=Z,r.head&&(r.head.extra_len=Z),512&r.flags&&(Y[0]=255&Z,Y[1]=Z>>>8&255,r.check=n(r.check,Y,2,0)),Z=0,S=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(T=r.length,T>h&&(T=h),T&&(r.head&&(j=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Uint8Array(r.head.extra_len)),r.head.extra.set(s.subarray(l,l+T),j)),512&r.flags&&(r.check=n(r.check,s,T,l)),h-=T,l+=T,r.length-=T),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===h)break e;T=0;do{j=s[l+T++],r.head&&j&&r.length<65536&&(r.head.name+=String.fromCharCode(j))}while(j&&T<h);if(512&r.flags&&(r.check=n(r.check,s,T,l)),h-=T,l+=T,j)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===h)break e;T=0;do{j=s[l+T++],r.head&&j&&r.length<65536&&(r.head.comment+=String.fromCharCode(j))}while(j&&T<h);if(512&r.flags&&(r.check=n(r.check,s,T,l)),h-=T,l+=T,j)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;S<16;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(Z!==(65535&r.check)){e.msg="header crc mismatch",r.mode=E;break}Z=0,S=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=x;break;case 10:for(;S<32;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}e.adler=r.check=R(Z),Z=0,S=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=d,e.avail_out=A,e.next_in=l,e.avail_in=h,r.hold=Z,r.bits=S,m;e.adler=r.check=1,r.mode=x;case x:if(i===u||i===w)break e;case 13:if(r.last){Z>>>=7&S,S-=7&S,r.mode=27;break}for(;S<3;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}switch(r.last=1&Z,Z>>>=1,S-=1,3&Z){case 0:r.mode=14;break;case 1:if(B(r),r.mode=20,i===w){Z>>>=2,S-=2;break e}break;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=E}Z>>>=2,S-=2;break;case 14:for(Z>>>=7&S,S-=7&S;S<32;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if((65535&Z)!=(Z>>>16^65535)){e.msg="invalid stored block lengths",r.mode=E;break}if(r.length=65535&Z,Z=0,S=0,r.mode=15,i===w)break e;case 15:r.mode=16;case 16:if(T=r.length,T){if(T>h&&(T=h),T>A&&(T=A),0===T)break e;o.set(s.subarray(l,l+T),d),h-=T,l+=T,A-=T,d+=T,r.length-=T;break}r.mode=x;break;case 17:for(;S<14;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(r.nlen=257+(31&Z),Z>>>=5,S-=5,r.ndist=1+(31&Z),Z>>>=5,S-=5,r.ncode=4+(15&Z),Z>>>=4,S-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=E;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;S<3;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.lens[W[r.have++]]=7&Z,Z>>>=3,S-=3}for(;r.have<19;)r.lens[W[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,G={bits:r.lenbits},K=f(0,r.lens,0,19,r.lencode,0,r.work,G),r.lenbits=G.bits,K){e.msg="invalid code lengths set",r.mode=E;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;P=r.lencode[Z&(1<<r.lenbits)-1],C=P>>>24,z=P>>>16&255,F=65535&P,!(C<=S);){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(F<16)Z>>>=C,S-=C,r.lens[r.have++]=F;else{if(16===F){for(X=C+2;S<X;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(Z>>>=C,S-=C,0===r.have){e.msg="invalid bit length repeat",r.mode=E;break}j=r.lens[r.have-1],T=3+(3&Z),Z>>>=2,S-=2}else if(17===F){for(X=C+3;S<X;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}Z>>>=C,S-=C,j=0,T=3+(7&Z),Z>>>=3,S-=3}else{for(X=C+7;S<X;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}Z>>>=C,S-=C,j=0,T=11+(127&Z),Z>>>=7,S-=7}if(r.have+T>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=E;break}for(;T--;)r.lens[r.have++]=j}}if(r.mode===E)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=E;break}if(r.lenbits=9,G={bits:r.lenbits},K=f(1,r.lens,0,r.nlen,r.lencode,0,r.work,G),r.lenbits=G.bits,K){e.msg="invalid literal/lengths set",r.mode=E;break}if(r.distbits=6,r.distcode=r.distdyn,G={bits:r.distbits},K=f(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,G),r.distbits=G.bits,K){e.msg="invalid distances set",r.mode=E;break}if(r.mode=20,i===w)break e;case 20:r.mode=21;case 21:if(h>=6&&A>=258){e.next_out=d,e.avail_out=A,e.next_in=l,e.avail_in=h,r.hold=Z,r.bits=S,a(e,U),d=e.next_out,o=e.output,A=e.avail_out,l=e.next_in,s=e.input,h=e.avail_in,Z=r.hold,S=r.bits,r.mode===x&&(r.back=-1);break}for(r.back=0;P=r.lencode[Z&(1<<r.lenbits)-1],C=P>>>24,z=P>>>16&255,F=65535&P,!(C<=S);){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(z&&0==(240&z)){for(L=C,M=z,H=F;P=r.lencode[H+((Z&(1<<L+M)-1)>>L)],C=P>>>24,z=P>>>16&255,F=65535&P,!(L+C<=S);){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}Z>>>=L,S-=L,r.back+=L}if(Z>>>=C,S-=C,r.back+=C,r.length=F,0===z){r.mode=26;break}if(32&z){r.back=-1,r.mode=x;break}if(64&z){e.msg="invalid literal/length code",r.mode=E;break}r.extra=15&z,r.mode=22;case 22:if(r.extra){for(X=r.extra;S<X;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.length+=Z&(1<<r.extra)-1,Z>>>=r.extra,S-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;P=r.distcode[Z&(1<<r.distbits)-1],C=P>>>24,z=P>>>16&255,F=65535&P,!(C<=S);){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(0==(240&z)){for(L=C,M=z,H=F;P=r.distcode[H+((Z&(1<<L+M)-1)>>L)],C=P>>>24,z=P>>>16&255,F=65535&P,!(L+C<=S);){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}Z>>>=L,S-=L,r.back+=L}if(Z>>>=C,S-=C,r.back+=C,64&z){e.msg="invalid distance code",r.mode=E;break}r.offset=F,r.extra=15&z,r.mode=24;case 24:if(r.extra){for(X=r.extra;S<X;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}r.offset+=Z&(1<<r.extra)-1,Z>>>=r.extra,S-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=E;break}r.mode=25;case 25:if(0===A)break e;if(T=U-A,r.offset>T){if(T=r.offset-T,T>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=E;break}T>r.wnext?(T-=r.wnext,D=r.wsize-T):D=r.wnext-T,T>r.length&&(T=r.length),I=r.window}else I=o,D=d-r.offset,T=r.length;T>A&&(T=A),A-=T,r.length-=T;do{o[d++]=I[D++]}while(--T);0===r.length&&(r.mode=21);break;case 26:if(0===A)break e;o[d++]=r.length,A--,r.mode=21;break;case 27:if(r.wrap){for(;S<32;){if(0===h)break e;h--,Z|=s[l++]<<S,S+=8}if(U-=A,e.total_out+=U,r.total+=U,U&&(e.adler=r.check=r.flags?n(r.check,o,U,d-U):t(r.check,o,U,d-U)),U=A,(r.flags?Z:R(Z))!==r.check){e.msg="incorrect data check",r.mode=E;break}Z=0,S=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;S<32;){if(0===h)break e;h--,Z+=s[l++]<<S,S+=8}if(Z!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=E;break}Z=0,S=0}r.mode=29;case 29:K=k;break e;case E:K=g;break e;case 31:return v;case 32:default:return _}return e.next_out=d,e.avail_out=A,e.next_in=l,e.avail_in=h,r.hold=Z,r.bits=S,(r.wsize||U!==e.avail_out&&r.mode<E&&(r.mode<27||i!==c))&&N(e,e.output,e.next_out,U-e.avail_out),O-=e.avail_in,U-=e.avail_out,e.total_in+=O,e.total_out+=U,r.total+=U,r.wrap&&U&&(e.adler=r.check=r.flags?n(r.check,o,U,e.next_out-U):t(r.check,o,U,e.next_out-U)),e.data_type=r.bits+(r.last?64:0)+(r.mode===x?128:0)+(20===r.mode||15===r.mode?256:0),(0===O&&0===U||i===c)&&K===b&&(K=p),K},inflateEnd:e=>{if(!e||!e.state)return _;let t=e.state;return t.window&&(t.window=null),e.state=null,b},inflateGetHeader:(e,t)=>{if(!e||!e.state)return _;const i=e.state;return 0==(2&i.wrap)?_:(i.head=t,t.done=!1,b)},inflateSetDictionary:(e,i)=>{const n=i.length;let a,r,s;return e&&e.state?(a=e.state,0!==a.wrap&&11!==a.mode?_:11===a.mode&&(r=1,r=t(r,i,n,0),r!==a.check)?g:(s=N(e,i,n,n),s?(a.mode=31,v):(a.havedict=1,b))):_},inflateInfo:"pako inflate (from Nodeca project)"};const z=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var F=function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(const t in i)z(i,t)&&(e[t]=i[t])}}return e},L=e=>{let t=0;for(let i=0,n=e.length;i<n;i++)t+=e[i].length;const i=new Uint8Array(t);for(let t=0,n=0,a=e.length;t<a;t++){let a=e[t];i.set(a,n),n+=a.length}return i};let M=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){M=!1}const H=new Uint8Array(256);for(let e=0;e<256;e++)H[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;H[254]=H[254]=1;var j=e=>{let t,i,n,a,r,s=e.length,o=0;for(a=0;a<s;a++)i=e.charCodeAt(a),55296==(64512&i)&&a+1<s&&(n=e.charCodeAt(a+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),a++)),o+=i<128?1:i<2048?2:i<65536?3:4;for(t=new Uint8Array(o),r=0,a=0;r<o;a++)i=e.charCodeAt(a),55296==(64512&i)&&a+1<s&&(n=e.charCodeAt(a+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),a++)),i<128?t[r++]=i:i<2048?(t[r++]=192|i>>>6,t[r++]=128|63&i):i<65536?(t[r++]=224|i>>>12,t[r++]=128|i>>>6&63,t[r++]=128|63&i):(t[r++]=240|i>>>18,t[r++]=128|i>>>12&63,t[r++]=128|i>>>6&63,t[r++]=128|63&i);return t},K=(e,t)=>{let i,n;const a=t||e.length,r=new Array(2*a);for(n=0,i=0;i<a;){let t=e[i++];if(t<128){r[n++]=t;continue}let s=H[t];if(s>4)r[n++]=65533,i+=s-1;else{for(t&=2===s?31:3===s?15:7;s>1&&i<a;)t=t<<6|63&e[i++],s--;s>1?r[n++]=65533:t<65536?r[n++]=t:(t-=65536,r[n++]=55296|t>>10&1023,r[n++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&M)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let i="";for(let n=0;n<t;n++)i+=String.fromCharCode(e[n]);return i})(r,n)},P=(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let i=t-1;for(;i>=0&&128==(192&e[i]);)i--;return i<0||0===i?t:i+H[e[i]]>t?i:t},Y={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var G=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var X=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const W=Object.prototype.toString,{Z_NO_FLUSH:q,Z_FINISH:J,Z_OK:Q,Z_STREAM_END:V,Z_NEED_DICT:$,Z_STREAM_ERROR:ee,Z_DATA_ERROR:te,Z_MEM_ERROR:ie}=h;function ne(e){this.options=F({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new G,this.strm.avail_out=0;let i=C.inflateInit2(this.strm,t.windowBits);if(i!==Q)throw new Error(Y[i]);if(this.header=new X,C.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=j(t.dictionary):"[object ArrayBuffer]"===W.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(i=C.inflateSetDictionary(this.strm,t.dictionary),i!==Q)))throw new Error(Y[i])}function ae(e,t){const i=new ne(t);if(i.push(e),i.err)throw i.msg||Y[i.err];return i.result}ne.prototype.push=function(e,t){const i=this.strm,n=this.options.chunkSize,a=this.options.dictionary;let r,s,o;if(this.ended)return!1;for(s=t===~~t?t:!0===t?J:q,"[object ArrayBuffer]"===W.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;;){for(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),r=C.inflate(i,s),r===$&&a&&(r=C.inflateSetDictionary(i,a),r===Q?r=C.inflate(i,s):r===te&&(r=$));i.avail_in>0&&r===V&&i.state.wrap>0&&0!==e[i.next_in];)C.inflateReset(i),r=C.inflate(i,s);switch(r){case ee:case te:case $:case ie:return this.onEnd(r),this.ended=!0,!1}if(o=i.avail_out,i.next_out&&(0===i.avail_out||r===V))if("string"===this.options.to){let e=P(i.output,i.next_out),t=i.next_out-e,a=K(i.output,e);i.next_out=t,i.avail_out=n-t,t&&i.output.set(i.output.subarray(e,e+t),0),this.onData(a)}else this.onData(i.output.length===i.next_out?i.output:i.output.subarray(0,i.next_out));if(r!==Q||0!==o){if(r===V)return r=C.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===i.avail_in)break}}return!0},ne.prototype.onData=function(e){this.chunks.push(e)},ne.prototype.onEnd=function(e){e===Q&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=L(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var re=ne,se=ae,oe=function(e,t){return(t=t||{}).raw=!0,ae(e,t)},le=ae,de=h,fe={Inflate:re,inflate:se,inflateRaw:oe,ungzip:le,constants:de};e.Inflate=re,e.constants=de,e.default=fe,e.inflate=se,e.inflateRaw=oe,e.ungzip=le,Object.defineProperty(e,"__esModule",{value:!0})}));


/***/ }),

/***/ "./node_modules/ts-loader/index.js!./node_modules/ifdef-loader/ifdef-loader.js?!./src/lib/mtproto/mtproto.worker.ts":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/ts-loader!./node_modules/ifdef-loader/ifdef-loader.js??ref--5-1!./src/lib/mtproto/mtproto.worker.ts ***!
  \**************************************************************************************************************************/
/*! exports provided: isWebpSupported */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWebpSupported", function() { return isWebpSupported; });
/* harmony import */ var _polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../polyfill */ "./src/lib/polyfill.ts");
/* harmony import */ var _apiManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apiManager */ "./src/lib/mtproto/apiManager.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _networkerFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./networkerFactory */ "./src/lib/mtproto/networkerFactory.ts");
/* harmony import */ var _apiFileManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./apiFileManager */ "./src/lib/mtproto/apiFileManager.ts");
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers/context */ "./src/helpers/context.ts");
/* harmony import */ var _cacheStorage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cacheStorage */ "./src/lib/cacheStorage.ts");
/* harmony import */ var _sessionStorage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sessionStorage */ "./src/lib/sessionStorage.ts");
/* harmony import */ var _transports_socketProxied__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transports/socketProxied */ "./src/lib/mtproto/transports/socketProxied.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _environment_ctx__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../environment/ctx */ "./src/environment/ctx.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// just to include











let webpSupported = false;
const isWebpSupported = () => {
    return webpSupported;
};
_networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"].setUpdatesProcessor((obj) => {
    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ update: obj });
});
_networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"].onConnectionStatusChange = (status) => {
    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ type: 'connectionStatusChange', payload: status });
};
const taskListeners = {
    convertWebp: (task) => {
        const { fileName, bytes } = task.payload;
        const deferred = _apiFileManager__WEBPACK_IMPORTED_MODULE_4__["default"].webpConvertPromises[fileName];
        if (deferred) {
            deferred.resolve(bytes);
            delete _apiFileManager__WEBPACK_IMPORTED_MODULE_4__["default"].webpConvertPromises[fileName];
        }
    },
    webpSupport: (task) => {
        webpSupported = task.payload;
    },
    socketProxy: (task) => {
        const socketTask = task.payload;
        const id = socketTask.id;
        const socketProxied = _transports_socketProxied__WEBPACK_IMPORTED_MODULE_8__["socketsProxied"].get(id);
        if (socketTask.type === 'message') {
            socketProxied.dispatchEvent('message', socketTask.payload);
        }
        else if (socketTask.type === 'open') {
            socketProxied.dispatchEvent('open');
        }
        else if (socketTask.type === 'close') {
            socketProxied.dispatchEvent('close');
            _transports_socketProxied__WEBPACK_IMPORTED_MODULE_8__["socketsProxied"].delete(id);
        }
    },
    localStorageProxy: (task) => {
        _sessionStorage__WEBPACK_IMPORTED_MODULE_7__["default"].finishTask(task.id, task.payload);
    },
    userAgent: (task) => {
        _networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"].userAgent = task.payload;
    },
    online: () => {
        _networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"].forceReconnectTimeout();
    },
    forceReconnect: () => {
        _networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"].forceReconnect();
    },
    toggleStorage: (task) => {
        const enabled = task.payload;
        // AppStorage.toggleStorage(enabled);
        _cacheStorage__WEBPACK_IMPORTED_MODULE_6__["default"].toggleStorage(enabled);
    },
    refreshReference: (task) => {
        const hex = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesToHex"])(task.originalPayload);
        const r = _apiFileManager__WEBPACK_IMPORTED_MODULE_4__["default"].refreshReferencePromises[hex];
        const deferred = r === null || r === void 0 ? void 0 : r.deferred;
        if (deferred) {
            if (task.error) {
                deferred.reject(task.error);
            }
            else {
                deferred.resolve(task.payload);
            }
        }
    }
};
const onMessage = (e) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const task = e.data;
        const taskId = task.taskId;
        // @ts-ignore
        const f = taskListeners[task.type];
        if (f) {
            f(task);
            return;
        }
        if (!task.task) {
            return;
        }
        switch (task.task) {
            case 'computeSRP':
            case 'gzipUncompress':
                return _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto(task.task, ...task.args).then(result => {
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, result });
                });
            case 'requestFilePart':
            case 'setQueueId':
            case 'cancelDownload':
            case 'uploadFile':
            case 'downloadFile': {
                try {
                    // @ts-ignore
                    let result = _apiFileManager__WEBPACK_IMPORTED_MODULE_4__["default"][task.task].apply(_apiFileManager__WEBPACK_IMPORTED_MODULE_4__["default"], task.args);
                    if (result instanceof Promise) {
                        /* (result as ReturnType<ApiFileManager['downloadFile']>).notify = (progress: {done: number, total: number, offset: number}) => {
                          notify({progress: {fileName, ...progress}});
                        }; */
                        result = yield result;
                    }
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, result });
                }
                catch (error) {
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, error });
                }
                break;
            }
            case 'getNetworker': {
                // @ts-ignore
                _apiManager__WEBPACK_IMPORTED_MODULE_1__["default"][task.task].apply(_apiManager__WEBPACK_IMPORTED_MODULE_1__["default"], task.args).finally(() => {
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, result: null });
                });
                break;
            }
            case 'setLanguage':
            case 'startAll':
            case 'stopAll': {
                // @ts-ignore
                _networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"][task.task].apply(_networkerFactory__WEBPACK_IMPORTED_MODULE_3__["default"], task.args);
                break;
            }
            default: {
                try {
                    // @ts-ignore
                    let result = _apiManager__WEBPACK_IMPORTED_MODULE_1__["default"][task.task].apply(_apiManager__WEBPACK_IMPORTED_MODULE_1__["default"], task.args);
                    if (result instanceof Promise) {
                        result = yield result;
                    }
                    //console.log(notifyAll);
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, result });
                }
                catch (error) {
                    Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])({ taskId, error });
                }
                //throw new Error('Unknown task: ' + task.task);
                break;
            }
        }
    }
    catch (err) {
        console.error('worker task error:', err);
    }
});
//console.log('[WORKER] Will send ready', Date.now() / 1000);
_environment_ctx__WEBPACK_IMPORTED_MODULE_10__["default"].addEventListener('message', onMessage);
Object(_helpers_context__WEBPACK_IMPORTED_MODULE_5__["notifyAll"])('ready');


/***/ }),

/***/ "./src/config/app.ts":
/*!***************************!*\
  !*** ./src/config/app.ts ***!
  \***************************/
/*! exports provided: MAIN_DOMAIN, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAIN_DOMAIN", function() { return MAIN_DOMAIN; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
const MAIN_DOMAIN = 'web.telegram.org';
const App = {
    id: +"1025907",
    hash: "452b0359b988148995f22ff0f4229750",
    version: "0.9.2",
    versionFull: "0.9.2 (35)",
    build: +"35",
    langPackVersion: '0.3.7',
    langPack: 'macos',
    langPackCode: 'en',
    domains: [MAIN_DOMAIN],
    baseDcId: 2,
    isMainDomain: location.hostname === MAIN_DOMAIN,
    suffix: 'K'
};
if (App.isMainDomain) { // use Webogram credentials then
    App.id = 2496;
    App.hash = '8da85b0d5bfe62527e5b244c209159c3';
}
/* harmony default export */ __webpack_exports__["default"] = (App);


/***/ }),

/***/ "./src/config/debug.ts":
/*!*****************************!*\
  !*** ./src/config/debug.ts ***!
  \*****************************/
/*! exports provided: DEBUG, MOUNT_CLASS_TO, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEBUG", function() { return DEBUG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUNT_CLASS_TO", function() { return MOUNT_CLASS_TO; });
/* harmony import */ var _modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modes */ "./src/config/modes.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */

const DEBUG =  true || false;
const ctx = typeof (window) !== 'undefined' ? window : self;
const MOUNT_CLASS_TO = DEBUG || true /*  && false */ ? ctx : {};
/* harmony default export */ __webpack_exports__["default"] = (DEBUG);
//let m = DEBUG;
/* if(!DEBUG) {
  ctx.sandpitTurtle = () => {
    //if(!m) {
      for(let i in MOUNT_CLASS_TO) {
        ctx[i] = MOUNT_CLASS_TO[i];
      }
      //m = true;
    //}
  
    //DEBUG = !DEBUG;
  };
} */
/* export const superDebug = (object: any, key: string) => {
  var d = object[key];
  var beforeStr = '', afterStr = '';
  for(var r of d) {
    beforeStr += r.before.hex + '\n';
    afterStr += r.after.hex + '\n';
  }

  beforeStr = beforeStr.trim();
  afterStr = afterStr.trim();
  //var beforeStr = d.map(r => r.before.hex).join('\n');
  //var afterStr = d.map(r => r.after.hex).join('\n');

  var dada = (name: string, str: string) => {
    var a = document.createElement('a');
    a.target = '_blank';
    a.download = name + '.txt';
    a.href = URL.createObjectURL(new Blob([str], {
      type: 'text/plain'
    }));
    document.body.append(a);
    a.click();
  };

  dada(key + '_' + 'before', beforeStr);
  dada(key + '_' + 'after', afterStr);
}

MOUNT_CLASS_TO.superDebug = superDebug; */


/***/ }),

/***/ "./src/config/modes.ts":
/*!*****************************!*\
  !*** ./src/config/modes.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
const Modes = {
    test: location.search.indexOf('test=1') > 0 /*  || true */,
    debug: location.search.indexOf('debug=1') > 0,
    http: false,
    ssl: true,
    multipleConnections: true,
    asServiceWorker: false
};
/* harmony default export */ __webpack_exports__["default"] = (Modes);


/***/ }),

/***/ "./src/environment/ctx.ts":
/*!********************************!*\
  !*** ./src/environment/ctx.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const ctx = typeof (window) !== 'undefined' ? window : self;
/* harmony default export */ __webpack_exports__["default"] = (ctx);


/***/ }),

/***/ "./src/environment/userAgent.ts":
/*!**************************************!*\
  !*** ./src/environment/userAgent.ts ***!
  \**************************************/
/*! exports provided: USER_AGENT, IS_APPLE, IS_ANDROID, IS_CHROMIUM, IS_APPLE_MOBILE, IS_SAFARI, IS_FIREFOX, IS_MOBILE_SAFARI, IS_MOBILE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "USER_AGENT", function() { return USER_AGENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_APPLE", function() { return IS_APPLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_ANDROID", function() { return IS_ANDROID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_CHROMIUM", function() { return IS_CHROMIUM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_APPLE_MOBILE", function() { return IS_APPLE_MOBILE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_SAFARI", function() { return IS_SAFARI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_FIREFOX", function() { return IS_FIREFOX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_MOBILE_SAFARI", function() { return IS_MOBILE_SAFARI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_MOBILE", function() { return IS_MOBILE; });
/* harmony import */ var _ctx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ctx */ "./src/environment/ctx.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */

const USER_AGENT = navigator ? navigator.userAgent : null;
const IS_APPLE = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;
const IS_ANDROID = navigator.userAgent.toLowerCase().indexOf('android') !== -1;
const IS_CHROMIUM = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
// https://stackoverflow.com/a/58065241
const IS_APPLE_MOBILE = (/iPad|iPhone|iPod/.test(navigator.platform) ||
    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&
    !_ctx__WEBPACK_IMPORTED_MODULE_0__["default"].MSStream;
const IS_SAFARI = !!('safari' in _ctx__WEBPACK_IMPORTED_MODULE_0__["default"]) || !!(USER_AGENT && (/\b(iPad|iPhone|iPod)\b/.test(USER_AGENT) || (!!USER_AGENT.match('Safari') && !USER_AGENT.match('Chrome')))) /*  || true */;
const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
const IS_MOBILE_SAFARI = IS_SAFARI && IS_APPLE_MOBILE;
const IS_MOBILE = /* screen.width && screen.width < 480 ||  */ navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;


/***/ }),

/***/ "./src/helpers/array.ts":
/*!******************************!*\
  !*** ./src/helpers/array.ts ***!
  \******************************/
/*! exports provided: accumulate, indexOfAndSplice, findAndSpliceAll, forEachReverse, insertInDescendSortedArray, filterUnique */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accumulate", function() { return accumulate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexOfAndSplice", function() { return indexOfAndSplice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findAndSpliceAll", function() { return findAndSpliceAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachReverse", function() { return forEachReverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertInDescendSortedArray", function() { return insertInDescendSortedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterUnique", function() { return filterUnique; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
/* import { copy } from "./object";

export function listMergeSorted(list1: any[] = [], list2: any[] = []) {
  const result = copy(list1);

  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;
  for(let i = 0; i < list2.length; i++) {
    if(list2[i] < minId) {
      result.push(list2[i]);
    }
  }

  return result;
} */
const accumulate = (arr, initialValue) => arr.reduce((acc, value) => acc + value, initialValue);
function indexOfAndSplice(array, item) {
    const idx = array.indexOf(item);
    const spliced = idx !== -1 && array.splice(idx, 1);
    return spliced && spliced[0];
}
function findAndSpliceAll(array, verify) {
    const out = [];
    let idx = -1;
    while ((idx = array.findIndex(verify)) !== -1) {
        out.push(array.splice(idx, 1)[0]);
    }
    return out;
}
function forEachReverse(array, callback) {
    for (let length = array.length, i = length - 1; i >= 0; --i) {
        callback(array[i], i, array);
    }
}
;
function insertInDescendSortedArray(array, element, property, pos) {
    const sortProperty = element[property];
    if (pos === undefined) {
        pos = array.indexOf(element);
        if (pos !== -1) {
            const prev = array[pos - 1];
            const next = array[pos + 1];
            if ((!prev || prev[property] >= sortProperty) && (!next || next[property] <= sortProperty)) {
                // console.warn('same pos', pos, sortProperty, prev, next);
                return pos;
            }
            array.splice(pos, 1);
        }
    }
    const len = array.length;
    if (!len || sortProperty <= array[len - 1][property]) {
        return array.push(element) - 1;
    }
    else if (sortProperty >= array[0][property]) {
        array.unshift(element);
        return 0;
    }
    else {
        for (let i = 0; i < len; i++) {
            if (sortProperty > array[i][property]) {
                array.splice(i, 0, element);
                return i;
            }
        }
    }
    console.error('wtf', array, element);
    return array.indexOf(element);
}
function filterUnique(arr) {
    return [...new Set(arr)];
}


/***/ }),

/***/ "./src/helpers/assumeType.ts":
/*!***********************************!*\
  !*** ./src/helpers/assumeType.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return assumeType; });
function assumeType(x) {
    return; // ¯\_(ツ)_/¯
}


/***/ }),

/***/ "./src/helpers/blob.ts":
/*!*****************************!*\
  !*** ./src/helpers/blob.ts ***!
  \*****************************/
/*! exports provided: readBlobAs, readBlobAsText, readBlobAsDataURL, readBlobAsArrayBuffer, readBlobAsUint8Array, blobConstruct, blobSafeMimeType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readBlobAs", function() { return readBlobAs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readBlobAsText", function() { return readBlobAsText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readBlobAsDataURL", function() { return readBlobAsDataURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readBlobAsArrayBuffer", function() { return readBlobAsArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readBlobAsUint8Array", function() { return readBlobAsUint8Array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobConstruct", function() { return blobConstruct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobSafeMimeType", function() { return blobSafeMimeType; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
function readBlobAs(blob, method) {
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.addEventListener('loadend', (e) => resolve(e.target.result));
        reader[method](blob);
    });
}
function readBlobAsText(blob) {
    return readBlobAs(blob, 'readAsText');
}
function readBlobAsDataURL(blob) {
    return readBlobAs(blob, 'readAsDataURL');
}
function readBlobAsArrayBuffer(blob) {
    return readBlobAs(blob, 'readAsArrayBuffer');
}
function readBlobAsUint8Array(blob) {
    return readBlobAsArrayBuffer(blob).then(buffer => new Uint8Array(buffer));
}
function blobConstruct(blobParts, mimeType = '') {
    let blob;
    const safeMimeType = blobSafeMimeType(mimeType);
    try {
        blob = new Blob(blobParts, { type: safeMimeType });
    }
    catch (e) {
        // @ts-ignore
        let bb = new BlobBuilder;
        blobParts.forEach((blobPart) => {
            bb.append(blobPart);
        });
        blob = bb.getBlob(safeMimeType);
    }
    return blob;
}
// https://www.iana.org/assignments/media-types/media-types.xhtml
function blobSafeMimeType(mimeType) {
    if ([
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'video/mp4',
        'video/webm',
        'video/quicktime',
        'audio/ogg',
        'audio/mpeg',
        'audio/mp4',
        'application/json',
        'application/pdf'
    ].indexOf(mimeType) === -1) {
        return 'application/octet-stream';
    }
    return mimeType;
}


/***/ }),

/***/ "./src/helpers/bytes.ts":
/*!******************************!*\
  !*** ./src/helpers/bytes.ts ***!
  \******************************/
/*! exports provided: bytesToHex, bytesFromHex, bytesToBase64, uint6ToBase64, bytesCmp, bytesXor, convertToUint8Array, bufferConcats, bytesFromWordss, bytesToWordss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesToHex", function() { return bytesToHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesFromHex", function() { return bytesFromHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesToBase64", function() { return bytesToBase64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint6ToBase64", function() { return uint6ToBase64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesCmp", function() { return bytesCmp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesXor", function() { return bytesXor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToUint8Array", function() { return convertToUint8Array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferConcats", function() { return bufferConcats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesFromWordss", function() { return bytesFromWordss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesToWordss", function() { return bytesToWordss; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
function bytesToHex(bytes) {
    const length = bytes.length;
    const arr = new Array(length);
    for (let i = 0; i < length; ++i) {
        arr[i] = (bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16);
    }
    return arr.join('');
}
function bytesFromHex(hexString) {
    const len = hexString.length;
    const bytes = new Uint8Array(Math.ceil(len / 2));
    let start = 0;
    if (len % 2) { // read 0x581 as 0x0581
        bytes[start++] = parseInt(hexString.charAt(0), 16);
    }
    for (let i = start; i < len; i += 2) {
        bytes[start++] = parseInt(hexString.substr(i, 2), 16);
    }
    return bytes;
}
function bytesToBase64(bytes) {
    let mod3;
    let result = '';
    for (let nLen = bytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; ++nIdx) {
        mod3 = nIdx % 3;
        nUint24 |= bytes[nIdx] << (16 >>> mod3 & 24);
        if (mod3 === 2 || nLen - nIdx === 1) {
            result += String.fromCharCode(uint6ToBase64(nUint24 >>> 18 & 63), uint6ToBase64(nUint24 >>> 12 & 63), uint6ToBase64(nUint24 >>> 6 & 63), uint6ToBase64(nUint24 & 63));
            nUint24 = 0;
        }
    }
    return result.replace(/A(?=A$|$)/g, '=');
}
function uint6ToBase64(nUint6) {
    return nUint6 < 26
        ? nUint6 + 65
        : nUint6 < 52
            ? nUint6 + 71
            : nUint6 < 62
                ? nUint6 - 4
                : nUint6 === 62
                    ? 43
                    : nUint6 === 63
                        ? 47
                        : 65;
}
function bytesCmp(bytes1, bytes2) {
    const len = bytes1.length;
    if (len !== bytes2.length) {
        return false;
    }
    for (let i = 0; i < len; ++i) {
        if (bytes1[i] !== bytes2[i]) {
            return false;
        }
    }
    return true;
}
function bytesXor(bytes1, bytes2) {
    const len = bytes1.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; ++i) {
        bytes[i] = bytes1[i] ^ bytes2[i];
    }
    return bytes;
}
/* export function bytesToArrayBuffer(b: number[]) {
  return (new Uint8Array(b)).buffer;
}

export function convertToArrayBuffer(bytes: any | ArrayBuffer | Uint8Array) {
  // Be careful with converting subarrays!!
  if(bytes instanceof ArrayBuffer) {
    return bytes;
  }
  if(bytes.buffer !== undefined &&
    bytes.buffer.byteLength === bytes.length * bytes.BYTES_PER_ELEMENT) {
    return bytes.buffer;
  }
  return bytesToArrayBuffer(bytes);
} */
function convertToUint8Array(bytes) {
    if (bytes instanceof Uint8Array) {
        return bytes;
    }
    else if (typeof (bytes) === 'string') {
        return new TextEncoder().encode(bytes);
    }
    return new Uint8Array(bytes);
}
/* export function bytesFromArrayBuffer(buffer: ArrayBuffer) {
  const len = buffer.byteLength;
  const byteView = new Uint8Array(buffer);
  const bytes: number[] = [];

  for(let i = 0; i < len; ++i) {
    bytes[i] = byteView[i];
  }

  return bytes;
}

export function bufferConcat(buffer1: any, buffer2: any) {
  const l1 = buffer1.byteLength || buffer1.length;
  const l2 = buffer2.byteLength || buffer2.length;
  const tmp = new Uint8Array(l1 + l2);
  tmp.set(buffer1 instanceof ArrayBuffer ? new Uint8Array(buffer1) : buffer1, 0);
  tmp.set(buffer2 instanceof ArrayBuffer ? new Uint8Array(buffer2) : buffer2, l1);

  return tmp.buffer;
} */
function bufferConcats(...args) {
    const length = args.reduce((acc, v) => acc + (v.byteLength || v.length), 0);
    const tmp = new Uint8Array(length);
    let lastLength = 0;
    args.forEach(b => {
        tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);
        lastLength += b.byteLength || b.length;
    });
    return tmp /* .buffer */;
}
function bytesFromWordss(input) {
    const o = new Uint8Array(input.byteLength);
    for (let i = 0, length = input.length * 4; i < length; ++i) {
        o[i] = ((input[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);
    }
    return o;
}
function bytesToWordss(input) {
    const bytes = convertToUint8Array(input);
    const words = [];
    for (let i = 0, len = bytes.length; i < len; ++i) {
        words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);
    }
    return new Uint32Array(words);
}
// * https://stackoverflow.com/a/52827031
/* export const isBigEndian = (() => {
  const array = new Uint8Array(4);
  const view = new Uint32Array(array.buffer);
  return !((view[0] = 1) & array[0]);
})(); */


/***/ }),

/***/ "./src/helpers/cancellablePromise.ts":
/*!*******************************************!*\
  !*** ./src/helpers/cancellablePromise.ts ***!
  \*******************************************/
/*! exports provided: deferredPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deferredPromise", function() { return deferredPromise; });
/* harmony import */ var _noop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop */ "./src/helpers/noop.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */

function deferredPromise() {
    let deferredHelper = {
        isFulfilled: false,
        isRejected: false,
        notify: () => { },
        notifyAll: (...args) => {
            deferredHelper.lastNotify = args;
            deferredHelper.listeners.forEach((callback) => callback(...args));
        },
        listeners: [],
        addNotifyListener: (callback) => {
            if (deferredHelper.lastNotify) {
                callback(...deferredHelper.lastNotify);
            }
            deferredHelper.listeners.push(callback);
        }
    };
    let deferred = new Promise((resolve, reject) => {
        deferredHelper.resolve = (value) => {
            if (deferred.isFulfilled || deferred.isRejected)
                return;
            deferred.isFulfilled = true;
            resolve(value);
        };
        deferredHelper.reject = (...args) => {
            if (deferred.isRejected || deferred.isFulfilled)
                return;
            deferred.isRejected = true;
            reject(...args);
        };
    });
    // @ts-ignore
    /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {
      const n = deferredPromise<ReturnType<typeof resolve>>();
      
    }; */
    deferred.catch(_noop__WEBPACK_IMPORTED_MODULE_0__["default"]).finally(() => {
        deferred.notify = deferred.notifyAll = deferred.lastNotify = null;
        deferred.listeners.length = 0;
        if (deferred.cancel) {
            deferred.cancel = () => { };
        }
    });
    Object.assign(deferred, deferredHelper);
    return deferred;
}


/***/ }),

/***/ "./src/helpers/context.ts":
/*!********************************!*\
  !*** ./src/helpers/context.ts ***!
  \********************************/
/*! exports provided: isWebWorker, isServiceWorker, isWorker, getWindowClients, notifySomeone, notifyAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWebWorker", function() { return isWebWorker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isServiceWorker", function() { return isServiceWorker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWorker", function() { return isWorker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindowClients", function() { return getWindowClients; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notifySomeone", function() { return notifySomeone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notifyAll", function() { return notifyAll; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;
const isWorker = isWebWorker || isServiceWorker;
// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней
const getWindowClients = () => {
    return self
        .clients
        .matchAll({ includeUncontrolled: false, type: 'window' });
};
const notifyServiceWorker = (all, ...args) => {
    self
        .clients
        .matchAll({ includeUncontrolled: false, type: 'window' })
        .then((listeners) => {
        if (!listeners.length) {
            //console.trace('no listeners?', self, listeners);
            return;
        }
        listeners.slice(all ? 0 : -1).forEach(listener => {
            // @ts-ignore
            listener.postMessage(...args);
        });
    });
};
const notifyWorker = (...args) => {
    // @ts-ignore
    self.postMessage(...args);
};
const noop = () => { };
const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);
const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);


/***/ }),

/***/ "./src/helpers/eventListenerBase.ts":
/*!******************************************!*\
  !*** ./src/helpers/eventListenerBase.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EventListenerBase; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
// class EventSystem {
//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();
//   add(target: any, event: any, listener: any) {
//     let listeners = this.wm.get(target);
//     if (listeners === undefined) {
//         listeners = {};
//     }
//     let listenersForEvent = listeners[event];
//     if (listenersForEvent === undefined) {
//         listenersForEvent = new Set();
//     }
//     listenersForEvent.add(listener);
//     listeners[event] = listenersForEvent;
//     //target.addEventListener(event, listener);
//     this.wm.set(target, listeners);
//   };
//   remove(target: any, event: any, listener: any) {
//     let listeners = this.wm.get(target);
//     if (!listeners) return;
//     let listenersForEvent = listeners[event];
//     if (!listenersForEvent) return;
//     listenersForEvent.delete(listener);
//   };
//   /* fire(target, event) {
//      let listeners = this.wm.get(target);
//      if (!listeners) return;
//      let listenersForEvent = listeners[event];
//      if (!listenersForEvent) return;
//      for (let handler of handlers) {
//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. 
//      }
//   }; */
// }
// console.log = () => {};
// const e = new EventSystem();
// MOUNT_CLASS_TO.e = e;
/**
 * Better not to remove listeners during setting
 * Should add listener callback only once
 */
// type EventLitenerCallback<T> = (data: T) => 
// export default class EventListenerBase<Listeners extends {[name: string]: Function}> {
class EventListenerBase {
    constructor(reuseResults) {
        this._constructor(reuseResults);
    }
    _constructor(reuseResults = false) {
        this.reuseResults = reuseResults;
        this.listeners = {};
        this.listenerResults = {};
    }
    addEventListener(name, callback, options) {
        var _a, _b;
        ((_a = this.listeners[name]) !== null && _a !== void 0 ? _a : (this.listeners[name] = [])).push({ callback, options }); // ! add before because if you don't, you won't be able to delete it from callback
        if (this.listenerResults.hasOwnProperty(name)) {
            callback(...this.listenerResults[name]);
            if ((_b = options) === null || _b === void 0 ? void 0 : _b.once) {
                this.listeners[name].pop();
                return;
            }
        }
        //e.add(this, name, {callback, once});
    }
    addMultipleEventsListeners(obj) {
        for (const i in obj) {
            this.addEventListener(i, obj[i]);
        }
    }
    removeEventListener(name, callback, options) {
        if (this.listeners[name]) {
            this.listeners[name].findAndSplice(l => l.callback === callback);
        }
        //e.remove(this, name, callback);
    }
    // * must be protected, but who cares
    dispatchEvent(name, ...args) {
        if (this.reuseResults) {
            this.listenerResults[name] = args;
        }
        const arr = [];
        /* let a = e.wm.get(this)[name];
        if(!a) return arr;
        const listeners = [...a]; */
        const listeners = this.listeners[name];
        if (listeners) {
            // ! this one will guarantee execution even if delete another listener during setting
            const left = listeners.slice();
            left.forEach((listener) => {
                var _a;
                const index = listeners.findIndex((l) => l.callback === listener.callback);
                if (index === -1) {
                    return;
                }
                arr.push(listener.callback(...args));
                if ((_a = listener.options) === null || _a === void 0 ? void 0 : _a.once) {
                    this.removeEventListener(name, listener.callback);
                }
            });
            /* for(let i = 0, length = listeners.length; i < length; ++i) {
              const listener = listeners[i];
              arr.push(listener.callback(...args));
      
              if(listener.once) {
                listeners.splice(i, 1);
                --i;
                --length;
              }
            } */
        }
        return arr;
    }
    cleanup() {
        this.listeners = {};
        this.listenerResults = {};
    }
}


/***/ }),

/***/ "./src/helpers/fileName.ts":
/*!*********************************!*\
  !*** ./src/helpers/fileName.ts ***!
  \*********************************/
/*! exports provided: getFileNameByLocation, getFileURL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFileNameByLocation", function() { return getFileNameByLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFileURL", function() { return getFileURL; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
const FILENAME_JOINER = '_';
function getFileNameByLocation(location, options) {
    const fileName = ''; //(options?.fileName || '').split('.');
    const ext = fileName[fileName.length - 1] || '';
    let str;
    switch (location._) {
        case 'inputPhotoFileLocation': {
            str = ['photo', fileName[0], location.id, location.thumb_size].filter(Boolean).join(FILENAME_JOINER);
            break;
        }
        case 'inputDocumentFileLocation': {
            str = ['document', fileName[0], location.id, location.thumb_size].filter(Boolean).join(FILENAME_JOINER);
            break;
        }
        case 'inputPeerPhotoFileLocation':
            str = ['peerPhoto', location.photo_id, location.pFlags.big ? 'big' : 'small'].join(FILENAME_JOINER);
            break;
        case 'inputStickerSetThumb': {
            const id = location.stickerset.id ||
                location.stickerset.short_name ||
                location.stickerset.emoticon ||
                location.stickerset._;
            str = ['stickerSetThumb', id, location.thumb_version].join(FILENAME_JOINER);
            break;
        }
        case 'inputFileLocation': {
            str = location.volume_id + '_' + location.local_id;
            break;
        }
        case 'inputWebFileLocation': {
            str = ['webFile', location.url].join(FILENAME_JOINER);
            break;
        }
        default: {
            console.error('Unrecognized location:', location);
            str = '';
            break;
        }
    }
    return str + (ext ? '.' + ext : ext);
}
function getFileURL(type, options) {
    //console.log('getFileURL', location);
    //const perf = performance.now();
    const encoded = encodeURIComponent(JSON.stringify(options));
    //console.log('getFileURL encode:', performance.now() - perf, encoded);
    return '/' + type + '/' + encoded;
}


/***/ }),

/***/ "./src/helpers/noop.ts":
/*!*****************************!*\
  !*** ./src/helpers/noop.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return noop; });
function noop() { }


/***/ }),

/***/ "./src/helpers/object.ts":
/*!*******************************!*\
  !*** ./src/helpers/object.ts ***!
  \*******************************/
/*! exports provided: copy, deepEqual, defineNotNumerableProperties, getObjectKeysAndSort, safeReplaceObject, safeReplaceArrayInObject, isObject, getDeepProperty, setDeepProperty, validateInitObject, safeAssign */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deepEqual", function() { return deepEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defineNotNumerableProperties", function() { return defineNotNumerableProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObjectKeysAndSort", function() { return getObjectKeysAndSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeReplaceObject", function() { return safeReplaceObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeReplaceArrayInObject", function() { return safeReplaceArrayInObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDeepProperty", function() { return getDeepProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDeepProperty", function() { return setDeepProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateInitObject", function() { return validateInitObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeAssign", function() { return safeAssign; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
function copy(obj) {
    //in case of premitives
    if (obj === null || typeof (obj) !== "object") {
        return obj;
    }
    //date objects should be 
    if (obj instanceof Date) {
        return new Date(obj.getTime());
    }
    //handle Array
    if (Array.isArray(obj)) {
        // @ts-ignore
        const clonedArr = obj.map(el => copy(el));
        return clonedArr;
    }
    //lastly, handle objects
    // @ts-ignore
    let clonedObj = new obj.constructor();
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            clonedObj[prop] = copy(obj[prop]);
        }
    }
    return clonedObj;
}
function deepEqual(x, y) {
    const ok = Object.keys, tx = typeof x, ty = typeof y;
    return x && y && tx === 'object' && tx === ty ? (ok(x).length === ok(y).length &&
        ok(x).every(key => deepEqual(x[key], y[key]))) : (x === y);
}
function defineNotNumerableProperties(obj, names) {
    //const perf = performance.now();
    const props = { writable: true, configurable: true };
    const out = {};
    names.forEach(name => {
        if (!obj.hasOwnProperty(name)) {
            out[name] = props;
        }
    });
    Object.defineProperties(obj, out);
    //console.log('defineNotNumerableProperties time:', performance.now() - perf);
}
function getObjectKeysAndSort(object, sort = 'asc') {
    if (!object)
        return [];
    const ids = object instanceof Map ? [...object.keys()] : Object.keys(object).map(i => +i);
    if (sort === 'asc')
        return ids.sort((a, b) => a - b);
    else
        return ids.sort((a, b) => b - a);
}
function safeReplaceObject(wasObject, newObject) {
    if (!wasObject) {
        return newObject;
    }
    for (var key in wasObject) {
        if (!newObject.hasOwnProperty(key)) {
            delete wasObject[key];
        }
    }
    for (var key in newObject) {
        //if (newObject.hasOwnProperty(key)) { // useless
        wasObject[key] = newObject[key];
        //}
    }
    return wasObject;
}
/**
 * Will be used for FILE_REFERENCE_EXPIRED
 * @param key
 * @param wasObject
 * @param newObject
 */
function safeReplaceArrayInObject(key, wasObject, newObject) {
    if ('byteLength' in newObject[key]) { // Uint8Array
        newObject[key] = [...newObject[key]];
    }
    if (wasObject && wasObject[key] !== newObject[key]) {
        wasObject[key].length = newObject[key].length;
        newObject[key].forEach((v, i) => {
            wasObject[key][i] = v;
        });
        /* wasObject[key].set(newObject[key]); */
        newObject[key] = wasObject[key];
    }
}
function isObject(object) {
    return typeof (object) === 'object' && object !== null;
}
function getDeepProperty(object, key) {
    const splitted = key.split('.');
    let o = object;
    splitted.forEach(key => {
        if (!key) {
            return;
        }
        // @ts-ignore
        o = o[key];
    });
    return o;
}
function setDeepProperty(object, key, value) {
    const splitted = key.split('.');
    getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;
}
function validateInitObject(initObject, currentObject, onReplace, previousKey) {
    for (const key in initObject) {
        if (typeof (currentObject[key]) !== typeof (initObject[key])) {
            currentObject[key] = copy(initObject[key]);
            onReplace && onReplace(previousKey || key);
        }
        else if (isObject(initObject[key])) {
            validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);
        }
    }
}
function safeAssign(object, fromObject) {
    if (!fromObject)
        return;
    for (let i in fromObject) {
        if (fromObject[i] !== undefined) {
            object[i] = fromObject[i];
        }
    }
}


/***/ }),

/***/ "./src/helpers/random.ts":
/*!*******************************!*\
  !*** ./src/helpers/random.ts ***!
  \*******************************/
/*! exports provided: nextRandomUint, randomLong */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextRandomUint", function() { return nextRandomUint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomLong", function() { return randomLong; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
const arrays = {
    8: new Uint8Array(1),
    16: new Uint16Array(1),
    32: new Uint32Array(1),
};
function nextRandomUint(bits) {
    const array = arrays[bits];
    crypto.getRandomValues(array);
    return array[0];
}
function randomLong() {
    return '' + nextRandomUint(32) + nextRandomUint(32) % 0xFFFFFF;
}


/***/ }),

/***/ "./src/lib/cacheStorage.ts":
/*!*********************************!*\
  !*** ./src/lib/cacheStorage.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CacheStorageController; });
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_blob__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/blob */ "./src/helpers/blob.ts");
/* harmony import */ var _filemanager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filemanager */ "./src/lib/filemanager.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class CacheStorageController {
    //private log: ReturnType<typeof logger> = logger('CS');
    constructor(dbName) {
        this.dbName = dbName;
        this.useStorage = true;
        if (_config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].test) {
            this.dbName += '_test';
        }
        if (CacheStorageController.STORAGES.length) {
            this.useStorage = CacheStorageController.STORAGES[0].useStorage;
        }
        this.openDatabase();
        CacheStorageController.STORAGES.push(this);
    }
    openDatabase() {
        var _a;
        return (_a = this.openDbPromise) !== null && _a !== void 0 ? _a : (this.openDbPromise = caches.open(this.dbName));
    }
    delete(entryName) {
        return this.timeoutOperation((cache) => cache.delete('/' + entryName));
    }
    deleteAll() {
        return caches.delete(this.dbName);
    }
    get(entryName) {
        return this.timeoutOperation((cache) => cache.match('/' + entryName));
    }
    save(entryName, response) {
        // return new Promise((resolve) => {}); // DEBUG
        return this.timeoutOperation((cache) => cache.put('/' + entryName, response));
    }
    getFile(fileName, method = 'blob') {
        /* if(method === 'blob') {
          return Promise.reject();
        } */
        // const str = `get fileName: ${fileName}`;
        // console.time(str);
        return this.get(fileName).then((response) => {
            if (!response) {
                //console.warn('getFile:', response, fileName);
                throw 'NO_ENTRY_FOUND';
            }
            const promise = response[method]();
            // promise.then(() => {
            //   console.timeEnd(str);
            // });
            return promise;
        });
    }
    saveFile(fileName, blob) {
        //return Promise.resolve(blobConstruct([blob]));
        if (!(blob instanceof Blob)) {
            blob = Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_1__["blobConstruct"])(blob);
        }
        const response = new Response(blob, {
            headers: {
                'Content-Length': '' + blob.size
            }
        });
        return this.save(fileName, response).then(() => blob);
    }
    timeoutOperation(callback) {
        if (!this.useStorage) {
            return Promise.reject('STORAGE_OFFLINE');
        }
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let rejected = false;
            const timeout = setTimeout(() => {
                reject();
                //console.warn('CACHESTORAGE TIMEOUT');
                rejected = true;
            }, 15e3);
            try {
                const cache = yield this.openDatabase();
                if (!cache) {
                    this.useStorage = false;
                    this.openDbPromise = undefined;
                    throw 'no cache?';
                }
                const res = yield callback(cache);
                if (rejected)
                    return;
                resolve(res);
            }
            catch (err) {
                reject(err);
            }
            clearTimeout(timeout);
        }));
    }
    getFileWriter(fileName, mimeType) {
        const fakeWriter = _filemanager__WEBPACK_IMPORTED_MODULE_2__["default"].getFakeFileWriter(mimeType, (blob) => {
            return this.saveFile(fileName, blob).catch(() => blob);
        });
        return Promise.resolve(fakeWriter);
    }
    static toggleStorage(enabled) {
        return Promise.all(this.STORAGES.map(storage => {
            storage.useStorage = enabled;
            if (!enabled) {
                return storage.deleteAll();
            }
        }));
    }
}
CacheStorageController.STORAGES = [];
//const cacheStorage = new CacheStorageController(); 
//MOUNT_CLASS_TO.cacheStorage = cacheStorage;
//export default cacheStorage;


/***/ }),

/***/ "./src/lib/crypto/crypto_methods.ts":
/*!******************************************!*\
  !*** ./src/lib/crypto/crypto_methods.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CryptoWorkerMethods; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
class CryptoWorkerMethods {
    invokeCrypto(method, ...args) {
        return this.performTaskWorker(method, ...args);
    }
}


/***/ }),

/***/ "./src/lib/crypto/crypto_utils.ts":
/*!****************************************!*\
  !*** ./src/lib/crypto/crypto_utils.ts ***!
  \****************************************/
/*! exports provided: longToBytes, sha1HashSync, sha256HashSync, aesEncryptSync, aesDecryptSync, rsaEncrypt, hash_pbkdf2, pqPrimeFactorization, pqPrimeLeemon, bytesModPow, gzipUncompress */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "longToBytes", function() { return longToBytes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sha1HashSync", function() { return sha1HashSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sha256HashSync", function() { return sha256HashSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aesEncryptSync", function() { return aesEncryptSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aesDecryptSync", function() { return aesDecryptSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rsaEncrypt", function() { return rsaEncrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hash_pbkdf2", function() { return hash_pbkdf2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pqPrimeFactorization", function() { return pqPrimeFactorization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pqPrimeLeemon", function() { return pqPrimeLeemon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesModPow", function() { return bytesModPow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzipUncompress", function() { return gzipUncompress; });
/* harmony import */ var _cryptography_aes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cryptography/aes */ "./node_modules/@cryptography/aes/dist/es/aes.js");
/* harmony import */ var pako_dist_pako_inflate_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako/dist/pako_inflate.min.js */ "./node_modules/pako/dist/pako_inflate.min.js");
/* harmony import */ var pako_dist_pako_inflate_min_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pako_dist_pako_inflate_min_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _mtproto_bin_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mtproto/bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _helpers_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers/random */ "./src/helpers/random.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
//import sha1 from '@cryptography/sha1';
//import sha256 from '@cryptography/sha256';

// @ts-ignore

 //from 'leemon';



const subtle = typeof (window) !== 'undefined' && 'crypto' in window ? window.crypto.subtle : self.crypto.subtle;
function longToBytes(sLong) {
    /* let perf = performance.now();
    for(let i = 0; i < 1000000; ++i) {
      bytesFromWords({words: longToInts(sLong), sigBytes: 8}).reverse();
    }
    console.log('longToBytes JSBN', sLong, performance.now() - perf);
    
    //const bytes = bytesFromWords({words: longToInts(sLong), sigBytes: 8}).reverse();
    
    perf = performance.now();
    for(let i = 0; i < 1000000; ++i) {
      bigInt2bytes(str2bigInt(sLong, 10));
    }
    console.log('longToBytes LEEMON', sLong, performance.now() - perf); */
    const bigIntBytes = new Uint8Array(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bigInt2bytes"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(sLong, 10), false));
    const bytes = Object(_mtproto_bin_utils__WEBPACK_IMPORTED_MODULE_3__["addPadding"])(bigIntBytes, 8, true, false, false);
    //console.log('longToBytes', bytes, b);
    return bytes;
}
function sha1HashSync(bytes) {
    return subtle.digest('SHA-1', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["convertToUint8Array"])(bytes)).then(b => {
        return new Uint8Array(b);
    });
    /* //console.trace(dT(), 'SHA-1 hash start', bytes);
  
    const hashBytes: number[] = [];
  
    let hash = sha1(String.fromCharCode.apply(null,
      bytes instanceof Uint8Array ? [...bytes] : [...new Uint8Array(bytes)]));
    for(let i = 0; i < hash.length; ++i) {
      hashBytes.push(hash.charCodeAt(i));
    }
  
    //console.log(dT(), 'SHA-1 hash finish', hashBytes, bytesToHex(hashBytes));
  
    return new Uint8Array(hashBytes); */
}
function sha256HashSync(bytes) {
    return subtle.digest('SHA-256', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["convertToUint8Array"])(bytes)).then(b => {
        //console.log('legacy', performance.now() - perfS);
        return new Uint8Array(b);
    });
    /* //console.log('SHA-256 hash start');
  
    let perfS = performance.now();
    
  
    let perfD = performance.now();
    let words = typeof(bytes) === 'string' ? bytes : bytesToWordss(bytes as any);
    let hash = sha256(words);
    console.log('darutkin', performance.now() - perfD);
  
    //console.log('SHA-256 hash finish', hash, sha256(words, 'hex'));
  
    return bytesFromWordss(hash); */
}
function aesEncryptSync(bytes, keyBytes, ivBytes) {
    //console.log(dT(), 'AES encrypt start', bytes, keyBytes, ivBytes);
    // console.log('aes before padding bytes:', bytesToHex(bytes));
    bytes = Object(_mtproto_bin_utils__WEBPACK_IMPORTED_MODULE_3__["addPadding"])(bytes);
    // console.log('aes after padding bytes:', bytesToHex(bytes));
    const cipher = new _cryptography_aes__WEBPACK_IMPORTED_MODULE_0__["IGE"](Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(keyBytes), Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(ivBytes));
    const encryptedBytes = cipher.encrypt(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(bytes));
    //console.log(dT(), 'AES encrypt finish');
    return Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesFromWordss"])(encryptedBytes);
}
function aesDecryptSync(bytes, keyBytes, ivBytes) {
    //console.log(dT(), 'AES decrypt start', bytes, keyBytes, ivBytes);
    const cipher = new _cryptography_aes__WEBPACK_IMPORTED_MODULE_0__["IGE"](Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(keyBytes), Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(ivBytes));
    const decryptedBytes = cipher.decrypt(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToWordss"])(bytes));
    //console.log(dT(), 'AES decrypt finish');
    return Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesFromWordss"])(decryptedBytes);
}
function rsaEncrypt(bytes, publicKey) {
    //console.log(dT(), 'RSA encrypt start', publicKey, bytes);
    const N = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(publicKey.modulus, 16);
    const E = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(publicKey.exponent, 16);
    const X = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToHex"])(bytes), 16);
    const encryptedBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["powMod"])(X, E, N);
    const encryptedBytes = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bigInt2str"])(encryptedBigInt, 16));
    //console.log(dT(), 'RSA encrypt finish');
    return encryptedBytes;
}
function hash_pbkdf2(buffer, salt, iterations) {
    return __awaiter(this, void 0, void 0, function* () {
        const importKey = yield subtle.importKey('raw', buffer, { name: 'PBKDF2' }, false, [/* 'deriveKey',  */ 'deriveBits']);
        /* await subtle.deriveKey(
          {
            name: 'PBKDF2',
            salt,
            iterations,
            hash: {name: 'SHA-512'}
          },
          importKey,
          {
            name: 'AES-CTR',
            length: 256
          },
          false,
          ['encrypt', 'decrypt']
        ); */
        let bits = subtle.deriveBits({
            name: 'PBKDF2',
            salt,
            iterations,
            hash: { name: 'SHA-512' },
        }, importKey, 512);
        return bits.then(buffer => new Uint8Array(buffer));
    });
}
function pqPrimeFactorization(pqBytes) {
    let result;
    //console.log('PQ start', pqBytes, bytesToHex(pqBytes));
    try {
        //console.time('PQ leemon');
        result = pqPrimeLeemon(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToHex"])(pqBytes), 16, Math.ceil(64 / _vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bpe"]) + 1));
        //console.timeEnd('PQ leemon');
    }
    catch (e) {
        console.error('Pq leemon Exception', e);
    }
    //console.log('PQ finish', result);
    return result;
}
function pqPrimeLeemon(what) {
    var minBits = 64;
    var minLen = Math.ceil(minBits / _vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bpe"]) + 1;
    var it = 0;
    var i, q;
    var j, lim;
    var P;
    var Q;
    var a = new Array(minLen);
    var b = new Array(minLen);
    var c = new Array(minLen);
    var g = new Array(minLen);
    var z = new Array(minLen);
    var x = new Array(minLen);
    var y = new Array(minLen);
    for (i = 0; i < 3; ++i) {
        q = (Object(_helpers_random__WEBPACK_IMPORTED_MODULE_5__["nextRandomUint"])(8) & 15) + 17;
        Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(x, Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["mod"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["int2bigInt"])(Object(_helpers_random__WEBPACK_IMPORTED_MODULE_5__["nextRandomUint"])(32), 32, 0), what));
        Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(y, x);
        lim = 1 << (i + 18);
        for (j = 1; j < lim; ++j) {
            ++it;
            Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(a, x);
            Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(b, x);
            Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copyInt_"])(c, q);
            while (!Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["isZero"])(b)) {
                if (b[0] & 1) {
                    Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["add_"])(c, a);
                    if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["greater"])(c, what)) {
                        Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["sub_"])(c, what);
                    }
                }
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["add_"])(a, a);
                if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["greater"])(a, what)) {
                    Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["sub_"])(a, what);
                }
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["rightShift_"])(b, 1);
            }
            Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(x, c);
            if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["greater"])(x, y)) {
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(z, x);
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["sub_"])(z, y);
            }
            else {
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(z, y);
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["sub_"])(z, x);
            }
            Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["eGCD_"])(z, what, g, a, b);
            if (!Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["equalsInt"])(g, 1)) {
                break;
            }
            if ((j & (j - 1)) === 0) {
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["copy_"])(y, x);
            }
        }
        if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["greater"])(g, _vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["one"])) {
            break;
        }
    }
    Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["divide_"])(what, g, x, y);
    if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["greater"])(g, x)) {
        P = x;
        Q = g;
    }
    else {
        P = g;
        Q = x;
    }
    // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))
    return [new Uint8Array(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bigInt2bytes"])(P)), new Uint8Array(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bigInt2bytes"])(Q)), it];
}
function bytesModPow(x, y, m) {
    try {
        const xBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToHex"])(x), 16);
        const yBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToHex"])(y), 16);
        const mBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesToHex"])(m), 16);
        const resBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["powMod"])(xBigInt, yBigInt, mBigInt);
        return Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_4__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_2__["bigInt2str"])(resBigInt, 16));
    }
    catch (e) {
        console.error('mod pow error', e);
    }
    //return bytesFromBigInt(new BigInteger(x).modPow(new BigInteger(y), new BigInteger(m)), 256);
}
//export function gzipUncompress(bytes: ArrayBuffer, toString: true): string;
//export function gzipUncompress(bytes: ArrayBuffer, toString?: false): Uint8Array;
function gzipUncompress(bytes, toString) {
    //console.log(dT(), 'Gzip uncompress start');
    const result = pako_dist_pako_inflate_min_js__WEBPACK_IMPORTED_MODULE_1___default.a.inflate(bytes, toString ? { to: 'string' } : undefined);
    //console.log(dT(), 'Gzip uncompress finish'/* , result */);
    return result;
}


/***/ }),

/***/ "./src/lib/crypto/cryptoworker.ts":
/*!****************************************!*\
  !*** ./src/lib/crypto/cryptoworker.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _crypto_methods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto_methods */ "./src/lib/crypto/crypto_methods.ts");
/* harmony import */ var _crypto_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto_utils */ "./src/lib/crypto/crypto_utils.ts");
/* harmony import */ var _srp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./srp */ "./src/lib/crypto/srp.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
// import { MOUNT_CLASS_TO } from '../../config/debug';



class CryptoWorker extends _crypto_methods__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super();
        this.webWorker = false;
        this.taskId = 0;
        this.awaiting = {};
        this.pending = [];
        this.debug = false;
        console.log('CW constructor');
        this.utils = {
            'sha1-hash': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["sha1HashSync"],
            'sha256-hash': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["sha256HashSync"],
            'pbkdf2': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["hash_pbkdf2"],
            'aes-encrypt': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["aesEncryptSync"],
            'aes-decrypt': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["aesDecryptSync"],
            'rsa-encrypt': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["rsaEncrypt"],
            'factorize': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["pqPrimeFactorization"],
            'mod-pow': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["bytesModPow"],
            'gzipUncompress': _crypto_utils__WEBPACK_IMPORTED_MODULE_1__["gzipUncompress"],
            'computeSRP': _srp__WEBPACK_IMPORTED_MODULE_2__["computeSRP"]
        };
        // Promise.all([
        //   import('./crypto_utils').then(utils => {
        //     Object.assign(this.utils, {
        //       'sha1-hash': utils.sha1HashSync,
        //       'sha256-hash': utils.sha256HashSync,
        //       'pbkdf2': utils.hash_pbkdf2,
        //       'aes-encrypt': utils.aesEncryptSync,
        //       'aes-decrypt': utils.aesDecryptSync,
        //       'rsa-encrypt': utils.rsaEncrypt,
        //       'factorize': utils.pqPrimeFactorization,
        //       'mod-pow': utils.bytesModPow,
        //       'gzipUncompress': utils.gzipUncompress,
        //     });
        //   }),
        //   import('./srp').then(srp => {
        //     this.utils.computeSRP = srp.computeSRP;
        //   })/* ,
        //   import('../bin_utils').then(utils => {
        //     this.utils.unzip = utils.gzipUncompress;
        //   }) */
        // ]);
        return;
    }
    performTaskWorker(task, ...args) {
        this.debug && console.log('CW start', task, args);
        // @ts-ignore
        return Promise.resolve(this.utils[task](...args));
    }
}
const cryptoWorker = new CryptoWorker();
// MOUNT_CLASS_TO.CryptoWorker = cryptoWorker;
/* harmony default export */ __webpack_exports__["default"] = (cryptoWorker);


/***/ }),

/***/ "./src/lib/crypto/srp.ts":
/*!*******************************!*\
  !*** ./src/lib/crypto/srp.ts ***!
  \*******************************/
/*! exports provided: makePasswordHash, computeSRP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makePasswordHash", function() { return makePasswordHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeSRP", function() { return computeSRP; });
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logger */ "./src/lib/logger.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _mtproto_bin_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mtproto/bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





//import { MOUNT_CLASS_TO } from "../../config/debug";
const log = Object(_logger__WEBPACK_IMPORTED_MODULE_2__["logger"])('SRP', _logger__WEBPACK_IMPORTED_MODULE_2__["LogTypes"].Error);
//MOUNT_CLASS_TO && Object.assign(MOUNT_CLASS_TO, {str2bigInt, bigInt2str, int2bigInt});
function makePasswordHash(password, client_salt, server_salt) {
    return __awaiter(this, void 0, void 0, function* () {
        // ! look into crypto_methods.test.ts
        let buffer = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(client_salt, new TextEncoder().encode(password), client_salt));
        //log('encoded 1', bytesToHex(new Uint8Array(buffer)));
        buffer = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(server_salt, buffer, server_salt);
        buffer = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', buffer);
        //log('encoded 2', buffer, bytesToHex(new Uint8Array(buffer)));
        let hash = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('pbkdf2', new Uint8Array(buffer), client_salt, 100000);
        //log('encoded 3', hash, bytesToHex(new Uint8Array(hash)));
        hash = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(server_salt, hash, server_salt);
        buffer = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', hash);
        //log('got password hash:', buffer, bytesToHex(new Uint8Array(buffer)));
        return buffer;
    });
}
function computeSRP(password, state, isNew) {
    return __awaiter(this, void 0, void 0, function* () {
        const algo = (isNew ? state.new_algo : state.current_algo);
        //console.log('computeSRP:', password, state, isNew, algo);
        const p = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesToHex"])(algo.p), 16);
        const g = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["int2bigInt"])(algo.g, 32, 256);
        //log('p', bigInt2str(p, 16));
        /* if(B.compareTo(BigInteger.ZERO) < 0) {
          console.error('srp_B < 0')
        }
        
        if(B.compareTo(p) <= 0) {
          console.error('srp_B <= p');
        } */
        /* let check_prime_and_good = (bytes: any, g: number) => {
          let good_prime = 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b';
          
          if(bytesToHex(bytes) === good_prime && [3, 4, 5, 7].indexOf(g) !== -1) {
            return true;
          }
          
          // TO-DO check_prime_and_good_check
        }; */
        //check_prime_and_good(algo.p, g);
        const pw_hash = yield makePasswordHash(password, algo.salt1, algo.salt2);
        const x = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesToHex"])(pw_hash), 16);
        //log('computed pw_hash:', pw_hash, x, bytesToHex(new Uint8Array(pw_hash)));
        const padArray = function (arr, len) {
            if (!(arr instanceof Uint8Array)) {
                arr = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["convertToUint8Array"])(arr);
            }
            return Object(_mtproto_bin_utils__WEBPACK_IMPORTED_MODULE_4__["addPadding"])(arr, len, true, true, true);
        };
        const v = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["powMod"])(g, x, p);
        const flipper = (arr) => {
            const out = new Uint8Array(arr.length);
            for (let i = 0; i < arr.length; i += 4) {
                out[i] = arr[i + 3];
                out[i + 1] = arr[i + 2];
                out[i + 2] = arr[i + 1];
                out[i + 3] = arr[i];
            }
            return out;
        };
        // * https://core.telegram.org/api/srp#setting-a-new-2fa-password
        if (isNew) {
            const bytes = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(v, 16));
            return padArray(/* (isBigEndian ? bytes.reverse() : bytes) */ bytes, 256);
        }
        const B = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesToHex"])(state.srp_B), 16);
        //log('B', bigInt2str(B, 16));
        const pForHash = padArray(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(p, 16)), 256);
        const gForHash = padArray(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(g, 16)), 256); // like uint8array
        const b_for_hash = padArray(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(B, 16)), 256);
        /* log(bytesToHex(pForHash));
        log(bytesToHex(gForHash));
        log(bytesToHex(b_for_hash)); */
        //log('g_x', bigInt2str(g_x, 16));
        const kHash = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(pForHash, gForHash));
        const k = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesToHex"])(kHash), 16);
        //log('k', bigInt2str(k, 16));
        // kg_x = (k * g_x) % p
        const k_v = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["mod"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["mult"])(k, v), p);
        // good
        //log('kg_x', bigInt2str(kg_x, 16));
        const is_good_mod_exp_first = (modexp, prime) => {
            const diff = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["sub"])(prime, modexp);
            const min_diff_bits_count = 2048 - 64;
            const max_mod_exp_size = 256;
            if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["negative"])(diff) ||
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bitSize"])(diff) < min_diff_bits_count ||
                Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bitSize"])(modexp) < min_diff_bits_count ||
                Math.floor((Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bitSize"])(modexp) + 7) / 8) > max_mod_exp_size)
                return false;
            return true;
        };
        const generate_and_check_random = () => __awaiter(this, void 0, void 0, function* () {
            while (true) {
                const a = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesToHex"])(flipper(state.secure_random)), 16);
                //const a = str2bigInt('9153faef8f2bb6da91f6e5bc96bc00860a530a572a0f45aac0842b4602d711f8bda8d59fb53705e4ae3e31a3c4f0681955425f224297b8e9efd898fec22046debb7ba8a0bcf2be1ada7b100424ea318fdcef6ccfe6d7ab7d978c0eb76a807d4ab200eb767a22de0d828bc53f42c5a35c2df6e6ceeef9a3487aae8e9ef2271f2f6742e83b8211161fb1a0e037491ab2c2c73ad63c8bd1d739de1b523fe8d461270cedcf240de8da75f31be4933576532955041dc5770c18d3e75d0b357df9da4a5c8726d4fced87d15752400883dc57fa1937ac17608c5446c4774dcd123676d683ce3a1ab9f7e020ca52faafc99969822717c8e07ea383d5fb1a007ba0d170cb', 16);
                //console.log('ITERATION');
                //log('g a p', bigInt2str(g, 16), bigInt2str(a, 16), bigInt2str(p, 16));
                const A = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["powMod"])(g, a, p);
                //log('A MODPOW', bigInt2str(A, 16));
                if (is_good_mod_exp_first(A, p)) {
                    const a_for_hash = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(A, 16));
                    const s = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(a_for_hash, b_for_hash));
                    const u = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(s.hex, 16);
                    if (!Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["isZero"])(u) && !Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["negative"])(u))
                        return { a, a_for_hash, u };
                }
            }
        });
        const { a, a_for_hash, u } = yield generate_and_check_random();
        /* log('a', bigInt2str(a, 16));
        log('a_for_hash', bytesToHex(a_for_hash));
        log('u', bigInt2str(u, 16)); */
        // g_b = (B - kg_x) % p
        /* log('B - kg_x', bigInt2str(sub(B, kg_x), 16));
        log('subtract', bigInt2str(B, 16), bigInt2str(kg_x, 16));
        log('B - kg_x', bigInt2str(sub(B, kg_x), 16)); */
        let g_b;
        if (!Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["greater"])(B, k_v)) {
            //log('negative');
            g_b = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["add"])(B, p);
        }
        else
            g_b = B;
        g_b = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["mod"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["sub"])(g_b, k_v), p);
        /* let g_b = sub(B, kg_x);
        if(negative(g_b)) g_b = add(g_b, p); */
        //log('g_b', bigInt2str(g_b, 16));
        /* if(!is_good_mod_exp_first(g_b, p))
          throw new Error('bad g_b'); */
        const ux = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["mult"])(u, x);
        //log('u and x multiply', bigInt2str(u, 16), bigInt2str(x, 16), bigInt2str(ux, 16));
        const a_ux = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["add"])(a, ux);
        const S = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["powMod"])(g_b, a_ux, p);
        const K = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', padArray(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesFromHex"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(S, 16)), 256));
        //log('K', bytesToHex(K), new Uint32Array(new Uint8Array(K).buffer));
        let h1 = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', pForHash);
        const h2 = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', gForHash);
        h1 = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bytesXor"])(h1, h2);
        const buff = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_3__["bufferConcats"])(h1, yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', algo.salt1), yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', algo.salt2), a_for_hash, b_for_hash, K);
        const M1 = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_0__["default"].invokeCrypto('sha256-hash', buff);
        const out = {
            _: 'inputCheckPasswordSRP',
            srp_id: state.srp_id,
            A: new Uint8Array(a_for_hash),
            M1
        };
        //log('out', bytesToHex(out.A), bytesToHex(out.M1));
        return out;
    });
}


/***/ }),

/***/ "./src/lib/filemanager.ts":
/*!********************************!*\
  !*** ./src/lib/filemanager.ts ***!
  \********************************/
/*! exports provided: FileManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileManager", function() { return FileManager; });
/* harmony import */ var _helpers_blob__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/blob */ "./src/helpers/blob.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class FileManager {
    constructor() {
        this.blobSupported = true;
        try {
            Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_0__["blobConstruct"])([], '');
        }
        catch (e) {
            this.blobSupported = false;
        }
    }
    isAvailable() {
        return this.blobSupported;
    }
    write(fileWriter, bytes) {
        if (bytes instanceof Blob) { // is file bytes
            return Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_0__["readBlobAsUint8Array"])(bytes).then(arr => {
                return fileWriter.write(arr);
            });
        }
        else {
            return fileWriter.write(bytes);
        }
    }
    getFakeFileWriter(mimeType, saveFileCallback) {
        const blobParts = [];
        const fakeFileWriter = {
            write: (part) => __awaiter(this, void 0, void 0, function* () {
                if (!this.blobSupported) {
                    throw false;
                }
                blobParts.push(part);
            }),
            truncate: () => {
                blobParts.length = 0;
            },
            finalize: (saveToStorage = true) => {
                const blob = Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_0__["blobConstruct"])(blobParts, mimeType);
                if (saveToStorage && saveFileCallback) {
                    saveFileCallback(blob);
                }
                return blob;
            }
        };
        return fakeFileWriter;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (new FileManager());


/***/ }),

/***/ "./src/lib/idb.ts":
/*!************************!*\
  !*** ./src/lib/idb.ts ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IDBStorage; });
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_blob__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/blob */ "./src/helpers/blob.ts");
/* harmony import */ var _helpers_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/object */ "./src/helpers/object.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logger */ "./src/lib/logger.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */




const DEBUG = false;
class IDBStorage {
    constructor(db, storeName) {
        this.storageIsAvailable = true;
        Object(_helpers_object__WEBPACK_IMPORTED_MODULE_2__["safeAssign"])(this, db);
        if (_config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].test) {
            this.name += '_test';
        }
        this.storeName = storeName;
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_3__["logger"])('IDB-' + this.storeName);
        this.openDatabase(true);
        IDBStorage.STORAGES.push(this);
    }
    static closeDatabases(preserve) {
        this.STORAGES.forEach(storage => {
            if (preserve && preserve === storage) {
                return;
            }
            const db = storage.db;
            if (db) {
                db.onclose = () => { };
                db.close();
            }
        });
    }
    /**
     * ! WARNING ! function requires at least one opened connection
     */
    /* public static clearObjectStores() {
      const storage = this.STORAGES[0];
      this.closeDatabases(storage);
  
      const names = Array.from(storage.db.objectStoreNames);
      const promises = names.map(name => storage.clear(name));
      return Promise.all(promises);
    } */
    /* public static deleteDatabase() {
      this.closeDatabases();
  
      const storages = this.STORAGES;
      const dbNames = Array.from(new Set(storages.map(storage => storage.name)));
      const promises = dbNames.map(dbName => {
        return new Promise<void>((resolve, reject) => {
          const deleteRequest = indexedDB.deleteDatabase(dbName);
    
          deleteRequest.onerror = () => {
            reject();
          };
    
          deleteRequest.onsuccess = () => {
            resolve();
          };
        });
      });
  
      return Promise.all(promises);
    } */
    isAvailable() {
        return this.storageIsAvailable;
    }
    openDatabase(createNew = false) {
        if (this.openDbPromise && !createNew) {
            return this.openDbPromise;
        }
        const createObjectStore = (db, store) => {
            var _a;
            const os = db.createObjectStore(store.name);
            if ((_a = store.indexes) === null || _a === void 0 ? void 0 : _a.length) {
                for (const index of store.indexes) {
                    os.createIndex(index.indexName, index.keyPath, index.objectParameters);
                }
            }
        };
        try {
            var request = indexedDB.open(this.name, this.version);
            if (!request) {
                return Promise.reject();
            }
        }
        catch (error) {
            this.log.error('error opening db', error.message);
            this.storageIsAvailable = false;
            return Promise.reject(error);
        }
        let finished = false;
        setTimeout(() => {
            if (!finished) {
                request.onerror({ type: 'IDB_CREATE_TIMEOUT' });
            }
        }, 3000);
        return this.openDbPromise = new Promise((resolve, reject) => {
            request.onsuccess = (event) => {
                finished = true;
                const db = request.result;
                let calledNew = false;
                this.log('Opened');
                db.onerror = (error) => {
                    this.storageIsAvailable = false;
                    this.log.error('Error creating/accessing IndexedDB database', error);
                    reject(error);
                };
                db.onclose = (e) => {
                    this.log.error('closed:', e);
                    !calledNew && this.openDatabase();
                };
                db.onabort = (e) => {
                    this.log.error('abort:', e);
                    const transaction = e.target;
                    this.openDatabase(calledNew = true);
                    if (transaction.onerror) {
                        transaction.onerror(e);
                    }
                    db.close();
                };
                db.onversionchange = (e) => {
                    this.log.error('onversionchange, lol?');
                };
                resolve(this.db = db);
            };
            request.onerror = (event) => {
                finished = true;
                this.storageIsAvailable = false;
                this.log.error('Error creating/accessing IndexedDB database', event);
                reject(event);
            };
            request.onupgradeneeded = (event) => {
                finished = true;
                this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);
                // @ts-ignore
                var db = event.target.result;
                this.stores.forEach((store) => {
                    /* if(db.objectStoreNames.contains(store.name)) {
                      //if(event.oldVersion === 1) {
                        db.deleteObjectStore(store.name);
                      //}
                    } */
                    if (!db.objectStoreNames.contains(store.name)) {
                        createObjectStore(db, store);
                    }
                });
            };
        });
    }
    delete(entryName) {
        //return Promise.resolve();
        if (!Array.isArray(entryName)) {
            entryName = [].concat(entryName);
        }
        return this.getObjectStore('readwrite', (objectStore) => {
            return entryName.map((entryName) => objectStore.delete(entryName));
        }, DEBUG ? 'delete: ' + entryName.join(', ') : '');
    }
    clear(storeName) {
        return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);
    }
    save(entryName, value) {
        // const handleError = (error: Error) => {
        //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);
        //   if((!error || error.name === 'InvalidStateError')/*  && false */) {
        //     setTimeout(() => {
        //       this.save(entryName, value);
        //     }, 2e3);
        //   } else {
        //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);
        //   }
        // };
        if (!Array.isArray(entryName)) {
            entryName = [].concat(entryName);
            value = [].concat(value);
        }
        return this.getObjectStore('readwrite', (objectStore) => {
            return entryName.map((entryName, idx) => objectStore.put(value[idx], entryName));
        }, DEBUG ? 'save: ' + entryName.join(', ') : '');
    }
    saveFile(fileName, blob) {
        //return Promise.resolve(blobConstruct([blob]));
        if (!(blob instanceof Blob)) {
            blob = Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_1__["blobConstruct"])([blob]);
        }
        return this.save(fileName, blob);
    }
    get(entryName) {
        //return Promise.reject();
        if (!Array.isArray(entryName)) {
            entryName = [].concat(entryName);
        }
        return this.getObjectStore('readonly', (objectStore) => {
            return entryName.map((entryName) => objectStore.get(entryName));
        }, DEBUG ? 'get: ' + entryName.join(', ') : '');
    }
    getObjectStore(mode, objectStore, log, storeName = this.storeName) {
        let perf;
        if (log) {
            perf = performance.now();
            this.log(log + ': start');
        }
        return this.openDatabase().then((db) => {
            return new Promise((resolve, reject) => {
                /* if(mode === 'readwrite') {
                  return;
                } */
                const transaction = db.transaction([storeName], mode);
                transaction.onerror = (e) => {
                    clearTimeout(timeout);
                    reject(transaction.error);
                };
                transaction.oncomplete = (e) => {
                    clearTimeout(timeout);
                    if (log) {
                        this.log(log + ': end', performance.now() - perf);
                    }
                    const results = r.map(r => r.result);
                    resolve(isArray ? results : results[0]);
                };
                const timeout = setTimeout(() => {
                    this.log.error('transaction not finished', transaction);
                }, 10000);
                /* transaction.addEventListener('abort', (e) => {
                  //handleError();
                  this.log.error('IndexedDB: transaction abort!', transaction.error);
                }); */
                const requests = objectStore(transaction.objectStore(storeName));
                const isArray = Array.isArray(requests);
                const r = isArray ? requests : [].concat(requests);
                // const length = r.length;
                // /* let left = length;
                // const onRequestFinished = (error?: Error) => {
                //   if(!--left) {
                //     resolve(result);
                //     clearTimeout(timeout);
                //   }
                // }; */
                // for(let i = 0; i < length; ++i) {
                //   const request = r[i];
                //   request.onsuccess = () => {
                //     onRequestFinished();
                //   };
                //   request.onerror = (e) => {
                //     onRequestFinished(transaction.error);
                //   };
                // }
            });
        });
    }
    getAll() {
        return this.getObjectStore('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');
    }
}
IDBStorage.STORAGES = [];


/***/ }),

/***/ "./src/lib/localStorage.ts":
/*!*********************************!*\
  !*** ./src/lib/localStorage.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LocalStorageController; });
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/context */ "./src/helpers/context.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */


//import { stringify } from '../helpers/json';
class LocalStorage {
    constructor( /* private preserveKeys: (keyof Storage)[] */) {
        this.prefix = '';
        this.cache = {};
        this.useStorage = true;
        if (_config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].test) {
            this.prefix = 't_';
        }
    }
    get(key, useCache = true) {
        if (this.cache.hasOwnProperty(key) && useCache) {
            return this.cache[key];
        }
        else if (this.useStorage) {
            let value;
            try {
                value = localStorage.getItem(this.prefix + key);
            }
            catch (err) {
                this.useStorage = false;
            }
            if (value !== null) {
                try {
                    value = JSON.parse(value);
                }
                catch (err) {
                    //console.error(err);
                }
            }
            else {
                value = undefined;
            }
            return value;
        } /*  else {
          throw 'something went wrong';
        } */
    }
    set(obj, onlyLocal = false) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const value = obj[key];
                this.cache[key] = value;
                if (this.useStorage && !onlyLocal) {
                    try {
                        const stringified = JSON.stringify(value);
                        localStorage.setItem(this.prefix + key, stringified);
                    }
                    catch (err) {
                        this.useStorage = false;
                    }
                }
            }
        }
    }
    delete(key, saveLocal = false) {
        // ! it is needed here
        key = '' + key;
        if (!saveLocal) {
            delete this.cache[key];
        }
        //if(this.useStorage) {
        try {
            localStorage.removeItem(this.prefix + key);
        }
        catch (err) {
        }
        //}
    }
    /* public clear(preserveKeys: (keyof Storage)[] = this.preserveKeys) {
      // if(this.useStorage) {
        try {
          let obj: Partial<Storage> = {};
          if(preserveKeys) {
            preserveKeys.forEach(key => {
              const value = this.get(key);
              if(value !== undefined) {
                obj[key] = value;
              }
            });
          }
          
          localStorage.clear();
  
          if(preserveKeys) {
            this.set(obj);
          }
        } catch(err) {
  
        }
      // }
    } */
    clear() {
        const keys = ['dc', 'server_time_offset', 'xt_instance', 'user_auth', 'state_id'];
        for (let i = 1; i <= 5; ++i) {
            keys.push(`dc${i}_server_salt`);
            keys.push(`dc${i}_auth_key`);
        }
        for (let key of keys) {
            this.delete(key, true);
        }
    }
    toggleStorage(enabled) {
        this.useStorage = enabled;
        if (!enabled) {
            this.clear();
        }
        else {
            return this.set(this.cache);
        }
    }
}
;
;
class LocalStorageController {
    constructor( /* private preserveKeys: (keyof Storage)[] = [] */) {
        this.taskId = 0;
        this.tasks = {};
        LocalStorageController.STORAGES.push(this);
        if (!_helpers_context__WEBPACK_IMPORTED_MODULE_1__["isWorker"]) {
            this.storage = new LocalStorage( /* preserveKeys */);
        }
    }
    finishTask(taskId, result) {
        //this.log('finishTask:', taskID, result, Object.keys(this.tasks));
        if (!this.tasks.hasOwnProperty(taskId)) {
            //this.log('no such task:', taskID, result);
            return;
        }
        this.tasks[taskId](result);
        delete this.tasks[taskId];
    }
    proxy(type, ...args) {
        return new Promise((resolve, reject) => {
            if (_helpers_context__WEBPACK_IMPORTED_MODULE_1__["isWorker"]) {
                const taskId = this.taskId++;
                this.tasks[taskId] = resolve;
                const task = {
                    type: 'localStorageProxy',
                    id: taskId,
                    payload: {
                        type,
                        args
                    }
                };
                Object(_helpers_context__WEBPACK_IMPORTED_MODULE_1__["notifySomeone"])(task);
            }
            else {
                args = Array.prototype.slice.call(args);
                // @ts-ignore
                const result = this.storage[type].apply(this.storage, args);
                resolve(result);
            }
        });
    }
    get(key, useCache) {
        return this.proxy('get', key, useCache);
    }
    set(obj, onlyLocal) {
        return this.proxy('set', obj, onlyLocal);
    }
    delete(key, saveLocal) {
        return this.proxy('delete', key, saveLocal);
    }
    clear( /* preserveKeys?: (keyof Storage)[] */) {
        return this.proxy('clear' /* , preserveKeys */);
    }
    toggleStorage(enabled) {
        return this.proxy('toggleStorage', enabled);
    }
}
LocalStorageController.STORAGES = [];


/***/ }),

/***/ "./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/*! exports provided: LogTypes, LOG_LEVELS, logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogTypes", function() { return LogTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOG_LEVELS", function() { return LOG_LEVELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/debug */ "./src/config/debug.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */

var LogTypes;
(function (LogTypes) {
    LogTypes[LogTypes["None"] = 0] = "None";
    LogTypes[LogTypes["Error"] = 1] = "Error";
    LogTypes[LogTypes["Warn"] = 2] = "Warn";
    LogTypes[LogTypes["Log"] = 4] = "Log";
    LogTypes[LogTypes["Debug"] = 8] = "Debug";
})(LogTypes || (LogTypes = {}));
;
const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];
const _logTimer = Date.now();
function dT() {
    return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';
}
function logger(prefix, type = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false) {
    if (!_config_debug__WEBPACK_IMPORTED_MODULE_0__["default"] && !ignoreDebugReset /*  || true */) {
        type = LogTypes.Error;
    }
    //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug
    function Log(...args) {
        return type & LogTypes.Log && console.log(dT(), prefix, ...args);
    }
    Log.warn = function (...args) {
        return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);
    };
    Log.info = function (...args) {
        return type & LogTypes.Log && console.info(dT(), prefix, ...args);
    };
    Log.error = function (...args) {
        return type & LogTypes.Error && console.error(dT(), prefix, ...args);
    };
    Log.trace = function (...args) {
        return type & LogTypes.Log && console.trace(dT(), prefix, ...args);
    };
    /* Log.debug = function(...args: any[]) {
      return level & LogLevels.debug && console.log(dT(), prefix, ...args);
    }; */
    Log.debug = function (...args) {
        return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);
    };
    Log.setPrefix = function (_prefix) {
        prefix = '[' + _prefix + ']:';
    };
    Log.setPrefix(prefix);
    Log.setLevel = function (level) {
        type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0);
    };
    return Log;
}
;


/***/ }),

/***/ "./src/lib/mtproto/apiFileManager.ts":
/*!*******************************************!*\
  !*** ./src/lib/mtproto/apiFileManager.ts ***!
  \*******************************************/
/*! exports provided: ApiFileManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiFileManager", function() { return ApiFileManager; });
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_blob__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/blob */ "./src/helpers/blob.ts");
/* harmony import */ var _helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/cancellablePromise */ "./src/helpers/cancellablePromise.ts");
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/context */ "./src/helpers/context.ts");
/* harmony import */ var _helpers_fileName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers/fileName */ "./src/helpers/fileName.ts");
/* harmony import */ var _helpers_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers/random */ "./src/helpers/random.ts");
/* harmony import */ var _cacheStorage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cacheStorage */ "./src/lib/cacheStorage.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _filemanager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../filemanager */ "./src/lib/filemanager.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../logger */ "./src/lib/logger.ts");
/* harmony import */ var _apiManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./apiManager */ "./src/lib/mtproto/apiManager.ts");
/* harmony import */ var _mtproto_worker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mtproto.worker */ "./node_modules/ts-loader/index.js!./node_modules/ifdef-loader/ifdef-loader.js?!./src/lib/mtproto/mtproto.worker.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _helpers_assumeType__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../helpers/assumeType */ "./src/helpers/assumeType.ts");
/* harmony import */ var _environment_ctx__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../environment/ctx */ "./src/environment/ctx.ts");
/* harmony import */ var _helpers_noop__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../helpers/noop */ "./src/helpers/noop.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

















;
;
const MAX_FILE_SAVE_SIZE = 20e6;
class ApiFileManager {
    constructor() {
        this.cacheStorage = new _cacheStorage__WEBPACK_IMPORTED_MODULE_7__["default"]('cachedFiles');
        this.cachedDownloadPromises = {};
        this.uploadPromises = {};
        this.downloadPulls = {};
        this.downloadActives = {};
        this.webpConvertPromises = {};
        this.refreshReferencePromises = {};
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_10__["logger"])('AFM', _logger__WEBPACK_IMPORTED_MODULE_10__["LogTypes"].Error | _logger__WEBPACK_IMPORTED_MODULE_10__["LogTypes"].Log);
        this.tempId = 0;
        this.queueId = 0;
        this.debug = _config_modes__WEBPACK_IMPORTED_MODULE_1__["default"].debug;
        this.uncompressTGS = (bytes, fileName) => {
            //this.log('uncompressTGS', bytes, bytes.slice().buffer);
            // slice нужен потому что в uint8array - 5053 length, в arraybuffer - 5084
            return _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_8__["default"].invokeCrypto('gzipUncompress', bytes.slice().buffer, true);
        };
        this.convertWebp = (bytes, fileName) => {
            const convertPromise = Object(_helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_3__["deferredPromise"])();
            const task = { type: 'convertWebp', payload: { fileName, bytes } };
            Object(_helpers_context__WEBPACK_IMPORTED_MODULE_4__["notifySomeone"])(task);
            return this.webpConvertPromises[fileName] = convertPromise;
        };
        setInterval(() => {
            for (const hex in this.refreshReferencePromises) {
                const { deferred } = this.refreshReferencePromises[hex];
                if (deferred.isFulfilled || deferred.isRejected) {
                    delete this.refreshReferencePromises[hex];
                }
            }
        }, 1800e3);
    }
    downloadRequest(dcId, id, cb, activeDelta, queueId = 0) {
        if (this.downloadPulls[dcId] === undefined) {
            this.downloadPulls[dcId] = [];
            this.downloadActives[dcId] = 0;
        }
        const downloadPull = this.downloadPulls[dcId];
        const promise = new Promise((resolve, reject) => {
            downloadPull.push({ id, queueId, cb, deferred: { resolve, reject }, activeDelta });
        });
        setTimeout(() => {
            this.downloadCheck(dcId);
        }, 0);
        return promise;
    }
    downloadCheck(dcId) {
        const downloadPull = this.downloadPulls[dcId];
        const downloadLimit = dcId === 'upload' ? 24 : 36;
        //const downloadLimit = Infinity;
        if (this.downloadActives[dcId] >= downloadLimit || !downloadPull || !downloadPull.length) {
            return false;
        }
        //const data = downloadPull.shift();
        const data = downloadPull.findAndSplice(d => d.queueId === 0) || downloadPull.findAndSplice(d => d.queueId === this.queueId) || downloadPull.shift();
        const activeDelta = data.activeDelta || 1;
        this.downloadActives[dcId] += activeDelta;
        data.cb()
            .then((result) => {
            this.downloadActives[dcId] -= activeDelta;
            this.downloadCheck(dcId);
            data.deferred.resolve(result);
        }, (error) => {
            // @ts-ignore
            if (!error || !error.type || (error.type !== 'DOWNLOAD_CANCELED' && error.type !== 'UPLOAD_CANCELED')) {
                this.log.error('downloadCheck error:', error);
            }
            this.downloadActives[dcId] -= activeDelta;
            this.downloadCheck(dcId);
            data.deferred.reject(error);
        });
    }
    setQueueId(queueId) {
        //this.log.error('setQueueId', queueId);
        this.queueId = queueId;
    }
    getFileStorage() {
        return this.cacheStorage;
    }
    cancelDownload(fileName) {
        const promises = (this.cachedDownloadPromises[fileName] ? [this.cachedDownloadPromises[fileName]] : undefined) ||
            (this.uploadPromises[fileName] ? Array.from(this.uploadPromises[fileName]) : []);
        let canceled = false;
        for (let i = 0, length = promises.length; i < length; ++i) {
            const promise = promises[i];
            if (promise && !promise.isRejected && !promise.isFulfilled) {
                promise.cancel();
                canceled = true;
            }
        }
        return canceled;
    }
    requestWebFilePart(dcId, location, offset, limit, id = 0, queueId = 0, checkCancel) {
        return this.downloadRequest(dcId, id, () => __awaiter(this, void 0, void 0, function* () {
            checkCancel && checkCancel();
            return _apiManager__WEBPACK_IMPORTED_MODULE_11__["default"].invokeApi('upload.getWebFile', {
                location,
                offset,
                limit
            }, {
                dcId,
                fileDownload: true
            });
        }), this.getDelta(limit), queueId);
    }
    requestFilePart(dcId, location, offset, limit, id = 0, queueId = 0, checkCancel) {
        return this.downloadRequest(dcId, id, () => __awaiter(this, void 0, void 0, function* () {
            checkCancel && checkCancel();
            const invoke = () => __awaiter(this, void 0, void 0, function* () {
                checkCancel && checkCancel(); // do not remove async, because checkCancel will throw an error
                const promise = _apiManager__WEBPACK_IMPORTED_MODULE_11__["default"].invokeApi('upload.getFile', {
                    location,
                    offset,
                    limit
                }, {
                    dcId,
                    fileDownload: true
                });
                return promise.catch((err) => {
                    if (err.type === 'FILE_REFERENCE_EXPIRED') {
                        return this.refreshReference(location).then(invoke);
                    }
                    throw err;
                });
            });
            Object(_helpers_assumeType__WEBPACK_IMPORTED_MODULE_14__["default"])(location);
            const reference = location.file_reference;
            if (reference && !location.checkedReference) { // check stream's location because it's new every call
                location.checkedReference = true;
                const hex = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_13__["bytesToHex"])(reference);
                if (this.refreshReferencePromises[hex]) {
                    return this.refreshReference(location).then(invoke);
                }
            }
            return invoke();
        }), this.getDelta(limit), queueId);
    }
    /* private convertBlobToBytes(blob: Blob) {
      return blob.arrayBuffer().then(buffer => new Uint8Array(buffer));
    } */
    getDelta(bytes) {
        return bytes / 1024 / 128;
    }
    getLimitPart(size) {
        let bytes;
        bytes = 512;
        /* if(size < 1e6 || !size) bytes = 512;
        else if(size < 3e6) bytes = 256;
        else bytes = 128; */
        return bytes * 1024;
    }
    refreshReference(inputFileLocation) {
        const reference = inputFileLocation.file_reference;
        const hex = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_13__["bytesToHex"])(reference);
        let r = this.refreshReferencePromises[hex];
        if (!r) {
            const deferred = Object(_helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_3__["deferredPromise"])();
            r = this.refreshReferencePromises[hex] = {
                deferred,
                timeout: _environment_ctx__WEBPACK_IMPORTED_MODULE_15__["default"].setTimeout(() => {
                    this.log.error('Didn\'t refresh the reference:', inputFileLocation);
                    deferred.reject('REFERENCE_IS_NOT_REFRESHED');
                }, 60000)
            };
            deferred.catch(_helpers_noop__WEBPACK_IMPORTED_MODULE_16__["default"]).finally(() => {
                clearTimeout(r.timeout);
            });
            const task = { type: 'refreshReference', payload: reference };
            Object(_helpers_context__WEBPACK_IMPORTED_MODULE_4__["notifySomeone"])(task);
        }
        // have to replace file_reference in any way, because location can be different everytime if it's stream
        return r.deferred.then(reference => {
            if (hex === Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_13__["bytesToHex"])(reference)) {
                throw 'REFERENCE_IS_NOT_REFRESHED';
            }
            inputFileLocation.file_reference = reference;
        });
    }
    downloadFile(options) {
        var _a;
        if (!_filemanager__WEBPACK_IMPORTED_MODULE_9__["default"].isAvailable()) {
            return Promise.reject({ type: 'BROWSER_BLOB_NOT_SUPPORTED' });
        }
        const size = (_a = options.size) !== null && _a !== void 0 ? _a : 0;
        const { dcId, location } = options;
        let process;
        if (options.mimeType === 'image/webp' && !Object(_mtproto_worker__WEBPACK_IMPORTED_MODULE_12__["isWebpSupported"])()) {
            process = this.convertWebp;
            options.mimeType = 'image/png';
        }
        else if (options.mimeType === 'application/x-tgsticker') {
            process = this.uncompressTGS;
            options.mimeType = 'application/json';
        }
        const fileName = Object(_helpers_fileName__WEBPACK_IMPORTED_MODULE_5__["getFileNameByLocation"])(location, { fileName: options.fileName });
        const cachedPromise = this.cachedDownloadPromises[fileName];
        const fileStorage = this.getFileStorage();
        this.debug && this.log('downloadFile', fileName, size, location, options.mimeType);
        /* if(options.queueId) {
          this.log.error('downloadFile queueId:', fileName, options.queueId);
        } */
        if (cachedPromise) {
            //this.log('downloadFile cachedPromise');
            if (size) {
                return cachedPromise.then((blob) => {
                    if (blob.size < size) {
                        this.debug && this.log('downloadFile need to deleteFile, wrong size:', blob.size, size);
                        return this.deleteFile(fileName).then(() => {
                            return this.downloadFile(options);
                        }).catch(() => {
                            return this.downloadFile(options);
                        });
                    }
                    else {
                        return blob;
                    }
                });
            }
            else {
                return cachedPromise;
            }
        }
        const deferred = Object(_helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_3__["deferredPromise"])();
        const mimeType = options.mimeType || 'image/jpeg';
        let error;
        let resolved = false;
        let cacheFileWriter;
        let errorHandler = (_error) => {
            error = _error;
            delete this.cachedDownloadPromises[fileName];
            deferred.reject(error);
            errorHandler = () => { };
            if (cacheFileWriter && (!error || error.type !== 'DOWNLOAD_CANCELED')) {
                cacheFileWriter.truncate();
            }
        };
        const id = this.tempId++;
        fileStorage.getFile(fileName).then((blob) => __awaiter(this, void 0, void 0, function* () {
            //this.log('maybe cached', fileName);
            //throw '';
            if (blob.size < size) {
                //this.log('downloadFile need to deleteFile 2, wrong size:', blob.size, size);
                yield this.deleteFile(fileName);
                throw false;
            }
            deferred.resolve(blob);
        })).catch(() => {
            //this.log('not cached', fileName);
            const fileWriterPromise = fileStorage.getFileWriter(fileName, mimeType);
            fileWriterPromise.then((fileWriter) => {
                cacheFileWriter = fileWriter;
                const limit = options.limitPart || this.getLimitPart(size);
                let offset;
                let startOffset = 0;
                let writeFilePromise = Promise.resolve(), writeFileDeferred;
                //const maxRequests = 13107200 / limit; // * 100 Mb speed
                const maxRequests = Infinity;
                //console.error('maxRequests', maxRequests);
                const processDownloaded = (bytes, offset) => __awaiter(this, void 0, void 0, function* () {
                    if (process) {
                        //const perf = performance.now();
                        const processed = yield process(bytes, fileName);
                        //this.log('downloadFile process downloaded time', performance.now() - perf, mimeType, process);
                        return processed;
                    }
                    return bytes;
                });
                const r = location._ === 'inputWebFileLocation' ? this.requestWebFilePart.bind(this) : this.requestFilePart.bind(this);
                const delayed = [];
                offset = startOffset;
                do {
                    ////this.log('offset:', startOffset);
                    writeFileDeferred = Object(_helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_3__["deferredPromise"])();
                    delayed.push({ offset, writeFilePromise, writeFileDeferred });
                    writeFilePromise = writeFileDeferred;
                    offset += limit;
                } while (offset < size);
                let done = 0;
                const superpuper = () => __awaiter(this, void 0, void 0, function* () {
                    //if(!delayed.length) return;
                    const { offset, writeFilePromise, writeFileDeferred } = delayed.shift();
                    try {
                        checkCancel();
                        // @ts-ignore
                        const result = yield r(dcId, location, offset, limit, id, options.queueId, checkCancel);
                        const bytes = result.bytes;
                        if (delayed.length) {
                            superpuper();
                        }
                        this.debug && this.log('downloadFile requestFilePart result:', fileName, result);
                        const isFinal = offset + limit >= size || !bytes.byteLength;
                        if (bytes.byteLength) {
                            //done += limit;
                            done += bytes.byteLength;
                            //if(!isFinal) {
                            ////this.log('deferred notify 2:', {done: offset + limit, total: size}, deferred);
                            deferred.notify({ done, offset, total: size });
                            //}
                            const processedResult = yield processDownloaded(bytes, offset);
                            checkCancel();
                            yield writeFilePromise;
                            checkCancel();
                            yield _filemanager__WEBPACK_IMPORTED_MODULE_9__["default"].write(fileWriter, processedResult);
                        }
                        writeFileDeferred.resolve();
                        if (isFinal) {
                            resolved = true;
                            deferred.resolve(fileWriter.finalize(size < MAX_FILE_SAVE_SIZE));
                        }
                    }
                    catch (err) {
                        errorHandler(err);
                    }
                });
                for (let i = 0, length = Math.min(maxRequests, delayed.length); i < length; ++i) {
                    superpuper();
                }
            }).catch((err) => {
                if (!['STORAGE_OFFLINE'].includes(err)) {
                    this.log.error('saveFile error:', err);
                }
            });
        });
        const checkCancel = () => {
            if (error) {
                throw error;
            }
        };
        deferred.cancel = () => {
            if (!error && !resolved) {
                const error = new Error('Canceled');
                error.type = 'DOWNLOAD_CANCELED';
                errorHandler(error);
            }
        };
        deferred.notify = (progress) => {
            Object(_helpers_context__WEBPACK_IMPORTED_MODULE_4__["notifyAll"])({ progress: Object.assign({ fileName }, progress) });
        };
        this.cachedDownloadPromises[fileName] = deferred;
        deferred.safeFinally(() => {
            delete this.cachedDownloadPromises[fileName];
        });
        return deferred;
    }
    deleteFile(fileName) {
        //this.log('will delete file:', fileName);
        delete this.cachedDownloadPromises[fileName];
        return this.getFileStorage().delete(fileName);
    }
    uploadFile({ file, fileName }) {
        var _a;
        const fileSize = file.size, isBigFile = fileSize >= 10485760;
        let canceled = false, resolved = false, doneParts = 0, partSize = 262144; // 256 Kb
        /* if(fileSize > (524288 * 3000)) {
          partSize = 1024 * 1024;
          activeDelta = 8;
        } else  */ if (fileSize > 67108864) {
            partSize = 524288;
        }
        else if (fileSize < 102400) {
            partSize = 32768;
        }
        const activeDelta = this.getDelta(partSize);
        const totalParts = Math.ceil(fileSize / partSize);
        const fileId = Object(_helpers_random__WEBPACK_IMPORTED_MODULE_6__["randomLong"])();
        let _part = 0;
        const resultInputFile = {
            _: isBigFile ? 'inputFileBig' : 'inputFile',
            id: fileId,
            parts: totalParts,
            name: fileName,
            md5_checksum: ''
        };
        const deferredHelper = {
            notify: (details) => { }
        };
        const deferred = new Promise((resolve, reject) => {
            if (totalParts > 4000) {
                return reject({ type: 'FILE_TOO_BIG' });
            }
            deferredHelper.resolve = resolve;
            deferredHelper.reject = reject;
        });
        Object.assign(deferred, deferredHelper);
        if (totalParts > 4000) {
            return deferred;
        }
        let errorHandler = (error) => {
            if ((error === null || error === void 0 ? void 0 : error.type) !== 'UPLOAD_CANCELED') {
                this.log.error('Up Error', error);
            }
            deferred.reject(error);
            canceled = true;
            errorHandler = () => { };
        };
        const method = isBigFile ? 'upload.saveBigFilePart' : 'upload.saveFilePart';
        const id = this.tempId++;
        /* setInterval(() => {
          console.log(file);
        }, 1e3); */
        const self = this;
        function* generator() {
            for (let offset = 0; offset < fileSize; offset += partSize) {
                const part = _part++; // 0, 1
                yield self.downloadRequest('upload', id, () => {
                    const blob = file.slice(offset, offset + partSize);
                    return Object(_helpers_blob__WEBPACK_IMPORTED_MODULE_2__["readBlobAsArrayBuffer"])(blob).then(buffer => {
                        if (canceled) {
                            throw { type: 'UPLOAD_CANCELED' };
                        }
                        self.debug && self.log('Upload file part, isBig:', isBigFile, part, buffer.byteLength, new Uint8Array(buffer).length, new Uint8Array(buffer).slice().length);
                        /* const u = new Uint8Array(buffer.byteLength);
                        for(let i = 0; i < u.length; ++i) {
                          //u[i] = Math.random() * 255 | 0;
                          u[i] = 0;
                        }
                        buffer = u.buffer; */
                        /* setTimeout(() => {
                          doneParts++;
                          uploadResolve();
              
                          //////this.log('Progress', doneParts * partSize / fileSize);
            
                          self.log('done part', part, doneParts);
              
                          deferred.notify({done: doneParts * partSize, total: fileSize});
              
                          if(doneParts >= totalParts) {
                            deferred.resolve(resultInputFile);
                            resolved = true;
                          }
                        }, 1250);
                        return; */
                        return _apiManager__WEBPACK_IMPORTED_MODULE_11__["default"].invokeApi(method, {
                            file_id: fileId,
                            file_part: part,
                            file_total_parts: totalParts,
                            bytes: buffer /* new Uint8Array(buffer) */
                        }, {
                            //startMaxLength: partSize + 256,
                            fileUpload: true
                        }).then((result) => {
                            doneParts++;
                            //////this.log('Progress', doneParts * partSize / fileSize);
                            deferred.notify({ done: doneParts * partSize, total: fileSize });
                            if (doneParts >= totalParts) {
                                deferred.resolve(resultInputFile);
                                resolved = true;
                            }
                        }, errorHandler);
                    });
                }, activeDelta).catch(errorHandler);
            }
        }
        const it = generator();
        const process = () => {
            if (canceled)
                return;
            const r = it.next();
            if (r.done || canceled)
                return;
            r.value.then(process);
        };
        const maxRequests = Infinity;
        //const maxRequests = 10;
        /* for(let i = 0; i < 10; ++i) {
          process();
        } */
        for (let i = 0, length = Math.min(maxRequests, totalParts); i < length; ++i) {
            process();
        }
        deferred.cancel = () => {
            //this.log('cancel upload', canceled, resolved);
            if (!canceled && !resolved) {
                canceled = true;
                errorHandler({ type: 'UPLOAD_CANCELED' });
            }
        };
        deferred.notify = (progress) => {
            Object(_helpers_context__WEBPACK_IMPORTED_MODULE_4__["notifyAll"])({ progress: Object.assign({ fileName }, progress) });
        };
        deferred.finally(() => {
            set.delete(deferred);
            if (!set.size) {
                delete this.uploadPromises[fileName];
            }
        });
        const set = (_a = this.uploadPromises[fileName]) !== null && _a !== void 0 ? _a : (this.uploadPromises[fileName] = new Set());
        set.add(deferred);
        return deferred;
    }
}
const apiFileManager = new ApiFileManager();
_config_debug__WEBPACK_IMPORTED_MODULE_0__["MOUNT_CLASS_TO"].apiFileManager = apiFileManager;
/* harmony default export */ __webpack_exports__["default"] = (apiFileManager);


/***/ }),

/***/ "./src/lib/mtproto/apiManager.ts":
/*!***************************************!*\
  !*** ./src/lib/mtproto/apiManager.ts ***!
  \***************************************/
/*! exports provided: ApiManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiManager", function() { return ApiManager; });
/* harmony import */ var _sessionStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sessionStorage */ "./src/lib/sessionStorage.ts");
/* harmony import */ var _bin_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/* harmony import */ var _networkerFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkerFactory */ "./src/lib/mtproto/networkerFactory.ts");
/* harmony import */ var _authorizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./authorizer */ "./src/lib/mtproto/authorizer.ts");
/* harmony import */ var _dcConfigurator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dcConfigurator */ "./src/lib/mtproto/dcConfigurator.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../logger */ "./src/lib/logger.ts");
/* harmony import */ var _helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers/cancellablePromise */ "./src/helpers/cancellablePromise.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _config_app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../config/app */ "./src/config/app.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _idb__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../idb */ "./src/lib/idb.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _environment_ctx__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../environment/ctx */ "./src/environment/ctx.ts");
/* harmony import */ var _helpers_noop__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers/noop */ "./src/helpers/noop.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



//import { telegramMeWebService } from './mtproto';











/* class RotatableArray<T> {
  public array: Array<T> = [];
  private lastIndex = -1;

  public get() {
    this.lastIndex = clamp(this.lastIndex + 1, 0, this.array.length - 1);
    return this.array[this.lastIndex];
  }
} */
class ApiManager {
    constructor() {
        this.cachedNetworkers = {};
        this.cachedExportPromise = {};
        this.gettingNetworkers = {};
        this.baseDcId = 0;
        //public telegramMeNotified = false;
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_5__["logger"])('API');
        this.afterMessageTempIds = {};
    }
    //private lol = false;
    // constructor() {
    //MtpSingleInstanceService.start();
    /* AppStorage.get<number>('dc').then((dcId) => {
      if(dcId) {
        this.baseDcId = dcId;
      }
    }); */
    // }
    /* public telegramMeNotify(newValue: boolean) {
      if(this.telegramMeNotified !== newValue) {
        this.telegramMeNotified = newValue;
        //telegramMeWebService.setAuthorized(this.telegramMeNotified);
      }
    } */
    getBaseDcId() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.baseDcId) {
                return this.baseDcId;
            }
            const baseDcId = yield _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].get('dc');
            if (!this.baseDcId) {
                if (!baseDcId) {
                    this.setBaseDcId(_config_app__WEBPACK_IMPORTED_MODULE_8__["default"].baseDcId);
                }
                else {
                    this.baseDcId = baseDcId;
                }
            }
            return this.baseDcId;
        });
    }
    setUserAuth(userAuth) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!userAuth.dcID) {
                const baseDcId = yield this.getBaseDcId();
                userAuth.dcID = baseDcId;
            }
            _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].set({
                user_auth: userAuth
            });
            //this.telegramMeNotify(true);
        });
    }
    setBaseDcId(dcId) {
        const wasDcId = this.baseDcId;
        if (wasDcId) { // if migrated set ondrain
            this.getNetworker(wasDcId).then(networker => {
                this.setOnDrainIfNeeded(networker);
            });
        }
        this.baseDcId = dcId;
        _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].set({
            dc: this.baseDcId
        });
    }
    logOut() {
        return __awaiter(this, void 0, void 0, function* () {
            const storageKeys = [];
            const prefix = 'dc';
            for (let dcId = 1; dcId <= 5; dcId++) {
                storageKeys.push(prefix + dcId + '_auth_key');
            }
            // WebPushApiManager.forceUnsubscribe(); // WARNING // moved to worker's master
            const storageResult = yield Promise.all(storageKeys.map(key => _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].get(key)));
            const logoutPromises = [];
            for (let i = 0; i < storageResult.length; i++) {
                if (storageResult[i]) {
                    logoutPromises.push(this.invokeApi('auth.logOut', {}, { dcId: (i + 1), ignoreErrors: true }));
                }
            }
            const clear = () => {
                //console.error('apiManager: logOut clear');
                this.baseDcId = undefined;
                //this.telegramMeNotify(false);
                _idb__WEBPACK_IMPORTED_MODULE_10__["default"].closeDatabases();
                self.postMessage({ type: 'clear' });
            };
            setTimeout(clear, 1e3);
            //return;
            return Promise.all(logoutPromises).catch((error) => {
                error.handled = true;
            }).finally(clear) /* .then(() => {
              location.pathname = '/';
            }) */;
        });
    }
    getNetworker(dcId, options = {}) {
        const connectionType = options.fileDownload ? 'download' : (options.fileUpload ? 'upload' : 'client');
        //const connectionType: ConnectionType = 'client';
        // @ts-ignore
        const transportType = 'websocket';
        if (!this.cachedNetworkers.hasOwnProperty(transportType)) {
            this.cachedNetworkers[transportType] = {
                client: {},
                download: {},
                upload: {}
            };
        }
        const cache = this.cachedNetworkers[transportType][connectionType];
        if (!(dcId in cache)) {
            cache[dcId] = [];
        }
        const networkers = cache[dcId];
        // @ts-ignore
        const maxNetworkers = connectionType === 'client' || transportType === 'https' ? 1 : (connectionType === 'download' ? 3 : 3);
        if (networkers.length >= maxNetworkers) {
            let i = networkers.length - 1, found = false;
            for (; i >= 0; --i) {
                if (networkers[i].isOnline) {
                    found = true;
                    break;
                }
            }
            const networker = found ? networkers.splice(i, 1)[0] : networkers.pop();
            networkers.unshift(networker);
            return Promise.resolve(networker);
        }
        const getKey = [dcId, transportType, connectionType].join('-');
        if (this.gettingNetworkers[getKey]) {
            return this.gettingNetworkers[getKey];
        }
        const ak = `dc${dcId}_auth_key`;
        const ss = `dc${dcId}_server_salt`;
        return this.gettingNetworkers[getKey] = Promise.all([ak, ss].map(key => _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].get(key)))
            .then(([authKeyHex, serverSaltHex]) => __awaiter(this, void 0, void 0, function* () {
            const transport = _dcConfigurator__WEBPACK_IMPORTED_MODULE_4__["default"].chooseServer(dcId, connectionType, transportType, connectionType === 'client');
            let networker;
            if (authKeyHex && authKeyHex.length === 512) {
                if (!serverSaltHex || serverSaltHex.length !== 16) {
                    serverSaltHex = 'AAAAAAAAAAAAAAAA';
                }
                const authKey = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_7__["bytesFromHex"])(authKeyHex);
                const authKeyId = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_11__["default"].invokeCrypto('sha1-hash', authKey)).slice(-8);
                const serverSalt = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_7__["bytesFromHex"])(serverSaltHex);
                networker = _networkerFactory__WEBPACK_IMPORTED_MODULE_2__["default"].getNetworker(dcId, authKey, authKeyId, serverSalt, transport, options);
            }
            else {
                try { // if no saved state
                    const auth = yield _authorizer__WEBPACK_IMPORTED_MODULE_3__["default"].auth(dcId);
                    const storeObj = {
                        [ak]: Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_7__["bytesToHex"])(auth.authKey),
                        [ss]: Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_7__["bytesToHex"])(auth.serverSalt)
                    };
                    _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].set(storeObj);
                    networker = _networkerFactory__WEBPACK_IMPORTED_MODULE_2__["default"].getNetworker(dcId, auth.authKey, auth.authKeyId, auth.serverSalt, transport, options);
                }
                catch (error) {
                    this.log('Get networker error', error, error.stack);
                    delete this.gettingNetworkers[getKey];
                    throw error;
                }
            }
            /* networker.onConnectionStatusChange = (online) => {
              console.log('status:', online);
            }; */
            delete this.gettingNetworkers[getKey];
            networkers.unshift(networker);
            this.setOnDrainIfNeeded(networker);
            return networker;
        }));
    }
    setOnDrainIfNeeded(networker) {
        if (networker.onDrain) {
            return;
        }
        const checkPromise = networker.isFileNetworker ?
            Promise.resolve(true) :
            this.getBaseDcId().then(baseDcId => networker.dcId !== baseDcId);
        checkPromise.then(canRelease => {
            if (networker.onDrain) {
                return;
            }
            if (canRelease) {
                networker.onDrain = () => {
                    this.log('networker drain', networker.dcId);
                    networker.onDrain = undefined;
                    networker.destroy();
                    _networkerFactory__WEBPACK_IMPORTED_MODULE_2__["default"].removeNetworker(networker);
                    _dcConfigurator__WEBPACK_IMPORTED_MODULE_4__["DcConfigurator"].removeTransport(this.cachedNetworkers, networker);
                    _dcConfigurator__WEBPACK_IMPORTED_MODULE_4__["DcConfigurator"].removeTransport(_dcConfigurator__WEBPACK_IMPORTED_MODULE_4__["default"].chosenServers, networker.transport);
                };
                networker.setDrainTimeout();
            }
        });
    }
    invokeApi(method, params = {}, options = {}) {
        ///////this.log('Invoke api', method, params, options);
        /* if(!this.lol) {
          networkerFactory.updatesProcessor({_: 'new_session_created'}, true);
          this.lol = true;
        } */
        const deferred = Object(_helpers_cancellablePromise__WEBPACK_IMPORTED_MODULE_6__["deferredPromise"])();
        let { afterMessageId, prepareTempMessageId } = options;
        if (prepareTempMessageId) {
            deferred.then(() => {
                delete this.afterMessageTempIds[prepareTempMessageId];
            });
        }
        if (_config_debug__WEBPACK_IMPORTED_MODULE_9__["MOUNT_CLASS_TO"]) {
            const startTime = Date.now();
            const interval = _environment_ctx__WEBPACK_IMPORTED_MODULE_12__["default"].setInterval(() => {
                if (!cachedNetworker || !cachedNetworker.isStopped()) {
                    this.log.error('Request is still processing:', method, params, options, 'time:', (Date.now() - startTime) / 1000);
                }
                //this.cachedUploadNetworkers[2].requestMessageStatus();
            }, 5e3);
            deferred.catch(_helpers_noop__WEBPACK_IMPORTED_MODULE_13__["default"]).finally(() => {
                clearInterval(interval);
            });
        }
        const rejectPromise = (error) => {
            if (!error) {
                error = { type: 'ERROR_EMPTY' };
            }
            else if (!Object(_bin_utils__WEBPACK_IMPORTED_MODULE_1__["isObject"])(error)) {
                error = { message: error };
            }
            deferred.reject(error);
            if ((error.code === 401 && error.type === 'SESSION_REVOKED') ||
                (error.code === 406 && error.type === 'AUTH_KEY_DUPLICATED')) {
                this.logOut();
            }
            if (options.ignoreErrors) {
                return;
            }
            if (error.code === 406) {
                error.handled = true;
            }
            if (!options.noErrorBox) {
                error.input = method;
                error.stack = stack || (error.originalError && error.originalError.stack) || error.stack || (new Error()).stack;
                setTimeout(() => {
                    if (!error.handled) {
                        if (error.code === 401) {
                            this.logOut();
                        }
                        else {
                            // ErrorService.show({error: error}); // WARNING
                        }
                        error.handled = true;
                    }
                }, 100);
            }
        };
        let dcId;
        let cachedNetworker;
        let stack = (new Error()).stack || 'empty stack';
        const performRequest = (networker) => {
            if (afterMessageId) {
                const after = this.afterMessageTempIds[afterMessageId];
                if (after) {
                    options.afterMessageId = after.messageId;
                }
            }
            const promise = (cachedNetworker = networker).wrapApiCall(method, params, options);
            if (prepareTempMessageId) {
                this.afterMessageTempIds[prepareTempMessageId] = {
                    messageId: options.messageId,
                    promise: deferred
                };
            }
            return promise.then(deferred.resolve, (error) => {
                //if(!options.ignoreErrors) {
                if (error.type !== 'FILE_REFERENCE_EXPIRED' /*  && error.type !== 'MSG_WAIT_FAILED' */) {
                    this.log.error('Error', error.code, error.type, this.baseDcId, dcId, method, params);
                }
                if (error.code === 401 && this.baseDcId === dcId) {
                    if (error.type !== 'SESSION_PASSWORD_NEEDED') {
                        _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].delete('dc');
                        _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].delete('user_auth'); // ! возможно тут вообще не нужно это делать, но нужно проверить случай с USER_DEACTIVATED (https://core.telegram.org/api/errors)
                        //this.telegramMeNotify(false);
                    }
                    rejectPromise(error);
                }
                else if (error.code === 401 && this.baseDcId && dcId !== this.baseDcId) {
                    if (this.cachedExportPromise[dcId] === undefined) {
                        const promise = new Promise((exportResolve, exportReject) => {
                            this.invokeApi('auth.exportAuthorization', { dc_id: dcId }, { noErrorBox: true }).then((exportedAuth) => {
                                this.invokeApi('auth.importAuthorization', {
                                    id: exportedAuth.id,
                                    bytes: exportedAuth.bytes
                                }, { dcId, noErrorBox: true }).then(exportResolve, exportReject);
                            }, exportReject);
                        });
                        this.cachedExportPromise[dcId] = promise;
                    }
                    this.cachedExportPromise[dcId].then(() => {
                        //(cachedNetworker = networker).wrapApiCall(method, params, options).then(deferred.resolve, rejectPromise);
                        this.invokeApi(method, params, options).then(deferred.resolve, rejectPromise);
                    }, rejectPromise);
                }
                else if (error.code === 303) {
                    const newDcId = +error.type.match(/^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\d+)/)[2];
                    if (newDcId !== dcId) {
                        if (options.dcId) {
                            options.dcId = newDcId;
                        }
                        else {
                            this.setBaseDcId(newDcId);
                        }
                        this.getNetworker(newDcId, options).then((networker) => {
                            networker.wrapApiCall(method, params, options).then(deferred.resolve, rejectPromise);
                        }, rejectPromise);
                    }
                }
                else if (error.code === 400 && error.type.indexOf('FILE_MIGRATE') === 0) {
                    const newDcId = +error.type.match(/^(FILE_MIGRATE_)(\d+)/)[2];
                    if (newDcId !== dcId) {
                        this.getNetworker(newDcId, options).then((networker) => {
                            networker.wrapApiCall(method, params, options).then(deferred.resolve, rejectPromise);
                        }, rejectPromise);
                    }
                    else {
                        rejectPromise(error);
                    }
                }
                else if (!options.rawError && error.code === 420) {
                    const waitTime = +error.type.match(/^FLOOD_WAIT_(\d+)/)[1] || 1;
                    if (waitTime > (options.floodMaxTimeout !== undefined ? options.floodMaxTimeout : 60) && !options.prepareTempMessageId) {
                        return rejectPromise(error);
                    }
                    setTimeout(() => {
                        performRequest(cachedNetworker);
                    }, waitTime /* (waitTime + 5) */ * 1000); // 03.02.2020
                }
                else if (!options.rawError && ['MSG_WAIT_FAILED', 'MSG_WAIT_TIMEOUT'].includes(error.type)) {
                    const after = this.afterMessageTempIds[afterMessageId];
                    afterMessageId = undefined;
                    delete options.afterMessageId;
                    if (after)
                        after.promise.then(() => performRequest(cachedNetworker));
                    else
                        performRequest(cachedNetworker);
                }
                else if (!options.rawError && error.code === 500) {
                    const now = Date.now();
                    if (options.stopTime) {
                        if (now >= options.stopTime) {
                            return rejectPromise(error);
                        }
                    }
                    options.waitTime = options.waitTime ? Math.min(60, options.waitTime * 1.5) : 1;
                    setTimeout(() => {
                        performRequest(cachedNetworker);
                    }, options.waitTime * 1000);
                }
                else if (error.type === 'UNKNOWN') {
                    setTimeout(() => {
                        performRequest(cachedNetworker);
                    }, 1000);
                }
                else {
                    rejectPromise(error);
                }
            });
        };
        if (dcId = (options.dcId || this.baseDcId)) {
            this.getNetworker(dcId, options).then(performRequest, rejectPromise);
        }
        else {
            this.getBaseDcId().then(baseDcId => {
                this.getNetworker(dcId = baseDcId, options).then(performRequest, rejectPromise);
            });
        }
        return deferred;
    }
}
const apiManager = new ApiManager();
_config_debug__WEBPACK_IMPORTED_MODULE_9__["MOUNT_CLASS_TO"].apiManager = apiManager;
/* harmony default export */ __webpack_exports__["default"] = (apiManager);


/***/ }),

/***/ "./src/lib/mtproto/authorizer.ts":
/*!***************************************!*\
  !*** ./src/lib/mtproto/authorizer.ts ***!
  \***************************************/
/*! exports provided: Authorizer, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Authorizer", function() { return Authorizer; });
/* harmony import */ var _tl_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl_utils */ "./src/lib/mtproto/tl_utils.ts");
/* harmony import */ var _dcConfigurator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dcConfigurator */ "./src/lib/mtproto/dcConfigurator.ts");
/* harmony import */ var _rsaKeysManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rsaKeysManager */ "./src/lib/mtproto/rsaKeysManager.ts");
/* harmony import */ var _timeManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./timeManager */ "./src/lib/mtproto/timeManager.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../logger */ "./src/lib/logger.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _bin_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class Authorizer {
    constructor() {
        this.cached = {};
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_5__["logger"])(`AUTHORIZER`, _logger__WEBPACK_IMPORTED_MODULE_5__["LogTypes"].Error | _logger__WEBPACK_IMPORTED_MODULE_5__["LogTypes"].Log);
    }
    sendPlainRequest(dcId, requestArray) {
        const requestLength = requestArray.byteLength;
        const header = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]();
        header.storeLongP(0, 0, 'auth_key_id');
        header.storeLong(_timeManager__WEBPACK_IMPORTED_MODULE_3__["default"].generateId(), 'msg_id');
        header.storeInt(requestLength, 'request_length');
        const headerArray = header.getBytes(true);
        const resultArray = new Uint8Array(headerArray.byteLength + requestLength);
        resultArray.set(headerArray);
        resultArray.set(requestArray, headerArray.length);
        const transport = _dcConfigurator__WEBPACK_IMPORTED_MODULE_1__["default"].chooseServer(dcId);
        const baseError = {
            code: 406,
            type: 'NETWORK_BAD_RESPONSE'
        };
        if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            this.log('mtpSendPlainRequest: creating requestPromise');
        }
        const promise = transport.send(resultArray);
        return promise.then(result => {
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('mtpSendPlainRequest: in good sector', result);
            }
            if (!result || !result.byteLength) {
                throw baseError;
            }
            try {
                /* result = fResult ? fResult : result;
                fResult = new Uint8Array(0); */
                const deserializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLDeserialization"](result, { mtproto: true });
                if (result.length === 4) {
                    const errorCode = deserializer.fetchInt();
                    this.log.error('mtpSendPlainRequest: wrong response, error code:', errorCode);
                    throw errorCode;
                }
                const auth_key_id = deserializer.fetchLong('auth_key_id');
                if (auth_key_id !== '0')
                    this.log.error('auth_key_id !== 0', auth_key_id);
                const msg_id = deserializer.fetchLong('msg_id');
                if (msg_id === '0')
                    this.log.error('msg_id === 0', msg_id);
                const msg_len = deserializer.fetchInt('msg_len');
                if (!msg_len)
                    this.log.error('no msg_len', msg_len);
                return deserializer;
            }
            catch (e) {
                this.log.error('mtpSendPlainRequest: deserialization went bad', e);
                const error = Object.assign(baseError, { originalError: e });
                throw error;
            }
        }, (error) => {
            if (!error.message && !error.type) {
                error = Object.assign(baseError, {
                    originalError: error
                });
            }
            throw error;
        });
    }
    sendReqPQ(auth) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]({ mtproto: true });
            request.storeMethod('req_pq_multi', { nonce: auth.nonce });
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Send req_pq', auth.nonce.hex);
            }
            let deserializer;
            try {
                const promise = this.sendPlainRequest(auth.dcId, request.getBytes(true));
                _rsaKeysManager__WEBPACK_IMPORTED_MODULE_2__["default"].prepare();
                deserializer = yield promise;
            }
            catch (error) {
                this.log.error('req_pq error', error.message);
                throw error;
            }
            const response = deserializer.fetchObject('ResPQ');
            if (response._ !== 'resPQ') {
                throw new Error('[MT] resPQ response invalid: ' + response._);
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.nonce, response.nonce)) {
                this.log.error(auth.nonce, response.nonce);
                throw new Error('[MT] resPQ nonce mismatch');
            }
            auth.serverNonce = response.server_nonce; // need
            auth.pq = response.pq;
            auth.fingerprints = response.server_public_key_fingerprints;
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Got ResPQ', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesToHex"])(auth.serverNonce), Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesToHex"])(auth.pq), auth.fingerprints);
            }
            const publicKey = yield _rsaKeysManager__WEBPACK_IMPORTED_MODULE_2__["default"].select(auth.fingerprints);
            if (!publicKey) {
                throw new Error('[MT] No public key found');
            }
            auth.publicKey = publicKey;
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('PQ factorization start', auth.pq);
            }
            // let pAndQ: Awaited<ReturnType<typeof CryptoWorker['factorize']>>;
            try {
                var pAndQ = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('factorize', auth.pq);
            }
            catch (error) {
                this.log.error('worker error factorize', error);
                throw error;
            }
            auth.p = pAndQ[0];
            auth.q = pAndQ[1];
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('PQ factorization done', pAndQ);
            }
            return this.sendReqDhParams(auth);
        });
    }
    sendReqDhParams(auth) {
        return __awaiter(this, void 0, void 0, function* () {
            auth.newNonce = new Uint8Array(32).randomize();
            const p_q_inner_data_dc = {
                _: 'p_q_inner_data_dc',
                pq: auth.pq,
                p: auth.p,
                q: auth.q,
                nonce: auth.nonce,
                server_nonce: auth.serverNonce,
                new_nonce: auth.newNonce,
                dc: 0
            };
            const pQInnerDataSerialization = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]({ mtproto: true });
            pQInnerDataSerialization.storeObject(p_q_inner_data_dc, 'P_Q_inner_data', 'DECRYPTED_DATA');
            const data = pQInnerDataSerialization.getBytes(true);
            if (data.length > 144) {
                throw 'DH_params: data is more than 144 bytes!';
            }
            const dataWithPadding = Object(_bin_utils__WEBPACK_IMPORTED_MODULE_9__["addPadding"])(data, 192, false, true, false);
            const dataPadReversed = dataWithPadding.slice().reverse();
            const getKeyAesEncrypted = () => __awaiter(this, void 0, void 0, function* () {
                for (;;) {
                    const tempKey = new Uint8Array(32).randomize();
                    const dataWithHash = dataPadReversed.concat(yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha256-hash', tempKey.concat(dataWithPadding)));
                    if (dataWithHash.length !== 224) {
                        throw 'DH_params: dataWithHash !== 224 bytes!';
                    }
                    const aesEncrypted = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('aes-encrypt', dataWithHash, tempKey, new Uint8Array([0]));
                    const tempKeyXor = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesXor"])(tempKey, yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha256-hash', aesEncrypted));
                    const keyAesEncrypted = tempKeyXor.concat(aesEncrypted);
                    const keyAesEncryptedBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesToHex"])(keyAesEncrypted), 16);
                    const publicKeyModulusBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["str2bigInt"])(auth.publicKey.modulus, 16);
                    if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["cmp"])(keyAesEncryptedBigInt, publicKeyModulusBigInt) === -1) {
                        return keyAesEncrypted;
                    }
                }
            });
            const keyAesEncrypted = yield getKeyAesEncrypted();
            const encryptedData = Object(_bin_utils__WEBPACK_IMPORTED_MODULE_9__["addPadding"])(yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('rsa-encrypt', keyAesEncrypted, auth.publicKey), 256, true, true, true);
            const req_DH_params = {
                nonce: auth.nonce,
                server_nonce: auth.serverNonce,
                p: auth.p,
                q: auth.q,
                public_key_fingerprint: auth.publicKey.fingerprint,
                encrypted_data: encryptedData
            };
            const request = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]({ mtproto: true });
            request.storeMethod('req_DH_params', req_DH_params);
            const requestBytes = request.getBytes(true);
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Send req_DH_params', req_DH_params /* , requestBytes.hex */);
            }
            let deserializer;
            try {
                deserializer = yield this.sendPlainRequest(auth.dcId, requestBytes);
            }
            catch (error) {
                this.log.error('Send req_DH_params FAIL!', error);
                throw error;
            }
            const response = deserializer.fetchObject('Server_DH_Params', 'RESPONSE');
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Sent req_DH_params, response:', response);
            }
            if (response._ !== 'server_DH_params_fail' && response._ !== 'server_DH_params_ok') {
                throw new Error('[MT] Server_DH_Params response invalid: ' + response._);
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.nonce, response.nonce)) {
                throw new Error('[MT] Server_DH_Params nonce mismatch');
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.serverNonce, response.server_nonce)) {
                throw new Error('[MT] Server_DH_Params server_nonce mismatch');
            }
            if (response._ === 'server_DH_params_fail') {
                const newNonceHash = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce)).slice(-16);
                if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(newNonceHash, response.new_nonce_hash)) {
                    throw new Error('[MT] server_DH_params_fail new_nonce_hash mismatch');
                }
                throw new Error('[MT] server_DH_params_fail');
            }
            // fill auth object
            try {
                yield this.decryptServerDhDataAnswer(auth, response.encrypted_answer);
            }
            catch (e) {
                this.log.error('mtpDecryptServerDhDataAnswer FAILED!', e);
                throw e;
            }
            //console.log(dT(), 'mtpSendReqDhParams: executing mtpSendSetClientDhParams...');
            return this.sendSetClientDhParams(auth);
        });
    }
    decryptServerDhDataAnswer(auth, encryptedAnswer) {
        return __awaiter(this, void 0, void 0, function* () {
            auth.localTime = Date.now();
            // ! can't concat Array with Uint8Array!
            auth.tmpAesKey = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce.concat(auth.serverNonce)))
                .concat((yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.serverNonce.concat(auth.newNonce))).slice(0, 12));
            auth.tmpAesIv = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.serverNonce.concat(auth.newNonce))).slice(12)
                .concat(yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce.concat(auth.newNonce)), auth.newNonce.slice(0, 4));
            const answerWithHash = new Uint8Array(yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('aes-decrypt', encryptedAnswer, auth.tmpAesKey, auth.tmpAesIv));
            const hash = answerWithHash.slice(0, 20);
            const answerWithPadding = answerWithHash.slice(20);
            const deserializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLDeserialization"](answerWithPadding, { mtproto: true });
            const response = deserializer.fetchObject('Server_DH_inner_data');
            if (response._ !== 'server_DH_inner_data') {
                throw new Error('[MT] server_DH_inner_data response invalid: ' + response);
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.nonce, response.nonce)) {
                throw new Error('[MT] server_DH_inner_data nonce mismatch');
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.serverNonce, response.server_nonce)) {
                throw new Error('[MT] server_DH_inner_data serverNonce mismatch');
            }
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Done decrypting answer');
            }
            auth.g = response.g;
            auth.dhPrime = response.dh_prime;
            auth.gA = response.g_a;
            auth.serverTime = response.server_time;
            auth.retry = 0;
            this.verifyDhParams(auth.g, auth.dhPrime, auth.gA);
            const offset = deserializer.getOffset();
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(hash, yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', answerWithPadding.slice(0, offset)))) {
                throw new Error('[MT] server_DH_inner_data SHA1-hash mismatch');
            }
            _timeManager__WEBPACK_IMPORTED_MODULE_3__["default"].applyServerTime(auth.serverTime, auth.localTime);
        });
    }
    verifyDhParams(g, dhPrime, gA) {
        if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            this.log('Verifying DH params', g, dhPrime, gA);
        }
        const dhPrimeHex = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesToHex"])(dhPrime);
        if (g !== 3 || dhPrimeHex !== 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b') {
            // The verified value is from https://core.telegram.org/mtproto/security_guidelines
            throw new Error('[MT] DH params are not verified: unknown dhPrime');
        }
        if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            this.log('dhPrime cmp OK');
        }
        const _gABigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["str2bigInt"])(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesToHex"])(gA), 16);
        const _dhPrimeBigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["str2bigInt"])(dhPrimeHex, 16);
        if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["cmp"])(_gABigInt, _vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["one"]) <= 0) {
            throw new Error('[MT] DH params are not verified: gA <= 1');
        }
        if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["cmp"])(_gABigInt, Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["sub"])(_dhPrimeBigInt, _vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["one"])) >= 0) {
            throw new Error('[MT] DH params are not verified: gA >= dhPrime - 1');
        }
        if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            this.log('1 < gA < dhPrime-1 OK');
        }
        const _two = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["int2bigInt"])(2, 32, 0);
        const _twoPow = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["pow"])(_two, 2048 - 64);
        if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["cmp"])(_gABigInt, _twoPow) < 0) {
            throw new Error('[MT] DH params are not verified: gA < 2^{2048-64}');
        }
        if (Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["cmp"])(_gABigInt, Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_8__["sub"])(_dhPrimeBigInt, _twoPow)) >= 0) {
            throw new Error('[MT] DH params are not verified: gA > dhPrime - 2^{2048-64}');
        }
        if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            this.log('2^{2048-64} < gA < dhPrime-2^{2048-64} OK');
        }
        return true;
    }
    sendSetClientDhParams(auth) {
        return __awaiter(this, void 0, void 0, function* () {
            const gBytes = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesFromHex"])(auth.g.toString(16));
            auth.b = new Uint8Array(256).randomize();
            //MTProto.secureRandom.nextBytes(auth.b);
            // let gB: Awaited<ReturnType<typeof CryptoWorker['modPow']>>;
            try {
                var gB = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('mod-pow', gBytes, auth.b, auth.dhPrime);
            }
            catch (error) {
                throw error;
            }
            const data = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]({ mtproto: true });
            data.storeObject({
                _: 'client_DH_inner_data',
                nonce: auth.nonce,
                server_nonce: auth.serverNonce,
                retry_id: [0, auth.retry++],
                g_b: gB
            }, 'Client_DH_Inner_Data');
            const dataWithHash = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', data.getBuffer())).concat(data.getBytes(true));
            const encryptedData = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('aes-encrypt', dataWithHash, auth.tmpAesKey, auth.tmpAesIv);
            const request = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]({ mtproto: true });
            request.storeMethod('set_client_DH_params', {
                nonce: auth.nonce,
                server_nonce: auth.serverNonce,
                encrypted_data: encryptedData
            });
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Send set_client_DH_params');
            }
            let deserializer;
            try {
                deserializer = yield this.sendPlainRequest(auth.dcId, request.getBytes(true));
            }
            catch (err) {
                throw err;
            }
            const response = deserializer.fetchObject('Set_client_DH_params_answer');
            if (response._ !== 'dh_gen_ok' && response._ !== 'dh_gen_retry' && response._ !== 'dh_gen_fail') {
                throw new Error('[MT] Set_client_DH_params_answer response invalid: ' + response._);
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.nonce, response.nonce)) {
                throw new Error('[MT] Set_client_DH_params_answer nonce mismatch');
            }
            if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(auth.serverNonce, response.server_nonce)) {
                throw new Error('[MT] Set_client_DH_params_answer server_nonce mismatch');
            }
            // let authKey: Uint8Array;
            try {
                var authKey = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('mod-pow', auth.gA, auth.b, auth.dhPrime);
            }
            catch (err) {
                throw authKey;
            }
            const authKeyHash = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', authKey), authKeyAux = authKeyHash.slice(0, 8), authKeyId = authKeyHash.slice(-8);
            if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                this.log('Got Set_client_DH_params_answer', response._, authKey);
            }
            switch (response._) {
                case 'dh_gen_ok': {
                    const newNonceHash1 = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce.concat([1], authKeyAux))).slice(-16);
                    if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(newNonceHash1, response.new_nonce_hash1)) {
                        this.log.error('Set_client_DH_params_answer new_nonce_hash1 mismatch', newNonceHash1, response);
                        throw new Error('new_nonce_hash1 mismatch');
                    }
                    const serverSalt = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesXor"])(auth.newNonce.slice(0, 8), auth.serverNonce.slice(0, 8));
                    if (_config_debug__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                        this.log('Auth successfull!', authKeyId, authKey, serverSalt);
                    }
                    auth.authKeyId = authKeyId;
                    auth.authKey = authKey;
                    auth.serverSalt = serverSalt;
                    return auth;
                }
                case 'dh_gen_retry': {
                    const newNonceHash2 = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce.concat([2], authKeyAux))).slice(-16);
                    if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(newNonceHash2, response.new_nonce_hash2)) {
                        throw new Error('[MT] Set_client_DH_params_answer new_nonce_hash2 mismatch');
                    }
                    return this.sendSetClientDhParams(auth);
                }
                case 'dh_gen_fail': {
                    const newNonceHash3 = (yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_4__["default"].invokeCrypto('sha1-hash', auth.newNonce.concat([3], authKeyAux))).slice(-16);
                    if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_6__["bytesCmp"])(newNonceHash3, response.new_nonce_hash3)) {
                        throw new Error('[MT] Set_client_DH_params_answer new_nonce_hash3 mismatch');
                    }
                    throw new Error('[MT] Set_client_DH_params_answer fail');
                }
            }
        });
    }
    auth(dcId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (dcId in this.cached) {
                return this.cached[dcId];
            }
            const nonce = /* fNonce ? fNonce :  */ new Uint8Array(16).randomize();
            /* const nonce = new Array(16);
            MTProto.secureRandom.nextBytes(nonce); */
            if (!_dcConfigurator__WEBPACK_IMPORTED_MODULE_1__["default"].chooseServer(dcId)) {
                throw new Error('[MT] No server found for dc ' + dcId);
            }
            // await new Promise((resolve) => setTimeout(resolve, 2e3));
            const auth = { dcId, nonce, localTry: 1 };
            try {
                const promise = this.sendReqPQ(auth);
                this.cached[dcId] = promise;
                return yield promise;
            }
            catch (err) {
                if ( /* err.originalError === -404 &&  */auth.localTry <= 3) {
                    return this.sendReqPQ({
                        dcId: auth.dcId,
                        nonce: new Uint8Array(16).randomize(),
                        localTry: auth.localTry + 1
                    });
                }
                delete this.cached[dcId];
                throw err;
            }
        });
    }
}
/* harmony default export */ __webpack_exports__["default"] = (new Authorizer());


/***/ }),

/***/ "./src/lib/mtproto/bin_utils.ts":
/*!**************************************!*\
  !*** ./src/lib/mtproto/bin_utils.ts ***!
  \**************************************/
/*! exports provided: isObject, intToUint, longFromInts, sortLongsArray, addPadding */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intToUint", function() { return intToUint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "longFromInts", function() { return longFromInts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortLongsArray", function() { return sortLongsArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addPadding", function() { return addPadding; });
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */


function isObject(object) {
    return typeof (object) === 'object' && object !== null;
}
/* export function bigint(num: number) {
  return new BigInteger(num.toString(16), 16);
} */
/* export function bigStringInt(strNum: string) {
  return new BigInteger(strNum, 10);
} */
/* export function base64ToBlob(base64str: string, mimeType: string) {
  var sliceSize = 1024;
  var byteCharacters = atob(base64str);
  var bytesLength = byteCharacters.length;
  var slicesCount = Math.ceil(bytesLength / sliceSize);
  var byteArrays = new Array(slicesCount);

  for(var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
    var begin = sliceIndex * sliceSize;
    var end = Math.min(begin + sliceSize, bytesLength);

    var bytes = new Array(end - begin);
    for(var offset = begin, i = 0; offset < end; ++i, ++offset) {
      bytes[i] = byteCharacters[offset].charCodeAt(0);
    }
    byteArrays[sliceIndex] = new Uint8Array(bytes);
  }

  return blobConstruct(byteArrays, mimeType);
}

export function dataUrlToBlob(url: string) {
  // var name = 'b64blob ' + url.length
  // console.time(name)
  var urlParts = url.split(',');
  var base64str = urlParts[1];
  var mimeType = urlParts[0].split(':')[1].split(';')[0];
  var blob = base64ToBlob(base64str, mimeType);
  // console.timeEnd(name)
  return blob;
} */
function intToUint(val) {
    // return val < 0 ? val + 4294967296 : val; // 0 <= val <= Infinity
    return val >>> 0; // (4294967296 >>> 0) === 0; 0 <= val <= 4294967295
}
/* export function bytesFromBigInt(bigInt: BigInteger, len?: number) {
  var bytes = bigInt.toByteArray();

  if(len && bytes.length < len) {
    var padding = [];
    for(var i = 0, needPadding = len - bytes.length; i < needPadding; i++) {
      padding[i] = 0;
    }
    if(bytes instanceof ArrayBuffer) {
      bytes = bufferConcat(padding, bytes);
    } else {
      bytes = padding.concat(bytes);
    }
  } else {
    while (!bytes[0] && (!len || bytes.length > len)) {
      bytes = bytes.slice(1);
    }
  }

  return bytes;
} */
function longFromInts(high, low) {
    //let perf = performance.now();
    //let str = bigint(high).shiftLeft(32).add(bigint(low)).toString(10);
    //console.log('longFromInts jsbn', performance.now() - perf);
    high = intToUint(high);
    low = intToUint(low);
    //perf = performance.now();
    const bigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(high.toString(16), 16, 32); //int2bigInt(high, 64, 64);
    //console.log('longFromInts construct high', bigint(high).toString(10), bigInt2str(bigInt, 10));
    Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["leftShift_"])(bigInt, 32);
    //console.log('longFromInts shiftLeft', bigint(high).shiftLeft(32).toString(10), bigInt2str(bigInt, 10));
    Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["add_"])(bigInt, Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(low.toString(16), 16, 32));
    const _str = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(bigInt, 10);
    //console.log('longFromInts leemon', performance.now() - perf);
    //console.log('longFromInts', high, low, str, _str, str === _str);
    return _str;
}
function sortLongsArray(arr) {
    return arr.map(long => {
        return Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["str2bigInt"])(long, 10);
    }).sort((a, b) => {
        return Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["cmp"])(a, b);
    }).map(bigInt => {
        return Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_1__["bigInt2str"])(bigInt, 10);
    });
}
function addPadding(bytes, blockSize = 16, zeroes, blockSizeAsTotalLength = false, prepend = false) {
    const len = bytes.byteLength || bytes.length;
    const needPadding = blockSizeAsTotalLength ? blockSize - len : blockSize - (len % blockSize);
    if (needPadding > 0 && needPadding < blockSize) {
        ////console.log('addPadding()', len, blockSize, needPadding);
        const padding = new Uint8Array(needPadding);
        if (zeroes) {
            for (let i = 0; i < needPadding; ++i) {
                padding[i] = 0;
            }
        }
        else {
            padding.randomize();
        }
        if (bytes instanceof ArrayBuffer) {
            return (prepend ? Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bufferConcats"])(padding, bytes) : Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bufferConcats"])(bytes, padding)).buffer;
        }
        else if (bytes instanceof Uint8Array) {
            return (prepend ? Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bufferConcats"])(padding, bytes) : Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bufferConcats"])(bytes, padding));
        }
        else {
            // @ts-ignore
            return (prepend ? [...padding].concat(bytes) : bytes.concat([...padding]));
        }
    }
    return bytes;
}


/***/ }),

/***/ "./src/lib/mtproto/connectionStatus.ts":
/*!*********************************************!*\
  !*** ./src/lib/mtproto/connectionStatus.ts ***!
  \*********************************************/
/*! exports provided: ConnectionStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionStatus", function() { return ConnectionStatus; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus[ConnectionStatus["Connected"] = 0] = "Connected";
    ConnectionStatus[ConnectionStatus["Connecting"] = 1] = "Connecting";
    ConnectionStatus[ConnectionStatus["Closed"] = 2] = "Closed";
    ConnectionStatus[ConnectionStatus["TimedOut"] = 3] = "TimedOut";
})(ConnectionStatus || (ConnectionStatus = {}));
;


/***/ }),

/***/ "./src/lib/mtproto/dcConfigurator.ts":
/*!*******************************************!*\
  !*** ./src/lib/mtproto/dcConfigurator.ts ***!
  \*******************************************/
/*! exports provided: DcConfigurator, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DcConfigurator", function() { return DcConfigurator; });
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _transports_websocket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transports/websocket */ "./src/lib/mtproto/transports/websocket.ts");
/* harmony import */ var _transports_tcpObfuscated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transports/tcpObfuscated */ "./src/lib/mtproto/transports/tcpObfuscated.ts");
/* harmony import */ var _environment_userAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environment/userAgent */ "./src/environment/userAgent.ts");
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/context */ "./src/helpers/context.ts");
/* harmony import */ var _transports_socketProxied__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transports/socketProxied */ "./src/lib/mtproto/transports/socketProxied.ts");
/* harmony import */ var _config_app__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../config/app */ "./src/config/app.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */







const TEST_SUFFIX = _config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].test ? '_test' : '';
class DcConfigurator {
    constructor() {
        this.sslSubdomains = ['pluto', 'venus', 'aurora', 'vesta', 'flora'];
        this.dcOptions = _config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].test
            ? [
                { id: 1, host: '149.154.175.10', port: 80 },
                { id: 2, host: '149.154.167.40', port: 80 },
                { id: 3, host: '149.154.175.117', port: 80 }
            ]
            : [
                { id: 1, host: '149.154.175.50', port: 80 },
                { id: 2, host: '149.154.167.50', port: 80 },
                { id: 3, host: '149.154.175.100', port: 80 },
                { id: 4, host: '149.154.167.91', port: 80 },
                { id: 5, host: '149.154.171.5', port: 80 }
            ];
        this.chosenServers = {};
        this.transportSocket = (dcId, connectionType, suffix) => {
            const path = 'apiws' + TEST_SUFFIX;
            const chosenServer = `wss://${_config_app__WEBPACK_IMPORTED_MODULE_6__["default"].suffix.toLowerCase()}ws${dcId}${suffix}.web.telegram.org/${path}`;
            const logSuffix = connectionType === 'upload' ? '-U' : connectionType === 'download' ? '-D' : '';
            const retryTimeout = connectionType === 'client' ? 10000 : 10000;
            const oooohLetMeLive = (_environment_userAgent__WEBPACK_IMPORTED_MODULE_3__["IS_SAFARI"] && _helpers_context__WEBPACK_IMPORTED_MODULE_4__["isWebWorker"] && typeof (_transports_socketProxied__WEBPACK_IMPORTED_MODULE_5__["default"]) !== 'undefined') /* || true */ ? _transports_socketProxied__WEBPACK_IMPORTED_MODULE_5__["default"] : _transports_websocket__WEBPACK_IMPORTED_MODULE_1__["default"];
            return new _transports_tcpObfuscated__WEBPACK_IMPORTED_MODULE_2__["default"](oooohLetMeLive, dcId, chosenServer, logSuffix, retryTimeout);
        };
    }
    chooseServer(dcId, connectionType = 'client', transportType = 'websocket', reuse = true) {
        /* if(transportType === 'websocket' && !Modes.multipleConnections) {
          connectionType = 'client';
        } */
        if (!this.chosenServers.hasOwnProperty(transportType)) {
            this.chosenServers[transportType] = {
                client: {},
                download: {},
                upload: {}
            };
        }
        const servers = this.chosenServers[transportType][connectionType];
        if (!(dcId in servers)) {
            servers[dcId] = [];
        }
        const transports = servers[dcId];
        if (!transports.length || !reuse /*  || (upload && transports.length < 1) */) {
            let transport;
            const suffix = connectionType === 'client' ? '' : '-1';
            transport = this.transportSocket(dcId, connectionType, suffix);
            if (!transport) {
                console.error('No chosenServer!', dcId);
                return null;
            }
            if (reuse) {
                transports.push(transport);
            }
            return transport;
        }
        return transports[0];
    }
    static removeTransport(obj, transport) {
        for (const transportType in obj) {
            // @ts-ignore
            for (const connectionType in obj[transportType]) {
                // @ts-ignore
                for (const dcId in obj[transportType][connectionType]) {
                    // @ts-ignore
                    const transports = obj[transportType][connectionType][dcId];
                    const idx = transports.indexOf(transport);
                    if (idx !== -1) {
                        transports.splice(idx, 1);
                    }
                }
            }
        }
    }
}
/* harmony default export */ __webpack_exports__["default"] = (new DcConfigurator());


/***/ }),

/***/ "./src/lib/mtproto/networker.ts":
/*!**************************************!*\
  !*** ./src/lib/mtproto/networker.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MTPNetworker; });
/* harmony import */ var _bin_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/* harmony import */ var _tl_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tl_utils */ "./src/lib/mtproto/tl_utils.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _sessionStorage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sessionStorage */ "./src/lib/sessionStorage.ts");
/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./schema */ "./src/lib/mtproto/schema.ts");
/* harmony import */ var _timeManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./timeManager */ "./src/lib/mtproto/timeManager.ts");
/* harmony import */ var _networkerFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./networkerFactory */ "./src/lib/mtproto/networkerFactory.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../logger */ "./src/lib/logger.ts");
/* harmony import */ var _crypto_crypto_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../crypto/crypto_utils */ "./src/lib/crypto/crypto_utils.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _helpers_random__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../helpers/random */ "./src/helpers/random.ts");
/* harmony import */ var _config_app__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../config/app */ "./src/config/app.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_noop__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../helpers/noop */ "./src/helpers/noop.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _helpers_array__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../helpers/array */ "./src/helpers/array.ts");
/* harmony import */ var _connectionStatus__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./connectionStatus */ "./src/lib/mtproto/connectionStatus.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


















const CONNECTION_TIMEOUT = 5000;
const DRAIN_TIMEOUT = 10000;
let invokeAfterMsgConstructor;
class MTPNetworker {
    //private disconnectDelay: number;
    //private pingPromise: CancellablePromise<any>;
    //public onConnectionStatusChange: (online: boolean) => void;
    //private debugRequests: Array<{before: Uint8Array, after: Uint8Array}> = [];
    constructor(dcId, authKey, authKeyId, serverSalt, transport, options = {}) {
        this.dcId = dcId;
        this.authKey = authKey;
        this.authKeyId = authKeyId;
        this.transport = transport;
        this.lastServerMessages = [];
        this.sentMessages = {};
        this.pendingMessages = {};
        this.pendingAcks = [];
        this.pendingResends = [];
        this.connectionInited = false;
        this.nextReq = 0;
        this.seqNo = 0;
        this.lastResendReq = null;
        this.isOnline = false;
        this.status = _connectionStatus__WEBPACK_IMPORTED_MODULE_17__["ConnectionStatus"].Closed;
        this.lastResponseTime = 0;
        this.debug = _config_debug__WEBPACK_IMPORTED_MODULE_12__["default"] /* && false */ || _config_modes__WEBPACK_IMPORTED_MODULE_13__["default"].debug;
        this.activeRequests = 0;
        this.authKeyUint8 = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["convertToUint8Array"])(this.authKey);
        this.serverSalt = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["convertToUint8Array"])(serverSalt);
        this.isFileUpload = !!options.fileUpload;
        this.isFileDownload = !!options.fileDownload;
        this.isFileNetworker = this.isFileUpload || this.isFileDownload;
        const suffix = this.isFileUpload ? '-U' : this.isFileDownload ? '-D' : '';
        this.name = 'NET-' + dcId + suffix;
        //this.log = logger(this.name, this.upload && this.dcId === 2 ? LogLevels.debug | LogLevels.warn | LogLevels.log | LogLevels.error : LogLevels.error);
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_7__["logger"])(this.name, _logger__WEBPACK_IMPORTED_MODULE_7__["LogTypes"].Log | /* LogTypes.Debug |  */ _logger__WEBPACK_IMPORTED_MODULE_7__["LogTypes"].Error | _logger__WEBPACK_IMPORTED_MODULE_7__["LogTypes"].Warn);
        this.log('constructor' /* , this.authKey, this.authKeyID, this.serverSalt */);
        // Test resend after bad_server_salt
        /* if(this.dcId === 2 && this.upload) {
          //timeManager.applyServerTime((Date.now() / 1000 - 86400) | 0);
          this.serverSalt[0] = 0;
        } */
        this.updateSession();
        // if(!NetworkerFactory.offlineInited) {
        //   NetworkerFactory.offlineInited = true;
        //   /* rootScope.offline = true
        //   rootScope.offlineConnecting = true */
        // }
        //} else {
        this.transport.networker = this;
        //}
        // * handle outcoming dead socket, server will close the connection
        // if((this.transport as TcpObfuscated).networker) {
        //   this.disconnectDelay = /* (this.transport as TcpObfuscated).retryTimeout  */75;
        //   //setInterval(this.sendPingDelayDisconnect, (this.disconnectDelay - 5) * 1000);
        //   this.sendPingDelayDisconnect();
        // }
        if (this.transport.connected) {
            this.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_17__["ConnectionStatus"].Connected);
        }
    }
    updateSession() {
        this.seqNo = 0;
        this.prevSessionId = this.sessionId;
        this.sessionId = new Uint8Array(8).randomize();
    }
    /* private clearContainers() {
      for(const messageId in this.sentMessages) {
        const message = this.sentMessages[messageId];
        if(message.container) {
          delete this.sentMessages[messageId];
        }
      }
    } */
    updateSentMessage(sentMessageId) {
        const sentMessage = this.sentMessages[sentMessageId];
        if (!sentMessage) {
            return false;
        }
        if (sentMessage.container) {
            Object(_helpers_array__WEBPACK_IMPORTED_MODULE_16__["forEachReverse"])(sentMessage.inner, (innerSentMessageId, idx) => {
                const innerSentMessage = this.updateSentMessage(innerSentMessageId);
                if (!innerSentMessage) {
                    sentMessage.inner.splice(idx, 1);
                }
                else {
                    sentMessage.inner[idx] = innerSentMessage.msg_id;
                }
            });
        }
        sentMessage.msg_id = _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].generateId();
        sentMessage.seq_no = this.generateSeqNo(sentMessage.notContentRelated || sentMessage.container);
        /* if(DEBUG) {
          this.log('updateSentMessage', sentMessage.msg_id, sentMessageId);
        } */
        this.sentMessages[sentMessage.msg_id] = sentMessage;
        delete this.sentMessages[sentMessageId];
        return sentMessage;
    }
    generateSeqNo(notContentRelated) {
        let seqNo = this.seqNo * 2;
        if (!notContentRelated) {
            seqNo++;
            this.seqNo++;
        }
        return seqNo;
    }
    wrapMtpCall(method, params, options) {
        const serializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"]({ mtproto: true });
        serializer.storeMethod(method, params);
        const messageId = _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].generateId();
        const seqNo = this.generateSeqNo();
        const message = {
            msg_id: messageId,
            seq_no: seqNo,
            body: serializer.getBytes(true)
        };
        if (_config_modes__WEBPACK_IMPORTED_MODULE_13__["default"].debug) {
            this.log('MT call', method, params, messageId, seqNo);
        }
        return this.pushMessage(message, options);
    }
    wrapMtpMessage(object, options) {
        const serializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"]({ mtproto: true });
        serializer.storeObject(object, 'Object');
        const messageId = _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].generateId();
        const seqNo = this.generateSeqNo(options.notContentRelated);
        const message = {
            msg_id: messageId,
            seq_no: seqNo,
            body: serializer.getBytes(true)
        };
        if (_config_modes__WEBPACK_IMPORTED_MODULE_13__["default"].debug) {
            this.log('MT message', object, messageId, seqNo);
        }
        return this.pushMessage(message, options);
    }
    wrapApiCall(method, params = {}, options = {}) {
        const serializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"](options);
        if (!this.connectionInited) { // this will call once for each new session
            ///////this.log('Wrap api call !this.connectionInited');
            const invokeWithLayer = _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.methods.find(m => m.method === 'invokeWithLayer');
            if (!invokeWithLayer)
                throw new Error('no invokeWithLayer!');
            serializer.storeInt(+invokeWithLayer.id, 'invokeWithLayer');
            // @ts-ignore
            serializer.storeInt(_schema__WEBPACK_IMPORTED_MODULE_4__["default"].layer, 'layer');
            const initConnection = _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.methods.find(m => m.method === 'initConnection');
            if (!initConnection)
                throw new Error('no initConnection!');
            serializer.storeInt(+initConnection.id, 'initConnection');
            serializer.storeInt(0x0, 'flags');
            serializer.storeInt(_config_app__WEBPACK_IMPORTED_MODULE_11__["default"].id, 'api_id');
            serializer.storeString(_networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].userAgent || 'Unknown UserAgent', 'device_model');
            serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version');
            serializer.storeString(_config_app__WEBPACK_IMPORTED_MODULE_11__["default"].version + (_config_app__WEBPACK_IMPORTED_MODULE_11__["default"].isMainDomain ? ' ' + _config_app__WEBPACK_IMPORTED_MODULE_11__["default"].suffix : ''), 'app_version');
            serializer.storeString(navigator.language || 'en', 'system_lang_code');
            serializer.storeString(_config_app__WEBPACK_IMPORTED_MODULE_11__["default"].langPack, 'lang_pack');
            serializer.storeString(_networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].language, 'lang_code');
            //serializer.storeInt(0x0, 'proxy');
            /* serializer.storeMethod('initConnection', {
              'flags': 0,
              'api_id': App.id,
              'device_model': navigator.userAgent || 'Unknown UserAgent',
              'system_version': navigator.platform || 'Unknown Platform',
              'app_version': App.version,
              'system_lang_code': navigator.language || 'en',
              'lang_pack': '',
              'lang_code': navigator.language || 'en'
            }); */
        }
        if (options.afterMessageId) {
            if (invokeAfterMsgConstructor === undefined) {
                const m = _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.methods.find(m => m.method === 'invokeAfterMsg');
                invokeAfterMsgConstructor = m ? +m.id : 0;
            }
            if (invokeAfterMsgConstructor) {
                // if(this.debug) {
                //   this.log('invokeApi: store invokeAfterMsg');
                // }
                serializer.storeInt(invokeAfterMsgConstructor, 'invokeAfterMsg');
                serializer.storeLong(options.afterMessageId, 'msg_id');
            }
            else {
                this.log.error('no invokeAfterMsg!');
            }
        }
        options.resultType = serializer.storeMethod(method, params);
        /* if(method === 'account.updateNotifySettings') {
          this.log('api call body:', serializer.getBytes(true));
        } */
        const messageId = _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].generateId();
        const seqNo = this.generateSeqNo();
        const message = {
            msg_id: messageId,
            seq_no: seqNo,
            body: serializer.getBytes(true),
            isAPI: true
        };
        if (_config_modes__WEBPACK_IMPORTED_MODULE_13__["default"].debug /*  || true */) {
            this.log('Api call', method, message, params, options);
        }
        else if (this.debug) {
            this.log('Api call', method, params, options);
        }
        return this.pushMessage(message, options);
    }
    destroy() {
        //assumeType<TcpObfuscated>(this.transport);
        this.transport.destroy();
    }
    forceReconnectTimeout() {
        if (this.transport.reconnect) {
            this.transport.reconnect();
        }
    }
    forceReconnect() {
        if (this.transport.forceReconnect) {
            this.transport.forceReconnect();
        }
    }
    // private sendPingDelayDisconnect = () => {
    //   if(this.pingPromise || true) return;
    //   if(!this.isOnline) {
    //     if((this.transport as TcpObfuscated).connected) {
    //       (this.transport as TcpObfuscated).handleClose();
    //     }
    //     return;
    //   }
    //   this.log('sendPingDelayDisconnect', this.sentPingTimes);
    //   /* if(this.tt) clearTimeout(this.tt);
    //   this.tt = self.setTimeout(() => {  
    //     (this.transport as any).ws.close(1000);
    //     this.tt = 0;
    //   }, this.disconnectDelay * 1000); */
    //   /* this.wrapMtpCall('ping_delay_disconnect', {
    //     ping_id: randomLong(),
    //     disconnect_delay: this.disconnectDelay
    //   }, {
    //     noResponse: true,
    //     notContentRelated: true
    //   }); */
    //   const deferred = this.pingPromise = deferredPromise<void>();
    //   const timeoutTime = this.disconnectDelay * 1000;
    //   /* if(!this.sentPingTimes || true) {
    //     ++this.sentPingTimes; */
    //     const startTime = Date.now();
    //     this.wrapMtpCall('ping', {
    //       ping_id: randomLong()
    //     }, {}).then(pong => {
    //       const elapsedTime = Date.now() - startTime;
    //       this.log('sendPingDelayDisconnect: response', pong, elapsedTime > timeoutTime);
    //       if(elapsedTime > timeoutTime) {
    //         deferred.reject();
    //       } else {
    //         setTimeout(deferred.resolve, timeoutTime - elapsedTime);
    //       }
    //     }, deferred.reject).finally(() => {
    //       clearTimeout(rejectTimeout);
    //       //--this.sentPingTimes;
    //     });
    //   //}
    //   const rejectTimeout = self.setTimeout(deferred.reject, timeoutTime);
    //   deferred.catch(() => {
    //     (this.transport as Socket).handleClose();
    //   });
    //   deferred.finally(() => {
    //     this.pingPromise = null;
    //     this.sendPingDelayDisconnect();
    //   });
    // };
    // private sendPingDelayDisconnect = () => {
    //   if(this.pingPromise || true) return;
    //   /* if(!this.isOnline) {
    //     if((this.transport as TcpObfuscated).connected) {
    //       (this.transport as TcpObfuscated).connection.close();
    //     }
    //     return;
    //   } */
    //   const deferred = this.pingPromise = deferredPromise<void>();
    //   const timeoutTime = this.disconnectDelay * 1000;
    //   const startTime = Date.now();
    //   this.wrapMtpCall('ping_delay_disconnect', {
    //     ping_id: randomLong(),
    //     disconnect_delay: this.disconnectDelay
    //   }, {}).then(pong => {
    //     const elapsedTime = Date.now() - startTime;
    //     this.log('sendPingDelayDisconnect: response', pong, elapsedTime > timeoutTime);
    //     if(elapsedTime > timeoutTime) {
    //       deferred.reject();
    //     } else {
    //       setTimeout(deferred.resolve, timeoutTime - elapsedTime);
    //     }
    //   }, deferred.reject).finally(() => {
    //     clearTimeout(rejectTimeout);
    //     //--this.sentPingTimes;
    //   });
    //   const rejectTimeout = self.setTimeout(deferred.reject, timeoutTime);
    //   deferred.catch(() => {
    //     this.log.error('sendPingDelayDisconnect: catch, closing connection if exists');
    //     (this.transport as TcpObfuscated).connection.close();
    //   });
    //   deferred.finally(() => {
    //     this.pingPromise = null;
    //     this.sendPingDelayDisconnect();
    //   });
    // };
    // тут можно сделать таймаут и выводить дисконнект
    pushMessage(message, options) {
        const promise = new Promise((resolve, reject) => {
            this.sentMessages[message.msg_id] = Object.assign(message, options, options.notContentRelated
                ? undefined
                : {
                    deferred: { resolve, reject }
                });
            //this.log.error('Networker pushMessage:', this.sentMessages[message.msg_id]);
            this.pendingMessages[message.msg_id] = 0;
            if (!options.noSchedule) {
                this.scheduleRequest();
            }
            if (Object(_bin_utils__WEBPACK_IMPORTED_MODULE_0__["isObject"])(options)) {
                options.messageId = message.msg_id;
            }
        });
        if (!options.notContentRelated && !options.noResponse) {
            const timeout = setTimeout(() => {
                if (this.lastResponseTime && (Date.now() - this.lastResponseTime) < CONNECTION_TIMEOUT) {
                    return;
                }
                this.log.error('timeout', message);
                if (this.isOnline) {
                    this.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_17__["ConnectionStatus"].TimedOut);
                }
                /* this.getEncryptedOutput(message).then(bytes => {
                  this.log.error('timeout encrypted', bytes);
                }); */
            }, CONNECTION_TIMEOUT);
            promise.catch(_helpers_noop__WEBPACK_IMPORTED_MODULE_14__["default"]).finally(() => {
                clearTimeout(timeout);
                this.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_17__["ConnectionStatus"].Connected);
                --this.activeRequests;
                this.setDrainTimeout();
            });
            ++this.activeRequests;
            if (this.onDrainTimeout !== undefined) {
                clearTimeout(this.onDrainTimeout);
                this.onDrainTimeout = undefined;
            }
        }
        return promise;
    }
    setDrainTimeout() {
        if (!this.activeRequests && this.onDrain && this.onDrainTimeout === undefined) {
            this.onDrainTimeout = self.setTimeout(() => {
                this.onDrainTimeout = undefined;
                this.log('drain');
                this.onDrain();
            }, DRAIN_TIMEOUT);
        }
    }
    setConnectionStatus(status, retryAt) {
        const isOnline = status === _connectionStatus__WEBPACK_IMPORTED_MODULE_17__["ConnectionStatus"].Connected;
        const willChange = this.status !== status;
        this.isOnline = isOnline;
        this.status = status;
        if (willChange) {
            if (_networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].onConnectionStatusChange) {
                _networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].onConnectionStatusChange({
                    _: 'networkerStatus',
                    status,
                    dcId: this.dcId,
                    name: this.name,
                    isFileNetworker: this.isFileNetworker,
                    isFileDownload: this.isFileDownload,
                    isFileUpload: this.isFileUpload,
                    retryAt
                });
            }
            if (this.isOnline) {
                this.scheduleRequest();
            }
            // if((this.transport as TcpObfuscated).networker) {
            //   this.sendPingDelayDisconnect();
            // }
            /* this.sentPingTimes = 0;
            this.sendPingDelayDisconnect(); */
        }
        /* if(this.onConnectionStatusChange) {
          this.onConnectionStatusChange(this.isOnline);
        } */
    }
    pushResend(messageId, delay = 100) {
        const value = delay ? Date.now() + delay : 0;
        const sentMessage = this.sentMessages[messageId];
        if (sentMessage.container) {
            for (const innerMsgId of sentMessage.inner) {
                this.pendingMessages[innerMsgId] = value;
            }
        }
        else {
            this.pendingMessages[messageId] = value;
        }
        if (sentMessage.acked) {
            this.log.error('pushResend: acked message?', sentMessage);
        }
        if (this.debug) {
            this.log.debug('pushResend:', messageId, sentMessage, this.pendingMessages, delay);
        }
        this.scheduleRequest(delay);
    }
    // * correct, fully checked
    getMsgKey(dataWithPadding, isOut) {
        return __awaiter(this, void 0, void 0, function* () {
            const x = isOut ? 0 : 8;
            const msgKeyLargePlain = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bufferConcats"])(this.authKeyUint8.subarray(88 + x, 88 + x + 32), dataWithPadding);
            const msgKeyLarge = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto('sha256-hash', msgKeyLargePlain);
            const msgKey = new Uint8Array(msgKeyLarge).subarray(8, 24);
            return msgKey;
        });
    }
    ;
    // * correct, fully checked
    getAesKeyIv(msgKey, isOut) {
        const x = isOut ? 0 : 8;
        const sha2aText = new Uint8Array(52);
        const sha2bText = new Uint8Array(52);
        const promises = [];
        sha2aText.set(msgKey, 0);
        sha2aText.set(this.authKeyUint8.subarray(x, x + 36), 16);
        promises.push(_crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto('sha256-hash', sha2aText));
        sha2bText.set(this.authKeyUint8.subarray(40 + x, 40 + x + 36), 0);
        sha2bText.set(msgKey, 36);
        promises.push(_crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto('sha256-hash', sha2bText));
        return Promise.all(promises).then((results) => {
            const aesKey = new Uint8Array(32);
            const aesIv = new Uint8Array(32);
            const sha2a = new Uint8Array(results[0]);
            const sha2b = new Uint8Array(results[1]);
            aesKey.set(sha2a.subarray(0, 8));
            aesKey.set(sha2b.subarray(8, 24), 8);
            aesKey.set(sha2a.subarray(24, 32), 24);
            aesIv.set(sha2b.subarray(0, 8));
            aesIv.set(sha2a.subarray(8, 24), 8);
            aesIv.set(sha2b.subarray(24, 32), 24);
            return [aesKey, aesIv];
        });
    }
    isStopped() {
        return _networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].akStopped && !this.isFileNetworker;
    }
    performScheduledRequest() {
        // this.log('scheduled', this.dcId, this.iii)
        if (this.isStopped()) {
            return false;
        }
        if (this.pendingAcks.length) {
            const ackMsgIds = this.pendingAcks.slice();
            // this.log('acking messages', ackMsgIDs)
            this.wrapMtpMessage({
                _: 'msgs_ack',
                msg_ids: ackMsgIds
            }, {
                notContentRelated: true,
                noSchedule: true
            });
        }
        if (this.pendingResends.length) {
            const resendMsgIds = this.pendingResends.slice();
            const resendOpts = {
                noSchedule: true,
                notContentRelated: true,
                messageId: '' // will set in wrapMtpMessage->pushMessage
            };
            //this.log('resendReq messages', resendMsgIds);
            this.wrapMtpMessage({
                _: 'msg_resend_req',
                msg_ids: resendMsgIds
            }, resendOpts);
            this.lastResendReq = {
                req_msg_id: resendOpts.messageId,
                resend_msg_ids: resendMsgIds
            };
        }
        let outMessage;
        const messages = [];
        //const currentTime = Date.now();
        let messagesByteLen = 0;
        let lengthOverflow = false;
        // * Сюда никогда не попадут контейнеры, так как их не будет в pendingMessages
        const keys = Object(_bin_utils__WEBPACK_IMPORTED_MODULE_0__["sortLongsArray"])(Object.keys(this.pendingMessages));
        for (const messageId of keys) {
            //const value = this.pendingMessages[messageId];
            //if(!value || value <= currentTime) {
            const message = this.sentMessages[messageId];
            if (message && message.body) {
                /* if(message.fileUpload) {
                  this.log('performScheduledRequest message:', message, message.body.length, (message.body as Uint8Array).byteLength, (message.body as Uint8Array).buffer.byteLength);
                } */
                const messageByteLength = message.body.length + 32;
                if ((messagesByteLen + messageByteLength) > 655360) { // 640 Kb
                    this.log.warn('lengthOverflow', message, messages);
                    lengthOverflow = true;
                    if (outMessage) { // if it's not a first message
                        break;
                    }
                }
                messages.push(message);
                messagesByteLen += messageByteLength;
                outMessage = message;
            }
            else {
                // this.log(message, messageId)
            }
            delete this.pendingMessages[messageId];
            //}
        }
        if (!messages.length) {
            // this.log('no scheduled messages')
            return;
        }
        if (messages.length > 1) {
            const container = this.generateContainerMessage(messagesByteLen, messages);
            outMessage = container.messageWithBody;
            this.sentMessages[outMessage.msg_id] = container.message;
        }
        else {
            this.sentMessages[outMessage.msg_id] = outMessage;
        }
        this.pendingAcks = [];
        const promise = this.sendEncryptedRequest(outMessage);
        this.cleanupSent(); // ! WARNING
        if (lengthOverflow) {
            this.scheduleRequest();
        }
    }
    generateContainerMessage(messagesByteLen, messages) {
        const container = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"]({
            mtproto: true,
            startMaxLength: messagesByteLen + 64
        });
        container.storeInt(0x73f1f8dc, 'CONTAINER[id]');
        container.storeInt(messages.length, 'CONTAINER[count]');
        const innerMessages = [];
        messages.forEach((message, i) => {
            innerMessages.push(message.msg_id);
            // this.log('Pushing to container:', message.msg_id);
            container.storeLong(message.msg_id, 'CONTAINER[' + i + '][msg_id]');
            container.storeInt(message.seq_no, 'CONTAINER[' + i + '][seq_no]');
            container.storeInt(message.body.length, 'CONTAINER[' + i + '][bytes]');
            container.storeRawBytes(message.body, 'CONTAINER[' + i + '][body]');
        });
        const message = {
            msg_id: _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].generateId(),
            seq_no: this.generateSeqNo(true),
            container: true,
            inner: innerMessages
        };
        if (_config_modes__WEBPACK_IMPORTED_MODULE_13__["default"].debug /*  || true */) {
            this.log.warn('Container', innerMessages, message.msg_id, message.seq_no);
        }
        return {
            message,
            messageWithBody: Object.assign({ body: container.getBytes(true) }, message),
        };
    }
    getEncryptedMessage(dataWithPadding) {
        return __awaiter(this, void 0, void 0, function* () {
            const msgKey = yield this.getMsgKey(dataWithPadding, true);
            const keyIv = yield this.getAesKeyIv(msgKey, true);
            // this.log('after msg key iv')
            const encryptedBytes = yield _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto('aes-encrypt', dataWithPadding, keyIv[0], keyIv[1]);
            // this.log('Finish encrypt')
            return {
                bytes: encryptedBytes,
                msgKey
            };
        });
    }
    getDecryptedMessage(msgKey, encryptedData) {
        // this.log('get decrypted start')
        return this.getAesKeyIv(msgKey, false).then((keyIv) => {
            // this.log('after msg key iv')
            return _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_2__["default"].invokeCrypto('aes-decrypt', encryptedData, keyIv[0], keyIv[1]);
        });
    }
    getEncryptedOutput(message) {
        /* if(DEBUG) {
          this.log.debug('Send encrypted', message, this.authKeyId);
        } */
        /* if(!this.isOnline) {
          this.log('trying to send message when offline:', Object.assign({}, message));
          //debugger;
        } */
        const data = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"]({
            startMaxLength: message.body.length + 2048
        });
        data.storeIntBytes(this.serverSalt, 64, 'salt');
        data.storeIntBytes(this.sessionId, 64, 'session_id');
        data.storeLong(message.msg_id, 'message_id');
        data.storeInt(message.seq_no, 'seq_no');
        data.storeInt(message.body.length, 'message_data_length');
        data.storeRawBytes(message.body, 'message_data');
        /* const des = new TLDeserialization(data.getBuffer().slice(16));
        const desSalt = des.fetchLong();
        const desSessionId = des.fetchLong();
    
        if(!this.isOnline) {
          this.log.error('trying to send message when offline', message, new Uint8Array(des.buffer), desSalt, desSessionId);
        } */
        /* const messageDataLength = message.body.length;
        let canBeLength = 0; // bytes
        canBeLength += 8;
        canBeLength += 8;
        canBeLength += 8;
        canBeLength += 4;
        canBeLength += 4;
        canBeLength += message.body.length; */
        const dataBuffer = data.getBuffer();
        /* if(dataBuffer.byteLength !== canBeLength || !bytesCmp(new Uint8Array(dataBuffer.slice(dataBuffer.byteLength - message.body.length)), new Uint8Array(message.body))) {
          this.log.error('wrong length', dataBuffer, canBeLength, message.msg_id);
        } */
        const paddingLength = (16 - (data.getOffset() % 16)) + 16 * (1 + Object(_helpers_random__WEBPACK_IMPORTED_MODULE_10__["nextRandomUint"])(8) % 5);
        const padding = /* (message as any).padding ||  */ new Uint8Array(paddingLength).randomize() /* .fill(0) */;
        /* const padding = [167, 148, 207, 226, 86, 192, 193, 57, 124, 153, 174, 145, 159, 1, 5, 70, 127, 157,
          51, 241, 46, 85, 141, 212, 139, 234, 213, 164, 197, 116, 245, 70, 184, 40, 40, 201, 233, 211, 150,
          94, 57, 84, 1, 135, 108, 253, 34, 139, 222, 208, 71, 214, 90, 67, 36, 28, 167, 148, 207, 226, 86, 192, 193, 57, 124, 153, 174, 145, 159, 1, 5, 70, 127, 157,
          51, 241, 46, 85, 141, 212, 139, 234, 213, 164, 197, 116, 245, 70, 184, 40, 40, 201, 233, 211, 150,
          94, 57, 84, 1, 135, 108, 253, 34, 139, 222, 208, 71, 214, 90, 67, 36, 28].slice(0, paddingLength); */
        //(message as any).padding = padding;
        const dataWithPadding = Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bufferConcats"])(dataBuffer, padding);
        // this.log('Adding padding', dataBuffer, padding, dataWithPadding)
        // this.log('auth_key_id', bytesToHex(self.authKeyID))
        /* if(dataWithPadding.byteLength % 16) {
          this.log.error('aaa', dataWithPadding, paddingLength);
        }
    
        if(message.fileUpload) {
          this.log('Send encrypted: body length:', (message.body as ArrayBuffer).byteLength, paddingLength, dataWithPadding);
        } */
        // * full next block is correct
        return this.getEncryptedMessage(dataWithPadding).then((encryptedResult) => {
            /* if(DEBUG) {
              this.log('Got encrypted out message', encryptedResult);
            } */
            const request = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLSerialization"]({
                startMaxLength: encryptedResult.bytes.length + 256
            });
            request.storeIntBytes(this.authKeyId, 64, 'auth_key_id');
            request.storeIntBytes(encryptedResult.msgKey, 128, 'msg_key');
            request.storeRawBytes(encryptedResult.bytes, 'encrypted_data');
            const requestData = request.getBytes(true);
            // if(this.isFileNetworker) {
            //   //this.log('Send encrypted: requestData length:', requestData.length, requestData.length % 16, paddingLength % 16, paddingLength, data.offset, encryptedResult.msgKey.length % 16, encryptedResult.bytes.length % 16);
            //   //this.log('Send encrypted: messageId:', message.msg_id, requestData.length);
            //   //this.log('Send encrypted:', message, new Uint8Array(bufferConcat(des.buffer, padding)), requestData, this.serverSalt.hex, this.sessionId.hex/* new Uint8Array(des.buffer) */);
            //   this.debugRequests.push({before: new Uint8Array(bufferConcat(des.buffer, padding)), after: requestData});
            // }
            return requestData;
        });
    }
    sendEncryptedRequest(message) {
        return this.getEncryptedOutput(message).then(requestData => {
            this.debug && this.log.debug('sendEncryptedRequest: launching message into space:', message, [message.msg_id].concat(message.inner || []));
            const promise = this.transport.send(requestData);
            return promise;
        });
    }
    parseResponse(responseBuffer) {
        //const perf = performance.now();
        /* if(this.debug) {
          this.log.debug('Start parsing response', responseBuffer);
        } */
        this.lastResponseTime = Date.now();
        const deserializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLDeserialization"](responseBuffer);
        const authKeyId = deserializer.fetchIntBytes(64, true, 'auth_key_id');
        if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesCmp"])(authKeyId, this.authKeyId)) {
            throw new Error('[MT] Invalid server auth_key_id: ' + authKeyId.hex);
        }
        const msgKey = deserializer.fetchIntBytes(128, true, 'msg_key');
        const encryptedData = deserializer.fetchRawBytes(responseBuffer.byteLength - deserializer.getOffset(), true, 'encrypted_data');
        return this.getDecryptedMessage(msgKey, encryptedData).then((dataWithPadding) => {
            // this.log('after decrypt')
            return this.getMsgKey(dataWithPadding, false).then((calcMsgKey) => {
                if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesCmp"])(msgKey, calcMsgKey)) {
                    this.log.warn('[MT] msg_keys', msgKey, calcMsgKey);
                    this.updateSession(); // fix 28.01.2020
                    throw new Error('[MT] server msgKey mismatch, updating session');
                }
                // this.log('after msgKey check')
                let deserializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLDeserialization"](dataWithPadding, { mtproto: true });
                /* const salt =  */ deserializer.fetchIntBytes(64, true, 'salt'); // need
                const sessionId = deserializer.fetchIntBytes(64, true, 'session_id');
                const messageId = deserializer.fetchLong('message_id');
                if (!Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesCmp"])(sessionId, this.sessionId) &&
                    (!this.prevSessionId || !Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesCmp"])(sessionId, this.prevSessionId))) {
                    this.log.warn('Sessions', sessionId, this.sessionId, this.prevSessionId, dataWithPadding);
                    //this.updateSession();
                    //this.sessionID = sessionID;
                    throw new Error('[MT] Invalid server session_id: ' + Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesToHex"])(sessionId));
                }
                const seqNo = deserializer.fetchInt('seq_no');
                const totalLength = dataWithPadding.byteLength;
                const messageBodyLength = deserializer.fetchInt('message_data[length]');
                let offset = deserializer.getOffset();
                if ((messageBodyLength % 4) ||
                    messageBodyLength > totalLength - offset) {
                    throw new Error('[MT] Invalid body length: ' + messageBodyLength);
                }
                const messageBody = deserializer.fetchRawBytes(messageBodyLength, true, 'message_data');
                offset = deserializer.getOffset();
                const paddingLength = totalLength - offset;
                if (paddingLength < 12 || paddingLength > 1024) {
                    throw new Error('[MT] Invalid padding length: ' + paddingLength);
                }
                //let buffer = bytesToArrayBuffer(messageBody);
                deserializer = new _tl_utils__WEBPACK_IMPORTED_MODULE_1__["TLDeserialization"](/* buffer */ messageBody, {
                    mtproto: true,
                    override: {
                        mt_message: (result, field) => {
                            result.msg_id = deserializer.fetchLong(field + '[msg_id]');
                            result.seqno = deserializer.fetchInt(field + '[seqno]');
                            result.bytes = deserializer.fetchInt(field + '[bytes]');
                            const offset = deserializer.getOffset();
                            //self.log('mt_message!!!!!', result, field);
                            try {
                                result.body = deserializer.fetchObject('Object', field + '[body]');
                            }
                            catch (e) {
                                this.log.error('parse error', e.message, e.stack);
                                result.body = {
                                    _: 'parse_error',
                                    error: e
                                };
                            }
                            if (deserializer.getOffset() !== offset + result.bytes) {
                                // console.warn(dT(), 'set offset', this.offset, offset, result.bytes)
                                // this.log(result)
                                deserializer.setOffset(offset + result.bytes);
                            }
                            // this.log('override message', result)
                        },
                        mt_rpc_result: (result, field) => {
                            result.req_msg_id = deserializer.fetchLong(field + '[req_msg_id]');
                            const sentMessage = this.sentMessages[result.req_msg_id];
                            const type = sentMessage && sentMessage.resultType || 'Object';
                            if (result.req_msg_id && !sentMessage) {
                                // console.warn(dT(), 'Result for unknown message', result);
                                return;
                            }
                            result.result = deserializer.fetchObject(type, field + '[result]');
                            // self.log(dT(), 'override rpc_result', sentMessage, type, result);
                        }
                    }
                });
                const response = deserializer.fetchObject('', 'INPUT');
                //this.log.error('Parse response time:', performance.now() - perf);
                return {
                    response,
                    messageId,
                    sessionId,
                    seqNo
                };
            });
        });
    }
    applyServerSalt(newServerSalt) {
        const serverSalt = Object(_crypto_crypto_utils__WEBPACK_IMPORTED_MODULE_8__["longToBytes"])(newServerSalt);
        _sessionStorage__WEBPACK_IMPORTED_MODULE_3__["default"].set({
            ['dc' + this.dcId + '_server_salt']: Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_9__["bytesToHex"])(serverSalt)
        });
        this.serverSalt = new Uint8Array(serverSalt);
    }
    // ! таймаут очень сильно тормозит скорость работы сокета (даже нулевой) 
    scheduleRequest(delay) {
        /* if(!this.isOnline) {
          return;
        } */
        const nextReq = Date.now() + (delay || 0);
        if (this.nextReq && (delay === undefined || this.nextReq <= nextReq)) {
            //this.debug && this.log('scheduleRequest: nextReq', this.nextReq, nextReq);
            return;
        }
        //this.debug && this.log('scheduleRequest: delay', delay);
        /* if(this.nextReqTimeout) {
          return;
        } */
        //const perf = performance.now();
        if (this.nextReqTimeout) {
            clearTimeout(this.nextReqTimeout);
        }
        const cb = () => {
            //this.debug && this.log('scheduleRequest: timeout delay was:', performance.now() - perf);
            this.nextReqTimeout = 0;
            this.nextReq = 0;
            /* if(!this.isOnline) {
              return;
            } */
            this.performScheduledRequest();
        };
        this.nextReq = nextReq;
        if (delay) {
            this.nextReqTimeout = self.setTimeout(cb, delay);
        }
        else {
            cb();
        }
    }
    ackMessage(msgId) {
        // this.log('ack message', msgID)
        this.pendingAcks.push(msgId);
        this.scheduleRequest();
    }
    reqResendMessage(msgId) {
        if (this.debug) {
            this.log.debug('Req resend', msgId);
        }
        this.pendingResends.push(msgId);
        this.scheduleRequest(100);
    }
    cleanupSent() {
        let notEmpty = false;
        // this.log('clean start', this.dcId/*, this.sentMessages*/)
        Object.keys(this.sentMessages).forEach((msgId) => {
            const message = this.sentMessages[msgId];
            // this.log('clean iter', msgID, message)
            if (message.notContentRelated && this.pendingMessages[msgId] === undefined) {
                // this.log('clean notContentRelated', msgID)
                delete this.sentMessages[msgId];
            }
            else if (message.container) {
                for (const innerMsgId of message.inner) {
                    if (this.sentMessages[innerMsgId] !== undefined) {
                        // this.log('clean failed, found', msgID, message.inner[i], this.sentMessages[message.inner[i]].seq_no)
                        notEmpty = true;
                        return;
                    }
                }
                // this.log('clean container', msgID)
                delete this.sentMessages[msgId];
            }
            else {
                notEmpty = true;
            }
        });
        return !notEmpty;
    }
    processMessageAck(messageId) {
        const sentMessage = this.sentMessages[messageId];
        if (sentMessage && !sentMessage.acked) {
            //delete sentMessage.body;
            sentMessage.acked = true;
        }
    }
    processError(rawError) {
        const matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\b)(: (.+))?/) || [];
        rawError.error_code = rawError.error_code;
        return {
            code: !rawError.error_code || rawError.error_code <= 0 ? 500 : rawError.error_code,
            type: matches[1] || 'UNKNOWN',
            description: matches[3] || ('CODE#' + rawError.error_code + ' ' + rawError.error_message),
            originalError: rawError
        };
    }
    /**
     * * только для сокета
     * TODO: consider about containers resend
     */
    resend() {
        for (const id in this.sentMessages) {
            const msg = this.sentMessages[id];
            if (msg.body || msg.container) {
                this.pushResend(id);
            }
        }
    }
    /* public requestMessageStatus() {
      const ids: string[] = [];
      for(const id in this.sentMessages) {
        const message = this.sentMessages[id];
        if(message.isAPI && message.fileUpload) {
          ids.push(message.msg_id);
        }
      }
  
      this.wrapMtpMessage({
        _: 'msgs_state_req',
        msg_ids: ids
      }, {
        notContentRelated: true
      }).then(res => {
        this.log('status', res);
      });
    } */
    // * https://core.telegram.org/mtproto/service_messages_about_messages#notice-of-ignored-error-message
    processMessage(message, messageId, sessionId) {
        if (message._ === 'messageEmpty') {
            this.log.warn('processMessage: messageEmpty', message, messageId);
            return;
        }
        // messageId = messageId.toString();
        const msgidInt = parseInt(messageId.substr(0, -10), 10);
        if (msgidInt % 2) {
            this.log.warn('Server even message id: ', messageId, message);
            return;
        }
        /* if(this.debug) {
          this.log('process message', message, messageId, sessionId);
        } */
        switch (message._) {
            case 'msg_container': {
                for (const innerMessage of message.messages) {
                    this.processMessage(innerMessage, innerMessage.msg_id, sessionId);
                }
                break;
            }
            case 'bad_server_salt': {
                this.log('Bad server salt', message);
                this.applyServerSalt(message.new_server_salt);
                if (this.sentMessages[message.bad_msg_id]) {
                    this.pushResend(message.bad_msg_id);
                }
                this.ackMessage(messageId);
                // simulate disconnect
                /* try {
                  this.log('networker state:', this);
                  // @ts-ignore
                  this.transport.ws.close(1000);
                } catch(err) {
                  this.log.error('transport', this.transport, err);
                } */
                break;
            }
            case 'bad_msg_notification': {
                this.log.error('Bad msg notification', message);
                switch (message.error_code) {
                    case 16: // * msg_id too low
                    case 17: // * msg_id too high
                    case 32: // * msg_seqno too low
                    case 33: // * msg_seqno too high
                    case 64: { // * invalid container
                        //const changedOffset = timeManager.applyServerTime(bigStringInt(messageId).shiftRight(32).toString(10));
                        const bigInt = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_15__["str2bigInt"])(messageId, 10);
                        Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_15__["rightShift_"])(bigInt, 32);
                        const changedOffset = _timeManager__WEBPACK_IMPORTED_MODULE_5__["default"].applyServerTime(+Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_15__["bigInt2str"])(bigInt, 10));
                        if (message.error_code === 17 || changedOffset) {
                            this.log('Update session');
                            this.updateSession();
                        }
                        const badMessage = this.updateSentMessage(message.bad_msg_id);
                        if (badMessage)
                            this.pushResend(badMessage.msg_id); // fix 23.01.2020
                        //this.ackMessage(messageId);
                    }
                    // * invalid container
                    /* case 64: {
                      const badMessage = this.sentMessages[message.bad_msg_id];
                      if(badMessage) {
                        for(const msgId of badMessage.inner) {
                          if(this.sentMessages[msgId] !== undefined) {
                            this.updateSentMessage
                          }
                        }
                        const inner = badMessage.inner;
                      }
                    } */
                }
                break;
            }
            case 'message': {
                if (this.lastServerMessages.indexOf(messageId) !== -1) {
                    // console.warn('[MT] Server same messageId: ', messageId)
                    this.ackMessage(messageId);
                    return;
                }
                this.lastServerMessages.push(messageId);
                if (this.lastServerMessages.length > 100) {
                    this.lastServerMessages.shift();
                }
                this.processMessage(message.body, message.msg_id, sessionId);
                break;
            }
            case 'new_session_created': {
                this.ackMessage(messageId);
                if (this.debug) {
                    this.log.debug('new_session_created', message);
                }
                //this.updateSession();
                this.processMessageAck(message.first_msg_id);
                this.applyServerSalt(message.server_salt);
                _sessionStorage__WEBPACK_IMPORTED_MODULE_3__["default"].get('dc').then((baseDcId) => {
                    if (baseDcId === this.dcId && !this.isFileNetworker && _networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].updatesProcessor) {
                        _networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].updatesProcessor(message);
                    }
                });
                break;
            }
            case 'msgs_ack': {
                for (const msgId of message.msg_ids) {
                    this.processMessageAck(msgId);
                }
                break;
            }
            case 'msg_detailed_info':
                if (!this.sentMessages[message.msg_id]) {
                    this.ackMessage(message.answer_msg_id);
                    break;
                }
            case 'msg_new_detailed_info':
                if (this.pendingAcks.indexOf(message.answer_msg_id)) {
                    break;
                }
                this.reqResendMessage(message.answer_msg_id);
                break;
            case 'msgs_state_info': {
                this.ackMessage(message.answer_msg_id);
                if (this.lastResendReq &&
                    this.lastResendReq.req_msg_id === message.req_msg_id &&
                    this.pendingResends.length) {
                    for (const badMsgId of this.lastResendReq.resend_msg_ids) {
                        const pos = this.pendingResends.indexOf(badMsgId);
                        if (pos !== -1) {
                            this.pendingResends.splice(pos, 1);
                        }
                    }
                }
                break;
            }
            case 'rpc_result': {
                this.ackMessage(messageId);
                const sentMessageId = message.req_msg_id;
                const sentMessage = this.sentMessages[sentMessageId];
                this.processMessageAck(sentMessageId);
                if (sentMessage) {
                    const deferred = sentMessage.deferred;
                    if (message.result._ === 'rpc_error') {
                        const error = this.processError(message.result);
                        this.log('Rpc error', error);
                        if (deferred) {
                            deferred.reject(error);
                        }
                    }
                    else {
                        if (deferred) {
                            /* if(DEBUG) {
                              this.log.debug('Rpc response', message.result, sentMessage);
                            } */
                            deferred.resolve(message.result);
                        }
                        if (sentMessage.isAPI && !this.connectionInited) {
                            this.connectionInited = true;
                            ////this.log('Rpc set connectionInited to:', this.connectionInited);
                        }
                    }
                    delete this.sentMessages[sentMessageId];
                }
                else {
                    if (this.debug) {
                        this.log('Rpc result for unknown message:', sentMessageId, message);
                    }
                }
                break;
            }
            case 'pong': { // * https://core.telegram.org/mtproto/service_messages#ping-messages-pingpong - These messages doesn't require acknowledgments
                if (this.transport.networker) {
                    const sentMessageId = message.msg_id;
                    const sentMessage = this.sentMessages[sentMessageId];
                    if (sentMessage) {
                        sentMessage.deferred.resolve(message);
                        delete this.sentMessages[sentMessageId];
                    }
                }
                break;
            }
            default:
                this.ackMessage(messageId);
                /* if(this.debug) {
                  this.log.debug('Update', message);
                } */
                if (_networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].updatesProcessor !== null) {
                    _networkerFactory__WEBPACK_IMPORTED_MODULE_6__["default"].updatesProcessor(message);
                }
                break;
        }
    }
}


/***/ }),

/***/ "./src/lib/mtproto/networkerFactory.ts":
/*!*********************************************!*\
  !*** ./src/lib/mtproto/networkerFactory.ts ***!
  \*********************************************/
/*! exports provided: NetworkerFactory, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkerFactory", function() { return NetworkerFactory; });
/* harmony import */ var _networker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./networker */ "./src/lib/mtproto/networker.ts");
/* harmony import */ var _config_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/app */ "./src/config/app.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */



class NetworkerFactory {
    constructor() {
        this.networkers = [];
        this.language = navigator.language || _config_app__WEBPACK_IMPORTED_MODULE_1__["default"].langPackCode;
        this.updatesProcessor = null;
        this.onConnectionStatusChange = null;
        this.akStopped = false;
        this.userAgent = navigator.userAgent;
    }
    removeNetworker(networker) {
        const idx = this.networkers.indexOf(networker);
        if (idx !== -1) {
            this.networkers.splice(idx, 1);
        }
    }
    setUpdatesProcessor(callback) {
        this.updatesProcessor = callback;
    }
    getNetworker(dcId, authKey, authKeyId, serverSalt, transport, options) {
        //console.log('NetworkerFactory: creating new instance of MTPNetworker:', dcId, options);
        const networker = new _networker__WEBPACK_IMPORTED_MODULE_0__["default"](dcId, authKey, authKeyId, serverSalt, transport, options);
        this.networkers.push(networker);
        return networker;
    }
    startAll() {
        if (this.akStopped) {
            const stoppedNetworkers = this.networkers.filter(networker => networker.isStopped());
            this.akStopped = false;
            this.updatesProcessor && this.updatesProcessor({ _: 'new_session_created' });
            for (const networker of stoppedNetworkers) {
                networker.scheduleRequest();
            }
        }
    }
    stopAll() {
        this.akStopped = true;
    }
    setLanguage(langCode) {
        this.language = langCode;
        for (const networker of this.networkers) {
            if (!networker.isFileNetworker) {
                networker.connectionInited = false;
            }
        }
    }
    forceReconnectTimeout() {
        for (const networker of this.networkers) {
            networker.forceReconnectTimeout();
        }
    }
    forceReconnect() {
        for (const networker of this.networkers) {
            if (!networker.isFileNetworker) {
                networker.forceReconnect();
                break;
            }
        }
    }
}
const networkerFactory = new NetworkerFactory();
_config_debug__WEBPACK_IMPORTED_MODULE_2__["MOUNT_CLASS_TO"] && (_config_debug__WEBPACK_IMPORTED_MODULE_2__["MOUNT_CLASS_TO"].networkerFactory = networkerFactory);
/* harmony default export */ __webpack_exports__["default"] = (networkerFactory);


/***/ }),

/***/ "./src/lib/mtproto/rsaKeysManager.ts":
/*!*******************************************!*\
  !*** ./src/lib/mtproto/rsaKeysManager.ts ***!
  \*******************************************/
/*! exports provided: RSAKeysManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSAKeysManager", function() { return RSAKeysManager; });
/* harmony import */ var _tl_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl_utils */ "./src/lib/mtproto/tl_utils.ts");
/* harmony import */ var _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/cryptoworker */ "./src/lib/crypto/cryptoworker.ts");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config/modes */ "./src/config/modes.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RSAKeysManager {
    constructor() {
        /**
         *  Server public key, obtained from here: https://core.telegram.org/api/obtaining_api_id
         *
         *
         *  -----BEGIN RSA PUBLIC KEY-----
         *  MIIBCgKCAQEA6LszBcC1LGzyr992NzE0ieY+BSaOW622Aa9Bd4ZHLl+TuFQ4lo4g
         *  5nKaMBwK/BIb9xUfg0Q29/2mgIR6Zr9krM7HjuIcCzFvDtr+L0GQjae9H0pRB2OO
         *  62cECs5HKhT5DZ98K33vmWiLowc621dQuwKWSQKjWf50XYFw42h21P2KXUGyp2y/
         *  +aEyZ+uVgLLQbRA1dEjSDZ2iGRy12Mk5gpYc397aYp438fsJoHIgJ2lgMv5h7WY9
         *  t6N/byY9Nw9p21Og3AoXSL2q/2IJ1WRUhebgAdGVMlV1fkuOQoEzR7EdpqtQD9Cs
         *  5+bfo3Nhmcyvk5ftB0WkJ9z6bNZ7yxrP8wIDAQAB
         *  -----END RSA PUBLIC KEY-----
         *
         *  -----BEGIN RSA PUBLIC KEY-----
         *  MIIBCgKCAQEBadMIUYSKhyznMh+Pg+OxTLyDZrWEjQIPZC3oJCtuZX7qUxgcWqFX
         *  Q1952TSY8S8NYuz12sK9Fvp+lil1hIG0U/cuPsK08VB1hB4VA+p0S46fGwVsRovq
         *  4qUiUIzQSjSHDASuXTOinlYEHwmg/GaLc5G7qhePWa0p9YmqYR5Ha3xHJywcXZrn
         *  yE3nC9igL96Aanqv+Prbu1N+r9vAgZeHh9cfbtbV8WWwruOANOTEv2ctQLR0dfr9
         *  MwQXNePTPQlYsO9HNIGS1LWe7hZFtGBAVJH92F7Kig68WqHM3PIZ6Sq7N0VSzfzL
         *  b11Z/YHz2UXYtXADwL/m5pTpKBUtJBXkOQIDAQAB
         *  -----END RSA PUBLIC KEY-----
         *
         * Bytes can be got via
         * $ openssl rsa -in rsa.pem -RSAPublicKey_in -pubout > pub.pem
         * $ openssl rsa -pubin -in pub.pem -text -noout
         */
        /* private publisKeysHex = [{
          modulus: 'c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f',
          exponent: '010001'
        }, {
          modulus: 'aeec36c8ffc109cb099624685b97815415657bd76d8c9c3e398103d7ad16c9bba6f525ed0412d7ae2c2de2b44e77d72cbf4b7438709a4e646a05c43427c7f184debf72947519680e651500890c6832796dd11f772c25ff8f576755afe055b0a3752c696eb7d8da0d8be1faf38c9bdd97ce0a77d3916230c4032167100edd0f9e7a3a9b602d04367b689536af0d64b613ccba7962939d3b57682beb6dae5b608130b2e52aca78ba023cf6ce806b1dc49c72cf928a7199d22e3d7ac84e47bc9427d0236945d10dbd15177bab413fbf0edfda09f014c7a7da088dde9759702ca760af2b8e4e97cc055c617bd74c3d97008635b98dc4d621b4891da9fb0473047927',
          exponent: '010001'
        }, {
          modulus: 'bdf2c77d81f6afd47bd30f29ac76e55adfe70e487e5e48297e5a9055c9c07d2b93b4ed3994d3eca5098bf18d978d54f8b7c713eb10247607e69af9ef44f38e28f8b439f257a11572945cc0406fe3f37bb92b79112db69eedf2dc71584a661638ea5becb9e23585074b80d57d9f5710dd30d2da940e0ada2f1b878397dc1a72b5ce2531b6f7dd158e09c828d03450ca0ff8a174deacebcaa22dde84ef66ad370f259d18af806638012da0ca4a70baa83d9c158f3552bc9158e69bf332a45809e1c36905a5caa12348dd57941a482131be7b2355a5f4635374f3bd3ddf5ff925bf4809ee27c1e67d9120c5fe08a9de458b1b4a3c5d0a428437f2beca81f4e2d5ff',
          exponent: '010001'
        }, {
          modulus: 'b3f762b739be98f343eb1921cf0148cfa27ff7af02b6471213fed9daa0098976e667750324f1abcea4c31e43b7d11f1579133f2b3d9fe27474e462058884e5e1b123be9cbbc6a443b2925c08520e7325e6f1a6d50e117eb61ea49d2534c8bb4d2ae4153fabe832b9edf4c5755fdd8b19940b81d1d96cf433d19e6a22968a85dc80f0312f596bd2530c1cfb28b5fe019ac9bc25cd9c2a5d8a0f3a1c0c79bcca524d315b5e21b5c26b46babe3d75d06d1cd33329ec782a0f22891ed1db42a1d6c0dea431428bc4d7aabdcf3e0eb6fda4e23eb7733e7727e9a1915580796c55188d2596d2665ad1182ba7abf15aaa5a8b779ea996317a20ae044b820bff35b6e8a1',
          exponent: '010001'
        }, {
          modulus: 'be6a71558ee577ff03023cfa17aab4e6c86383cff8a7ad38edb9fafe6f323f2d5106cbc8cafb83b869cffd1ccf121cd743d509e589e68765c96601e813dc5b9dfc4be415c7a6526132d0035ca33d6d6075d4f535122a1cdfe017041f1088d1419f65c8e5490ee613e16dbf662698c0f54870f0475fa893fc41eb55b08ff1ac211bc045ded31be27d12c96d8d3cfc6a7ae8aa50bf2ee0f30ed507cc2581e3dec56de94f5dc0a7abee0be990b893f2887bd2c6310a1e0a9e3e38bd34fded2541508dc102a9c9b4c95effd9dd2dfe96c29be647d6c69d66ca500843cfaed6e440196f1dbe0e2e22163c61ca48c79116fa77216726749a976a1c4b0944b5121e8c01',
          exponent: '010001'
        }]; */
        this.testPublicKeysHex = [{
                modulus: 'c8c11d635691fac091dd9489aedced2932aa8a0bcefef05fa800892d9b52ed03200865c9e97211cb2ee6c7ae96d3fb0e15aeffd66019b44a08a240cfdd2868a85e1f54d6fa5deaa041f6941ddf302690d61dc476385c2fa655142353cb4e4b59f6e5b6584db76fe8b1370263246c010c93d011014113ebdf987d093f9d37c2be48352d69a1683f8f6e6c2167983c761e3ab169fde5daaa12123fa1beab621e4da5935e9c198f82f35eae583a99386d8110ea6bd1abb0f568759f62694419ea5f69847c43462abef858b4cb5edc84e7b9226cd7bd7e183aa974a712c079dde85b9dc063b8a5c08e8f859c0ee5dcd824c7807f20153361a7f63cfd2a433a1be7f5',
                exponent: '010001'
            }];
        this.publisKeysHex = [{
                // modulus: '00e8bb3305c0b52c6cf2afdf7637313489e63e05268e5badb601af417786472e5f93b85438968e20e6729a301c0afc121bf7151f834436f7fda680847a66bf64accec78ee21c0b316f0edafe2f41908da7bd1f4a5107638eeb67040ace472a14f90d9f7c2b7def99688ba3073adb5750bb02964902a359fe745d8170e36876d4fd8a5d41b2a76cbff9a13267eb9580b2d06d10357448d20d9da2191cb5d8c93982961cdfdeda629e37f1fb09a0722027696032fe61ed663db7a37f6f263d370f69db53a0dc0a1748bdaaff6209d5645485e6e001d1953255757e4b8e42813347b11da6ab500fd0ace7e6dfa3736199ccaf9397ed0745a427dcfa6cd67bcb1acff3',
                modulus: 'e8bb3305c0b52c6cf2afdf7637313489e63e05268e5badb601af417786472e5f93b85438968e20e6729a301c0afc121bf7151f834436f7fda680847a66bf64accec78ee21c0b316f0edafe2f41908da7bd1f4a5107638eeb67040ace472a14f90d9f7c2b7def99688ba3073adb5750bb02964902a359fe745d8170e36876d4fd8a5d41b2a76cbff9a13267eb9580b2d06d10357448d20d9da2191cb5d8c93982961cdfdeda629e37f1fb09a0722027696032fe61ed663db7a37f6f263d370f69db53a0dc0a1748bdaaff6209d5645485e6e001d1953255757e4b8e42813347b11da6ab500fd0ace7e6dfa3736199ccaf9397ed0745a427dcfa6cd67bcb1acff3',
                exponent: '010001'
            }];
        this.publicKeysParsed = {};
        this.prepared = false;
        this.preparePromise = null;
        if (_config_modes__WEBPACK_IMPORTED_MODULE_4__["default"].test) {
            this.publisKeysHex = this.testPublicKeysHex;
        }
    }
    prepare() {
        if (this.preparePromise)
            return this.preparePromise;
        else if (this.prepared) {
            return Promise.resolve();
        }
        return this.preparePromise = Promise.all(this.publisKeysHex.map(keyParsed => {
            const RSAPublicKey = new _tl_utils__WEBPACK_IMPORTED_MODULE_0__["TLSerialization"]();
            RSAPublicKey.storeBytes(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_2__["bytesFromHex"])(keyParsed.modulus), 'n');
            RSAPublicKey.storeBytes(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_2__["bytesFromHex"])(keyParsed.exponent), 'e');
            const buffer = RSAPublicKey.getBuffer();
            return _crypto_cryptoworker__WEBPACK_IMPORTED_MODULE_1__["default"].invokeCrypto('sha1-hash', buffer).then(bytes => {
                const fingerprintBytes = bytes.slice(-8);
                fingerprintBytes.reverse();
                this.publicKeysParsed[Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_2__["bytesToHex"])(fingerprintBytes).toLowerCase()] = {
                    modulus: keyParsed.modulus,
                    exponent: keyParsed.exponent
                };
            });
        })).then(() => {
            this.prepared = true;
            //console.log('[MT] Prepared keys');
            this.preparePromise = null;
        });
    }
    select(fingerprints) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.prepare();
            for (let i = 0; i < fingerprints.length; ++i) {
                //fingerprintHex = bigStringInt(fingerprints[i]).toString(16);
                let fingerprintHex = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["bigInt2str"])(Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["str2bigInt"])(fingerprints[i], 10), 16).toLowerCase();
                if (fingerprintHex.length < 16) {
                    fingerprintHex = new Array(16 - fingerprintHex.length).fill('0').join('') + fingerprintHex;
                }
                //console.log(fingerprintHex, this.publicKeysParsed);
                const foundKey = this.publicKeysParsed[fingerprintHex];
                if (foundKey) {
                    return Object.assign({
                        fingerprint: fingerprints[i]
                    }, foundKey);
                }
            }
        });
    }
}
/* harmony default export */ __webpack_exports__["default"] = (new RSAKeysManager());


/***/ }),

/***/ "./src/lib/mtproto/schema.ts":
/*!***********************************!*\
  !*** ./src/lib/mtproto/schema.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
/* harmony default export */ __webpack_exports__["default"] = ({ "MTProto": { "constructors": [{ "id": 481674261, "predicate": "vector", "params": [], "type": "Vector t" }, { "id": 85337187, "predicate": "resPQ", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "pq", "type": "bytes" }, { "name": "server_public_key_fingerprints", "type": "Vector<long>" }], "type": "ResPQ" }, { "id": -1443537003, "predicate": "p_q_inner_data_dc", "params": [{ "name": "pq", "type": "bytes" }, { "name": "p", "type": "bytes" }, { "name": "q", "type": "bytes" }, { "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "new_nonce", "type": "int256" }, { "name": "dc", "type": "int" }], "type": "P_Q_inner_data" }, { "id": 1459478408, "predicate": "p_q_inner_data_temp_dc", "params": [{ "name": "pq", "type": "bytes" }, { "name": "p", "type": "bytes" }, { "name": "q", "type": "bytes" }, { "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "new_nonce", "type": "int256" }, { "name": "dc", "type": "int" }, { "name": "expires_in", "type": "int" }], "type": "P_Q_inner_data" }, { "id": -790100132, "predicate": "server_DH_params_ok", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "encrypted_answer", "type": "bytes" }], "type": "Server_DH_Params" }, { "id": -1249309254, "predicate": "server_DH_inner_data", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "g", "type": "int" }, { "name": "dh_prime", "type": "bytes" }, { "name": "g_a", "type": "bytes" }, { "name": "server_time", "type": "int" }], "type": "Server_DH_inner_data" }, { "id": 1715713620, "predicate": "client_DH_inner_data", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "retry_id", "type": "long" }, { "name": "g_b", "type": "bytes" }], "type": "Client_DH_Inner_Data" }, { "id": 1003222836, "predicate": "dh_gen_ok", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "new_nonce_hash1", "type": "int128" }], "type": "Set_client_DH_params_answer" }, { "id": 1188831161, "predicate": "dh_gen_retry", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "new_nonce_hash2", "type": "int128" }], "type": "Set_client_DH_params_answer" }, { "id": -1499615742, "predicate": "dh_gen_fail", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "new_nonce_hash3", "type": "int128" }], "type": "Set_client_DH_params_answer" }, { "id": 1973679973, "predicate": "bind_auth_key_inner", "params": [{ "name": "nonce", "type": "long" }, { "name": "temp_auth_key_id", "type": "long" }, { "name": "perm_auth_key_id", "type": "long" }, { "name": "temp_session_id", "type": "long" }, { "name": "expires_at", "type": "int" }], "type": "BindAuthKeyInner" }, { "id": -212046591, "predicate": "rpc_result", "params": [{ "name": "req_msg_id", "type": "long" }, { "name": "result", "type": "Object" }], "type": "RpcResult" }, { "id": 558156313, "predicate": "rpc_error", "params": [{ "name": "error_code", "type": "int" }, { "name": "error_message", "type": "string" }], "type": "RpcError" }, { "id": 1579864942, "predicate": "rpc_answer_unknown", "params": [], "type": "RpcDropAnswer" }, { "id": -847714938, "predicate": "rpc_answer_dropped_running", "params": [], "type": "RpcDropAnswer" }, { "id": -1539647305, "predicate": "rpc_answer_dropped", "params": [{ "name": "msg_id", "type": "long" }, { "name": "seq_no", "type": "int" }, { "name": "bytes", "type": "int" }], "type": "RpcDropAnswer" }, { "id": 155834844, "predicate": "future_salt", "params": [{ "name": "valid_since", "type": "int" }, { "name": "valid_until", "type": "int" }, { "name": "salt", "type": "long" }], "type": "FutureSalt" }, { "id": -1370486635, "predicate": "future_salts", "params": [{ "name": "req_msg_id", "type": "long" }, { "name": "now", "type": "int" }, { "name": "salts", "type": "vector<future_salt>" }], "type": "FutureSalts" }, { "id": 880243653, "predicate": "pong", "params": [{ "name": "msg_id", "type": "long" }, { "name": "ping_id", "type": "long" }], "type": "Pong" }, { "id": -501201412, "predicate": "destroy_session_ok", "params": [{ "name": "session_id", "type": "long" }], "type": "DestroySessionRes" }, { "id": 1658015945, "predicate": "destroy_session_none", "params": [{ "name": "session_id", "type": "long" }], "type": "DestroySessionRes" }, { "id": -1631450872, "predicate": "new_session_created", "params": [{ "name": "first_msg_id", "type": "long" }, { "name": "unique_id", "type": "long" }, { "name": "server_salt", "type": "long" }], "type": "NewSession" }, { "id": 1945237724, "predicate": "msg_container", "params": [{ "name": "messages", "type": "vector<%Message>" }], "type": "MessageContainer" }, { "id": 1538843921, "predicate": "message", "params": [{ "name": "msg_id", "type": "long" }, { "name": "seqno", "type": "int" }, { "name": "bytes", "type": "int" }, { "name": "body", "type": "Object" }], "type": "Message" }, { "id": -530561358, "predicate": "msg_copy", "params": [{ "name": "orig_message", "type": "Message" }], "type": "MessageCopy" }, { "id": 812830625, "predicate": "gzip_packed", "params": [{ "name": "packed_data", "type": "bytes" }], "type": "Object" }, { "id": 1658238041, "predicate": "msgs_ack", "params": [{ "name": "msg_ids", "type": "Vector<long>" }], "type": "MsgsAck" }, { "id": -1477445615, "predicate": "bad_msg_notification", "params": [{ "name": "bad_msg_id", "type": "long" }, { "name": "bad_msg_seqno", "type": "int" }, { "name": "error_code", "type": "int" }], "type": "BadMsgNotification" }, { "id": -307542917, "predicate": "bad_server_salt", "params": [{ "name": "bad_msg_id", "type": "long" }, { "name": "bad_msg_seqno", "type": "int" }, { "name": "error_code", "type": "int" }, { "name": "new_server_salt", "type": "long" }], "type": "BadMsgNotification" }, { "id": 2105940488, "predicate": "msg_resend_req", "params": [{ "name": "msg_ids", "type": "Vector<long>" }], "type": "MsgResendReq" }, { "id": -630588590, "predicate": "msgs_state_req", "params": [{ "name": "msg_ids", "type": "Vector<long>" }], "type": "MsgsStateReq" }, { "id": 81704317, "predicate": "msgs_state_info", "params": [{ "name": "req_msg_id", "type": "long" }, { "name": "info", "type": "bytes" }], "type": "MsgsStateInfo" }, { "id": -1933520591, "predicate": "msgs_all_info", "params": [{ "name": "msg_ids", "type": "Vector<long>" }, { "name": "info", "type": "bytes" }], "type": "MsgsAllInfo" }, { "id": 661470918, "predicate": "msg_detailed_info", "params": [{ "name": "msg_id", "type": "long" }, { "name": "answer_msg_id", "type": "long" }, { "name": "bytes", "type": "int" }, { "name": "status", "type": "int" }], "type": "MsgDetailedInfo" }, { "id": -2137147681, "predicate": "msg_new_detailed_info", "params": [{ "name": "answer_msg_id", "type": "long" }, { "name": "bytes", "type": "int" }, { "name": "status", "type": "int" }], "type": "MsgDetailedInfo" }, { "id": -161422892, "predicate": "destroy_auth_key_ok", "params": [], "type": "DestroyAuthKeyRes" }, { "id": 178201177, "predicate": "destroy_auth_key_none", "params": [], "type": "DestroyAuthKeyRes" }, { "id": -368010477, "predicate": "destroy_auth_key_fail", "params": [], "type": "DestroyAuthKeyRes" }], "methods": [{ "id": -1099002127, "method": "req_pq_multi", "params": [{ "name": "nonce", "type": "int128" }], "type": "ResPQ" }, { "id": -686627650, "method": "req_DH_params", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "p", "type": "bytes" }, { "name": "q", "type": "bytes" }, { "name": "public_key_fingerprint", "type": "long" }, { "name": "encrypted_data", "type": "bytes" }], "type": "Server_DH_Params" }, { "id": -184262881, "method": "set_client_DH_params", "params": [{ "name": "nonce", "type": "int128" }, { "name": "server_nonce", "type": "int128" }, { "name": "encrypted_data", "type": "bytes" }], "type": "Set_client_DH_params_answer" }, { "id": 1491380032, "method": "rpc_drop_answer", "params": [{ "name": "req_msg_id", "type": "long" }], "type": "RpcDropAnswer" }, { "id": -1188971260, "method": "get_future_salts", "params": [{ "name": "num", "type": "int" }], "type": "FutureSalts" }, { "id": 2059302892, "method": "ping", "params": [{ "name": "ping_id", "type": "long" }], "type": "Pong" }, { "id": -213746804, "method": "ping_delay_disconnect", "params": [{ "name": "ping_id", "type": "long" }, { "name": "disconnect_delay", "type": "int" }], "type": "Pong" }, { "id": -414113498, "method": "destroy_session", "params": [{ "name": "session_id", "type": "long" }], "type": "DestroySessionRes" }, { "id": -1835453025, "method": "http_wait", "params": [{ "name": "max_delay", "type": "int" }, { "name": "wait_after", "type": "int" }, { "name": "max_wait", "type": "int" }], "type": "HttpWait" }, { "id": -784117408, "method": "destroy_auth_key", "params": [], "type": "DestroyAuthKeyRes" }] }, "API": { "constructors": [{ "id": -1132882121, "predicate": "boolFalse", "params": [], "type": "Bool" }, { "id": -1720552011, "predicate": "boolTrue", "params": [], "type": "Bool" }, { "id": 1072550713, "predicate": "true", "params": [], "type": "True" }, { "id": 481674261, "predicate": "vector", "params": [], "type": "Vector t" }, { "id": -994444869, "predicate": "error", "params": [{ "name": "code", "type": "int" }, { "name": "text", "type": "string" }], "type": "Error" }, { "id": 1450380236, "predicate": "null", "params": [], "type": "Null" }, { "id": 2134579434, "predicate": "inputPeerEmpty", "params": [], "type": "InputPeer" }, { "id": 2107670217, "predicate": "inputPeerSelf", "params": [], "type": "InputPeer" }, { "id": 900291769, "predicate": "inputPeerChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "InputPeer" }, { "id": -571955892, "predicate": "inputPeerUser", "params": [{ "name": "user_id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputPeer" }, { "id": 666680316, "predicate": "inputPeerChannel", "params": [{ "name": "channel_id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputPeer" }, { "id": -1468331492, "predicate": "inputPeerUserFromMessage", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "user_id", "type": "long" }], "type": "InputPeer" }, { "id": -1121318848, "predicate": "inputPeerChannelFromMessage", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "channel_id", "type": "long" }], "type": "InputPeer" }, { "id": -1182234929, "predicate": "inputUserEmpty", "params": [], "type": "InputUser" }, { "id": -138301121, "predicate": "inputUserSelf", "params": [], "type": "InputUser" }, { "id": -233744186, "predicate": "inputUser", "params": [{ "name": "user_id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputUser" }, { "id": 497305826, "predicate": "inputUserFromMessage", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "user_id", "type": "long" }], "type": "InputUser" }, { "id": -208488460, "predicate": "inputPhoneContact", "params": [{ "name": "client_id", "type": "long" }, { "name": "phone", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }], "type": "InputContact" }, { "id": -181407105, "predicate": "inputFile", "params": [{ "name": "id", "type": "long" }, { "name": "parts", "type": "int" }, { "name": "name", "type": "string" }, { "name": "md5_checksum", "type": "string" }], "type": "InputFile" }, { "id": -95482955, "predicate": "inputFileBig", "params": [{ "name": "id", "type": "long" }, { "name": "parts", "type": "int" }, { "name": "name", "type": "string" }], "type": "InputFile" }, { "id": -1771768449, "predicate": "inputMediaEmpty", "params": [], "type": "InputMedia" }, { "id": 505969924, "predicate": "inputMediaUploadedPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "file", "type": "InputFile" }, { "name": "stickers", "type": "flags.0?Vector<InputDocument>" }, { "name": "ttl_seconds", "type": "flags.1?int" }], "type": "InputMedia" }, { "id": -1279654347, "predicate": "inputMediaPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "InputPhoto" }, { "name": "ttl_seconds", "type": "flags.0?int" }], "type": "InputMedia" }, { "id": -104578748, "predicate": "inputMediaGeoPoint", "params": [{ "name": "geo_point", "type": "InputGeoPoint" }], "type": "InputMedia" }, { "id": -122978821, "predicate": "inputMediaContact", "params": [{ "name": "phone_number", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "vcard", "type": "string" }], "type": "InputMedia" }, { "id": 1530447553, "predicate": "inputMediaUploadedDocument", "params": [{ "name": "flags", "type": "#" }, { "name": "nosound_video", "type": "flags.3?true" }, { "name": "force_file", "type": "flags.4?true" }, { "name": "file", "type": "InputFile" }, { "name": "thumb", "type": "flags.2?InputFile" }, { "name": "mime_type", "type": "string" }, { "name": "attributes", "type": "Vector<DocumentAttribute>" }, { "name": "stickers", "type": "flags.0?Vector<InputDocument>" }, { "name": "ttl_seconds", "type": "flags.1?int" }], "type": "InputMedia" }, { "id": 860303448, "predicate": "inputMediaDocument", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "InputDocument" }, { "name": "ttl_seconds", "type": "flags.0?int" }, { "name": "query", "type": "flags.1?string" }], "type": "InputMedia" }, { "id": -1052959727, "predicate": "inputMediaVenue", "params": [{ "name": "geo_point", "type": "InputGeoPoint" }, { "name": "title", "type": "string" }, { "name": "address", "type": "string" }, { "name": "provider", "type": "string" }, { "name": "venue_id", "type": "string" }, { "name": "venue_type", "type": "string" }], "type": "InputMedia" }, { "id": -440664550, "predicate": "inputMediaPhotoExternal", "params": [{ "name": "flags", "type": "#" }, { "name": "url", "type": "string" }, { "name": "ttl_seconds", "type": "flags.0?int" }], "type": "InputMedia" }, { "id": -78455655, "predicate": "inputMediaDocumentExternal", "params": [{ "name": "flags", "type": "#" }, { "name": "url", "type": "string" }, { "name": "ttl_seconds", "type": "flags.0?int" }], "type": "InputMedia" }, { "id": -750828557, "predicate": "inputMediaGame", "params": [{ "name": "id", "type": "InputGame" }], "type": "InputMedia" }, { "id": -646342540, "predicate": "inputMediaInvoice", "params": [{ "name": "flags", "type": "#" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "flags.0?InputWebDocument" }, { "name": "invoice", "type": "Invoice" }, { "name": "payload", "type": "bytes" }, { "name": "provider", "type": "string" }, { "name": "provider_data", "type": "DataJSON" }, { "name": "start_param", "type": "flags.1?string" }], "type": "InputMedia" }, { "id": -1759532989, "predicate": "inputMediaGeoLive", "params": [{ "name": "flags", "type": "#" }, { "name": "stopped", "type": "flags.0?true" }, { "name": "geo_point", "type": "InputGeoPoint" }, { "name": "heading", "type": "flags.2?int" }, { "name": "period", "type": "flags.1?int" }, { "name": "proximity_notification_radius", "type": "flags.3?int" }], "type": "InputMedia" }, { "id": 261416433, "predicate": "inputMediaPoll", "params": [{ "name": "flags", "type": "#" }, { "name": "poll", "type": "Poll" }, { "name": "correct_answers", "type": "flags.0?Vector<bytes>" }, { "name": "solution", "type": "flags.1?string" }, { "name": "solution_entities", "type": "flags.1?Vector<MessageEntity>" }], "type": "InputMedia" }, { "id": -428884101, "predicate": "inputMediaDice", "params": [{ "name": "emoticon", "type": "string" }], "type": "InputMedia" }, { "id": 480546647, "predicate": "inputChatPhotoEmpty", "params": [], "type": "InputChatPhoto" }, { "id": -968723890, "predicate": "inputChatUploadedPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "file", "type": "flags.0?InputFile" }, { "name": "video", "type": "flags.1?InputFile" }, { "name": "video_start_ts", "type": "flags.2?double" }], "type": "InputChatPhoto" }, { "id": -1991004873, "predicate": "inputChatPhoto", "params": [{ "name": "id", "type": "InputPhoto" }], "type": "InputChatPhoto" }, { "id": -457104426, "predicate": "inputGeoPointEmpty", "params": [], "type": "InputGeoPoint" }, { "id": 1210199983, "predicate": "inputGeoPoint", "params": [{ "name": "flags", "type": "#" }, { "name": "lat", "type": "double" }, { "name": "long", "type": "double" }, { "name": "accuracy_radius", "type": "flags.0?int" }], "type": "InputGeoPoint" }, { "id": 483901197, "predicate": "inputPhotoEmpty", "params": [], "type": "InputPhoto" }, { "id": 1001634122, "predicate": "inputPhoto", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }], "type": "InputPhoto" }, { "id": -539317279, "predicate": "inputFileLocation", "params": [{ "name": "volume_id", "type": "long" }, { "name": "local_id", "type": "int" }, { "name": "secret", "type": "long" }, { "name": "file_reference", "type": "bytes" }], "type": "InputFileLocation" }, { "id": -182231723, "predicate": "inputEncryptedFileLocation", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputFileLocation" }, { "id": -1160743548, "predicate": "inputDocumentFileLocation", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }, { "name": "thumb_size", "type": "string" }], "type": "InputFileLocation" }, { "id": -876089816, "predicate": "inputSecureFileLocation", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputFileLocation" }, { "id": 700340377, "predicate": "inputTakeoutFileLocation", "params": [], "type": "InputFileLocation" }, { "id": 1075322878, "predicate": "inputPhotoFileLocation", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }, { "name": "thumb_size", "type": "string" }], "type": "InputFileLocation" }, { "id": -667654413, "predicate": "inputPhotoLegacyFileLocation", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }, { "name": "volume_id", "type": "long" }, { "name": "local_id", "type": "int" }, { "name": "secret", "type": "long" }], "type": "InputFileLocation" }, { "id": 925204121, "predicate": "inputPeerPhotoFileLocation", "params": [{ "name": "flags", "type": "#" }, { "name": "big", "type": "flags.0?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "photo_id", "type": "long" }], "type": "InputFileLocation" }, { "id": -1652231205, "predicate": "inputStickerSetThumb", "params": [{ "name": "stickerset", "type": "InputStickerSet" }, { "name": "thumb_version", "type": "int" }], "type": "InputFileLocation" }, { "id": 93890858, "predicate": "inputGroupCallStream", "params": [{ "name": "flags", "type": "#" }, { "name": "call", "type": "InputGroupCall" }, { "name": "time_ms", "type": "long" }, { "name": "scale", "type": "int" }, { "name": "video_channel", "type": "flags.0?int" }, { "name": "video_quality", "type": "flags.0?int" }], "type": "InputFileLocation" }, { "id": 1498486562, "predicate": "peerUser", "params": [{ "name": "user_id", "type": "long" }], "type": "Peer" }, { "id": 918946202, "predicate": "peerChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "Peer" }, { "id": -1566230754, "predicate": "peerChannel", "params": [{ "name": "channel_id", "type": "long" }], "type": "Peer" }, { "id": -1432995067, "predicate": "storage.fileUnknown", "params": [], "type": "storage.FileType" }, { "id": 1086091090, "predicate": "storage.filePartial", "params": [], "type": "storage.FileType" }, { "id": 8322574, "predicate": "storage.fileJpeg", "params": [], "type": "storage.FileType" }, { "id": -891180321, "predicate": "storage.fileGif", "params": [], "type": "storage.FileType" }, { "id": 172975040, "predicate": "storage.filePng", "params": [], "type": "storage.FileType" }, { "id": -1373745011, "predicate": "storage.filePdf", "params": [], "type": "storage.FileType" }, { "id": 1384777335, "predicate": "storage.fileMp3", "params": [], "type": "storage.FileType" }, { "id": 1258941372, "predicate": "storage.fileMov", "params": [], "type": "storage.FileType" }, { "id": -1278304028, "predicate": "storage.fileMp4", "params": [], "type": "storage.FileType" }, { "id": 276907596, "predicate": "storage.fileWebp", "params": [], "type": "storage.FileType" }, { "id": -742634630, "predicate": "userEmpty", "params": [{ "name": "id", "type": "long" }], "type": "User" }, { "id": 1073147056, "predicate": "user", "params": [{ "name": "flags", "type": "#" }, { "name": "self", "type": "flags.10?true" }, { "name": "contact", "type": "flags.11?true" }, { "name": "mutual_contact", "type": "flags.12?true" }, { "name": "deleted", "type": "flags.13?true" }, { "name": "bot", "type": "flags.14?true" }, { "name": "bot_chat_history", "type": "flags.15?true" }, { "name": "bot_nochats", "type": "flags.16?true" }, { "name": "verified", "type": "flags.17?true" }, { "name": "restricted", "type": "flags.18?true" }, { "name": "min", "type": "flags.20?true" }, { "name": "bot_inline_geo", "type": "flags.21?true" }, { "name": "support", "type": "flags.23?true" }, { "name": "scam", "type": "flags.24?true" }, { "name": "apply_min_photo", "type": "flags.25?true" }, { "name": "fake", "type": "flags.26?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "flags.0?long" }, { "name": "first_name", "type": "flags.1?string" }, { "name": "last_name", "type": "flags.2?string" }, { "name": "username", "type": "flags.3?string" }, { "name": "phone", "type": "flags.4?string" }, { "name": "photo", "type": "flags.5?UserProfilePhoto" }, { "name": "status", "type": "flags.6?UserStatus" }, { "name": "bot_info_version", "type": "flags.14?int" }, { "name": "restriction_reason", "type": "flags.18?Vector<RestrictionReason>" }, { "name": "bot_inline_placeholder", "type": "flags.19?string" }, { "name": "lang_code", "type": "flags.22?string" }], "type": "User" }, { "id": 1326562017, "predicate": "userProfilePhotoEmpty", "params": [], "type": "UserProfilePhoto" }, { "id": -2100168954, "predicate": "userProfilePhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "has_video", "type": "flags.0?true" }, { "name": "photo_id", "type": "long" }, { "name": "stripped_thumb", "type": "flags.1?bytes" }, { "name": "dc_id", "type": "int" }], "type": "UserProfilePhoto" }, { "id": 164646985, "predicate": "userStatusEmpty", "params": [], "type": "UserStatus" }, { "id": -306628279, "predicate": "userStatusOnline", "params": [{ "name": "expires", "type": "int" }], "type": "UserStatus" }, { "id": 9203775, "predicate": "userStatusOffline", "params": [{ "name": "was_online", "type": "int" }], "type": "UserStatus" }, { "id": -496024847, "predicate": "userStatusRecently", "params": [], "type": "UserStatus" }, { "id": 129960444, "predicate": "userStatusLastWeek", "params": [], "type": "UserStatus" }, { "id": 2011940674, "predicate": "userStatusLastMonth", "params": [], "type": "UserStatus" }, { "id": 693512293, "predicate": "chatEmpty", "params": [{ "name": "id", "type": "long" }], "type": "Chat" }, { "id": 1103884886, "predicate": "chat", "params": [{ "name": "flags", "type": "#" }, { "name": "creator", "type": "flags.0?true" }, { "name": "kicked", "type": "flags.1?true" }, { "name": "left", "type": "flags.2?true" }, { "name": "deactivated", "type": "flags.5?true" }, { "name": "call_active", "type": "flags.23?true" }, { "name": "call_not_empty", "type": "flags.24?true" }, { "name": "id", "type": "long" }, { "name": "title", "type": "string" }, { "name": "photo", "type": "ChatPhoto" }, { "name": "participants_count", "type": "int" }, { "name": "date", "type": "int" }, { "name": "version", "type": "int" }, { "name": "migrated_to", "type": "flags.6?InputChannel" }, { "name": "admin_rights", "type": "flags.14?ChatAdminRights" }, { "name": "default_banned_rights", "type": "flags.18?ChatBannedRights" }], "type": "Chat" }, { "id": 1704108455, "predicate": "chatForbidden", "params": [{ "name": "id", "type": "long" }, { "name": "title", "type": "string" }], "type": "Chat" }, { "id": -2107528095, "predicate": "channel", "params": [{ "name": "flags", "type": "#" }, { "name": "creator", "type": "flags.0?true" }, { "name": "left", "type": "flags.2?true" }, { "name": "broadcast", "type": "flags.5?true" }, { "name": "verified", "type": "flags.7?true" }, { "name": "megagroup", "type": "flags.8?true" }, { "name": "restricted", "type": "flags.9?true" }, { "name": "signatures", "type": "flags.11?true" }, { "name": "min", "type": "flags.12?true" }, { "name": "scam", "type": "flags.19?true" }, { "name": "has_link", "type": "flags.20?true" }, { "name": "has_geo", "type": "flags.21?true" }, { "name": "slowmode_enabled", "type": "flags.22?true" }, { "name": "call_active", "type": "flags.23?true" }, { "name": "call_not_empty", "type": "flags.24?true" }, { "name": "fake", "type": "flags.25?true" }, { "name": "gigagroup", "type": "flags.26?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "flags.13?long" }, { "name": "title", "type": "string" }, { "name": "username", "type": "flags.6?string" }, { "name": "photo", "type": "ChatPhoto" }, { "name": "date", "type": "int" }, { "name": "restriction_reason", "type": "flags.9?Vector<RestrictionReason>" }, { "name": "admin_rights", "type": "flags.14?ChatAdminRights" }, { "name": "banned_rights", "type": "flags.15?ChatBannedRights" }, { "name": "default_banned_rights", "type": "flags.18?ChatBannedRights" }, { "name": "participants_count", "type": "flags.17?int" }], "type": "Chat" }, { "id": 399807445, "predicate": "channelForbidden", "params": [{ "name": "flags", "type": "#" }, { "name": "broadcast", "type": "flags.5?true" }, { "name": "megagroup", "type": "flags.8?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "title", "type": "string" }, { "name": "until_date", "type": "flags.16?int" }], "type": "Chat" }, { "id": 1304281241, "predicate": "chatFull", "params": [{ "name": "flags", "type": "#" }, { "name": "can_set_username", "type": "flags.7?true" }, { "name": "has_scheduled", "type": "flags.8?true" }, { "name": "id", "type": "long" }, { "name": "about", "type": "string" }, { "name": "participants", "type": "ChatParticipants" }, { "name": "chat_photo", "type": "flags.2?Photo" }, { "name": "notify_settings", "type": "PeerNotifySettings" }, { "name": "exported_invite", "type": "flags.13?ExportedChatInvite" }, { "name": "bot_info", "type": "flags.3?Vector<BotInfo>" }, { "name": "pinned_msg_id", "type": "flags.6?int" }, { "name": "folder_id", "type": "flags.11?int" }, { "name": "call", "type": "flags.12?InputGroupCall" }, { "name": "ttl_period", "type": "flags.14?int" }, { "name": "groupcall_default_join_as", "type": "flags.15?Peer" }, { "name": "theme_emoticon", "type": "flags.16?string" }], "type": "ChatFull" }, { "id": -374179305, "predicate": "channelFull", "params": [{ "name": "flags", "type": "#" }, { "name": "can_view_participants", "type": "flags.3?true" }, { "name": "can_set_username", "type": "flags.6?true" }, { "name": "can_set_stickers", "type": "flags.7?true" }, { "name": "hidden_prehistory", "type": "flags.10?true" }, { "name": "can_set_location", "type": "flags.16?true" }, { "name": "has_scheduled", "type": "flags.19?true" }, { "name": "can_view_stats", "type": "flags.20?true" }, { "name": "blocked", "type": "flags.22?true" }, { "name": "id", "type": "long" }, { "name": "about", "type": "string" }, { "name": "participants_count", "type": "flags.0?int" }, { "name": "admins_count", "type": "flags.1?int" }, { "name": "kicked_count", "type": "flags.2?int" }, { "name": "banned_count", "type": "flags.2?int" }, { "name": "online_count", "type": "flags.13?int" }, { "name": "read_inbox_max_id", "type": "int" }, { "name": "read_outbox_max_id", "type": "int" }, { "name": "unread_count", "type": "int" }, { "name": "chat_photo", "type": "Photo" }, { "name": "notify_settings", "type": "PeerNotifySettings" }, { "name": "exported_invite", "type": "flags.23?ExportedChatInvite" }, { "name": "bot_info", "type": "Vector<BotInfo>" }, { "name": "migrated_from_chat_id", "type": "flags.4?long" }, { "name": "migrated_from_max_id", "type": "flags.4?int" }, { "name": "pinned_msg_id", "type": "flags.5?int" }, { "name": "stickerset", "type": "flags.8?StickerSet" }, { "name": "available_min_id", "type": "flags.9?int" }, { "name": "folder_id", "type": "flags.11?int" }, { "name": "linked_chat_id", "type": "flags.14?long" }, { "name": "location", "type": "flags.15?ChannelLocation" }, { "name": "slowmode_seconds", "type": "flags.17?int" }, { "name": "slowmode_next_send_date", "type": "flags.18?int" }, { "name": "stats_dc", "type": "flags.12?int" }, { "name": "pts", "type": "int" }, { "name": "call", "type": "flags.21?InputGroupCall" }, { "name": "ttl_period", "type": "flags.24?int" }, { "name": "pending_suggestions", "type": "flags.25?Vector<string>" }, { "name": "groupcall_default_join_as", "type": "flags.26?Peer" }, { "name": "theme_emoticon", "type": "flags.27?string" }], "type": "ChatFull" }, { "id": -1070776313, "predicate": "chatParticipant", "params": [{ "name": "user_id", "type": "long" }, { "name": "inviter_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "ChatParticipant" }, { "id": -462696732, "predicate": "chatParticipantCreator", "params": [{ "name": "user_id", "type": "long" }], "type": "ChatParticipant" }, { "id": -1600962725, "predicate": "chatParticipantAdmin", "params": [{ "name": "user_id", "type": "long" }, { "name": "inviter_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "ChatParticipant" }, { "id": -2023500831, "predicate": "chatParticipantsForbidden", "params": [{ "name": "flags", "type": "#" }, { "name": "chat_id", "type": "long" }, { "name": "self_participant", "type": "flags.0?ChatParticipant" }], "type": "ChatParticipants" }, { "id": 1018991608, "predicate": "chatParticipants", "params": [{ "name": "chat_id", "type": "long" }, { "name": "participants", "type": "Vector<ChatParticipant>" }, { "name": "version", "type": "int" }], "type": "ChatParticipants" }, { "id": 935395612, "predicate": "chatPhotoEmpty", "params": [], "type": "ChatPhoto" }, { "id": 476978193, "predicate": "chatPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "has_video", "type": "flags.0?true" }, { "name": "photo_id", "type": "long" }, { "name": "stripped_thumb", "type": "flags.1?bytes" }, { "name": "dc_id", "type": "int" }], "type": "ChatPhoto" }, { "id": -1868117372, "predicate": "messageEmpty", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "int" }, { "name": "peer_id", "type": "flags.0?Peer" }], "type": "Message" }, { "id": -2049520670, "predicate": "message", "params": [{ "name": "flags", "type": "#" }, { "name": "out", "type": "flags.1?true" }, { "name": "mentioned", "type": "flags.4?true" }, { "name": "media_unread", "type": "flags.5?true" }, { "name": "silent", "type": "flags.13?true" }, { "name": "post", "type": "flags.14?true" }, { "name": "from_scheduled", "type": "flags.18?true" }, { "name": "legacy", "type": "flags.19?true" }, { "name": "edit_hide", "type": "flags.21?true" }, { "name": "pinned", "type": "flags.24?true" }, { "name": "id", "type": "int" }, { "name": "from_id", "type": "flags.8?Peer" }, { "name": "peer_id", "type": "Peer" }, { "name": "fwd_from", "type": "flags.2?MessageFwdHeader" }, { "name": "via_bot_id", "type": "flags.11?long" }, { "name": "reply_to", "type": "flags.3?MessageReplyHeader" }, { "name": "date", "type": "int" }, { "name": "message", "type": "string" }, { "name": "media", "type": "flags.9?MessageMedia" }, { "name": "reply_markup", "type": "flags.6?ReplyMarkup" }, { "name": "entities", "type": "flags.7?Vector<MessageEntity>" }, { "name": "views", "type": "flags.10?int" }, { "name": "forwards", "type": "flags.10?int" }, { "name": "replies", "type": "flags.23?MessageReplies" }, { "name": "edit_date", "type": "flags.15?int" }, { "name": "post_author", "type": "flags.16?string" }, { "name": "grouped_id", "type": "flags.17?long" }, { "name": "restriction_reason", "type": "flags.22?Vector<RestrictionReason>" }, { "name": "ttl_period", "type": "flags.25?int" }], "type": "Message" }, { "id": 721967202, "predicate": "messageService", "params": [{ "name": "flags", "type": "#" }, { "name": "out", "type": "flags.1?true" }, { "name": "mentioned", "type": "flags.4?true" }, { "name": "media_unread", "type": "flags.5?true" }, { "name": "silent", "type": "flags.13?true" }, { "name": "post", "type": "flags.14?true" }, { "name": "legacy", "type": "flags.19?true" }, { "name": "id", "type": "int" }, { "name": "from_id", "type": "flags.8?Peer" }, { "name": "peer_id", "type": "Peer" }, { "name": "reply_to", "type": "flags.3?MessageReplyHeader" }, { "name": "date", "type": "int" }, { "name": "action", "type": "MessageAction" }, { "name": "ttl_period", "type": "flags.25?int" }], "type": "Message" }, { "id": 1038967584, "predicate": "messageMediaEmpty", "params": [], "type": "MessageMedia" }, { "id": 1766936791, "predicate": "messageMediaPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "photo", "type": "flags.0?Photo" }, { "name": "ttl_seconds", "type": "flags.2?int" }], "type": "MessageMedia" }, { "id": 1457575028, "predicate": "messageMediaGeo", "params": [{ "name": "geo", "type": "GeoPoint" }], "type": "MessageMedia" }, { "id": 1882335561, "predicate": "messageMediaContact", "params": [{ "name": "phone_number", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "vcard", "type": "string" }, { "name": "user_id", "type": "long" }], "type": "MessageMedia" }, { "id": -1618676578, "predicate": "messageMediaUnsupported", "params": [], "type": "MessageMedia" }, { "id": -1666158377, "predicate": "messageMediaDocument", "params": [{ "name": "flags", "type": "#" }, { "name": "document", "type": "flags.0?Document" }, { "name": "ttl_seconds", "type": "flags.2?int" }], "type": "MessageMedia" }, { "id": -1557277184, "predicate": "messageMediaWebPage", "params": [{ "name": "webpage", "type": "WebPage" }], "type": "MessageMedia" }, { "id": 784356159, "predicate": "messageMediaVenue", "params": [{ "name": "geo", "type": "GeoPoint" }, { "name": "title", "type": "string" }, { "name": "address", "type": "string" }, { "name": "provider", "type": "string" }, { "name": "venue_id", "type": "string" }, { "name": "venue_type", "type": "string" }], "type": "MessageMedia" }, { "id": -38694904, "predicate": "messageMediaGame", "params": [{ "name": "game", "type": "Game" }], "type": "MessageMedia" }, { "id": -2074799289, "predicate": "messageMediaInvoice", "params": [{ "name": "flags", "type": "#" }, { "name": "shipping_address_requested", "type": "flags.1?true" }, { "name": "test", "type": "flags.3?true" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "flags.0?WebDocument" }, { "name": "receipt_msg_id", "type": "flags.2?int" }, { "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }, { "name": "start_param", "type": "string" }], "type": "MessageMedia" }, { "id": -1186937242, "predicate": "messageMediaGeoLive", "params": [{ "name": "flags", "type": "#" }, { "name": "geo", "type": "GeoPoint" }, { "name": "heading", "type": "flags.0?int" }, { "name": "period", "type": "int" }, { "name": "proximity_notification_radius", "type": "flags.1?int" }], "type": "MessageMedia" }, { "id": 1272375192, "predicate": "messageMediaPoll", "params": [{ "name": "poll", "type": "Poll" }, { "name": "results", "type": "PollResults" }], "type": "MessageMedia" }, { "id": 1065280907, "predicate": "messageMediaDice", "params": [{ "name": "value", "type": "int" }, { "name": "emoticon", "type": "string" }], "type": "MessageMedia" }, { "id": -1230047312, "predicate": "messageActionEmpty", "params": [], "type": "MessageAction" }, { "id": -1119368275, "predicate": "messageActionChatCreate", "params": [{ "name": "title", "type": "string" }, { "name": "users", "type": "Vector<long>" }], "type": "MessageAction" }, { "id": -1247687078, "predicate": "messageActionChatEditTitle", "params": [{ "name": "title", "type": "string" }], "type": "MessageAction" }, { "id": 2144015272, "predicate": "messageActionChatEditPhoto", "params": [{ "name": "photo", "type": "Photo" }], "type": "MessageAction" }, { "id": -1780220945, "predicate": "messageActionChatDeletePhoto", "params": [], "type": "MessageAction" }, { "id": 365886720, "predicate": "messageActionChatAddUser", "params": [{ "name": "users", "type": "Vector<long>" }], "type": "MessageAction" }, { "id": -1539362612, "predicate": "messageActionChatDeleteUser", "params": [{ "name": "user_id", "type": "long" }], "type": "MessageAction" }, { "id": 51520707, "predicate": "messageActionChatJoinedByLink", "params": [{ "name": "inviter_id", "type": "long" }], "type": "MessageAction" }, { "id": -1781355374, "predicate": "messageActionChannelCreate", "params": [{ "name": "title", "type": "string" }], "type": "MessageAction" }, { "id": -519864430, "predicate": "messageActionChatMigrateTo", "params": [{ "name": "channel_id", "type": "long" }], "type": "MessageAction" }, { "id": -365344535, "predicate": "messageActionChannelMigrateFrom", "params": [{ "name": "title", "type": "string" }, { "name": "chat_id", "type": "long" }], "type": "MessageAction" }, { "id": -1799538451, "predicate": "messageActionPinMessage", "params": [], "type": "MessageAction" }, { "id": -1615153660, "predicate": "messageActionHistoryClear", "params": [], "type": "MessageAction" }, { "id": -1834538890, "predicate": "messageActionGameScore", "params": [{ "name": "game_id", "type": "long" }, { "name": "score", "type": "int" }], "type": "MessageAction" }, { "id": -1892568281, "predicate": "messageActionPaymentSentMe", "params": [{ "name": "flags", "type": "#" }, { "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }, { "name": "payload", "type": "bytes" }, { "name": "info", "type": "flags.0?PaymentRequestedInfo" }, { "name": "shipping_option_id", "type": "flags.1?string" }, { "name": "charge", "type": "PaymentCharge" }], "type": "MessageAction" }, { "id": 1080663248, "predicate": "messageActionPaymentSent", "params": [{ "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }], "type": "MessageAction" }, { "id": -2132731265, "predicate": "messageActionPhoneCall", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.2?true" }, { "name": "call_id", "type": "long" }, { "name": "reason", "type": "flags.0?PhoneCallDiscardReason" }, { "name": "duration", "type": "flags.1?int" }], "type": "MessageAction" }, { "id": 1200788123, "predicate": "messageActionScreenshotTaken", "params": [], "type": "MessageAction" }, { "id": -85549226, "predicate": "messageActionCustomAction", "params": [{ "name": "message", "type": "string" }], "type": "MessageAction" }, { "id": -1410748418, "predicate": "messageActionBotAllowed", "params": [{ "name": "domain", "type": "string" }], "type": "MessageAction" }, { "id": 455635795, "predicate": "messageActionSecureValuesSentMe", "params": [{ "name": "values", "type": "Vector<SecureValue>" }, { "name": "credentials", "type": "SecureCredentialsEncrypted" }], "type": "MessageAction" }, { "id": -648257196, "predicate": "messageActionSecureValuesSent", "params": [{ "name": "types", "type": "Vector<SecureValueType>" }], "type": "MessageAction" }, { "id": -202219658, "predicate": "messageActionContactSignUp", "params": [], "type": "MessageAction" }, { "id": -1730095465, "predicate": "messageActionGeoProximityReached", "params": [{ "name": "from_id", "type": "Peer" }, { "name": "to_id", "type": "Peer" }, { "name": "distance", "type": "int" }], "type": "MessageAction" }, { "id": 2047704898, "predicate": "messageActionGroupCall", "params": [{ "name": "flags", "type": "#" }, { "name": "call", "type": "InputGroupCall" }, { "name": "duration", "type": "flags.0?int" }], "type": "MessageAction" }, { "id": 1345295095, "predicate": "messageActionInviteToGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "users", "type": "Vector<long>" }], "type": "MessageAction" }, { "id": -1441072131, "predicate": "messageActionSetMessagesTTL", "params": [{ "name": "period", "type": "int" }], "type": "MessageAction" }, { "id": -1281329567, "predicate": "messageActionGroupCallScheduled", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "schedule_date", "type": "int" }], "type": "MessageAction" }, { "id": -1434950843, "predicate": "messageActionSetChatTheme", "params": [{ "name": "emoticon", "type": "string" }], "type": "MessageAction" }, { "id": 739712882, "predicate": "dialog", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.2?true" }, { "name": "unread_mark", "type": "flags.3?true" }, { "name": "peer", "type": "Peer" }, { "name": "top_message", "type": "int" }, { "name": "read_inbox_max_id", "type": "int" }, { "name": "read_outbox_max_id", "type": "int" }, { "name": "unread_count", "type": "int" }, { "name": "unread_mentions_count", "type": "int" }, { "name": "notify_settings", "type": "PeerNotifySettings" }, { "name": "pts", "type": "flags.0?int" }, { "name": "draft", "type": "flags.1?DraftMessage" }, { "name": "folder_id", "type": "flags.4?int" }], "type": "Dialog" }, { "id": 1908216652, "predicate": "dialogFolder", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.2?true" }, { "name": "folder", "type": "Folder" }, { "name": "peer", "type": "Peer" }, { "name": "top_message", "type": "int" }, { "name": "unread_muted_peers_count", "type": "int" }, { "name": "unread_unmuted_peers_count", "type": "int" }, { "name": "unread_muted_messages_count", "type": "int" }, { "name": "unread_unmuted_messages_count", "type": "int" }], "type": "Dialog" }, { "id": 590459437, "predicate": "photoEmpty", "params": [{ "name": "id", "type": "long" }], "type": "Photo" }, { "id": -82216347, "predicate": "photo", "params": [{ "name": "flags", "type": "#" }, { "name": "has_stickers", "type": "flags.0?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }, { "name": "date", "type": "int" }, { "name": "sizes", "type": "Vector<PhotoSize>" }, { "name": "video_sizes", "type": "flags.1?Vector<VideoSize>" }, { "name": "dc_id", "type": "int" }], "type": "Photo" }, { "id": 236446268, "predicate": "photoSizeEmpty", "params": [{ "name": "type", "type": "string" }], "type": "PhotoSize" }, { "id": 1976012384, "predicate": "photoSize", "params": [{ "name": "type", "type": "string" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "size", "type": "int" }], "type": "PhotoSize" }, { "id": 35527382, "predicate": "photoCachedSize", "params": [{ "name": "type", "type": "string" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "PhotoSize" }, { "id": -525288402, "predicate": "photoStrippedSize", "params": [{ "name": "type", "type": "string" }, { "name": "bytes", "type": "bytes" }], "type": "PhotoSize" }, { "id": -96535659, "predicate": "photoSizeProgressive", "params": [{ "name": "type", "type": "string" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "sizes", "type": "Vector<int>" }], "type": "PhotoSize" }, { "id": -668906175, "predicate": "photoPathSize", "params": [{ "name": "type", "type": "string" }, { "name": "bytes", "type": "bytes" }], "type": "PhotoSize" }, { "id": 286776671, "predicate": "geoPointEmpty", "params": [], "type": "GeoPoint" }, { "id": -1297942941, "predicate": "geoPoint", "params": [{ "name": "flags", "type": "#" }, { "name": "long", "type": "double" }, { "name": "lat", "type": "double" }, { "name": "access_hash", "type": "long" }, { "name": "accuracy_radius", "type": "flags.0?int" }], "type": "GeoPoint" }, { "id": 1577067778, "predicate": "auth.sentCode", "params": [{ "name": "flags", "type": "#" }, { "name": "type", "type": "auth.SentCodeType" }, { "name": "phone_code_hash", "type": "string" }, { "name": "next_type", "type": "flags.1?auth.CodeType" }, { "name": "timeout", "type": "flags.2?int" }], "type": "auth.SentCode" }, { "id": -855308010, "predicate": "auth.authorization", "params": [{ "name": "flags", "type": "#" }, { "name": "tmp_sessions", "type": "flags.0?int" }, { "name": "user", "type": "User" }], "type": "auth.Authorization" }, { "id": 1148485274, "predicate": "auth.authorizationSignUpRequired", "params": [{ "name": "flags", "type": "#" }, { "name": "terms_of_service", "type": "flags.0?help.TermsOfService" }], "type": "auth.Authorization" }, { "id": -1271602504, "predicate": "auth.exportedAuthorization", "params": [{ "name": "id", "type": "long" }, { "name": "bytes", "type": "bytes" }], "type": "auth.ExportedAuthorization" }, { "id": -1195615476, "predicate": "inputNotifyPeer", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "InputNotifyPeer" }, { "id": 423314455, "predicate": "inputNotifyUsers", "params": [], "type": "InputNotifyPeer" }, { "id": 1251338318, "predicate": "inputNotifyChats", "params": [], "type": "InputNotifyPeer" }, { "id": -1311015810, "predicate": "inputNotifyBroadcasts", "params": [], "type": "InputNotifyPeer" }, { "id": -1673717362, "predicate": "inputPeerNotifySettings", "params": [{ "name": "flags", "type": "#" }, { "name": "show_previews", "type": "flags.0?Bool" }, { "name": "silent", "type": "flags.1?Bool" }, { "name": "mute_until", "type": "flags.2?int" }, { "name": "sound", "type": "flags.3?string" }], "type": "InputPeerNotifySettings" }, { "id": -1353671392, "predicate": "peerNotifySettings", "params": [{ "name": "flags", "type": "#" }, { "name": "show_previews", "type": "flags.0?Bool" }, { "name": "silent", "type": "flags.1?Bool" }, { "name": "mute_until", "type": "flags.2?int" }, { "name": "sound", "type": "flags.3?string" }], "type": "PeerNotifySettings" }, { "id": 1933519201, "predicate": "peerSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "report_spam", "type": "flags.0?true" }, { "name": "add_contact", "type": "flags.1?true" }, { "name": "block_contact", "type": "flags.2?true" }, { "name": "share_contact", "type": "flags.3?true" }, { "name": "need_contacts_exception", "type": "flags.4?true" }, { "name": "report_geo", "type": "flags.5?true" }, { "name": "autoarchived", "type": "flags.7?true" }, { "name": "invite_members", "type": "flags.8?true" }, { "name": "geo_distance", "type": "flags.6?int" }], "type": "PeerSettings" }, { "id": -1539849235, "predicate": "wallPaper", "params": [{ "name": "id", "type": "long" }, { "name": "flags", "type": "#" }, { "name": "creator", "type": "flags.0?true" }, { "name": "default", "type": "flags.1?true" }, { "name": "pattern", "type": "flags.3?true" }, { "name": "dark", "type": "flags.4?true" }, { "name": "access_hash", "type": "long" }, { "name": "slug", "type": "string" }, { "name": "document", "type": "Document" }, { "name": "settings", "type": "flags.2?WallPaperSettings" }], "type": "WallPaper" }, { "id": -528465642, "predicate": "wallPaperNoFile", "params": [{ "name": "id", "type": "long" }, { "name": "flags", "type": "#" }, { "name": "default", "type": "flags.1?true" }, { "name": "dark", "type": "flags.4?true" }, { "name": "settings", "type": "flags.2?WallPaperSettings" }], "type": "WallPaper" }, { "id": 1490799288, "predicate": "inputReportReasonSpam", "params": [], "type": "ReportReason" }, { "id": 505595789, "predicate": "inputReportReasonViolence", "params": [], "type": "ReportReason" }, { "id": 777640226, "predicate": "inputReportReasonPornography", "params": [], "type": "ReportReason" }, { "id": -1376497949, "predicate": "inputReportReasonChildAbuse", "params": [], "type": "ReportReason" }, { "id": -1041980751, "predicate": "inputReportReasonOther", "params": [], "type": "ReportReason" }, { "id": -1685456582, "predicate": "inputReportReasonCopyright", "params": [], "type": "ReportReason" }, { "id": -606798099, "predicate": "inputReportReasonGeoIrrelevant", "params": [], "type": "ReportReason" }, { "id": -170010905, "predicate": "inputReportReasonFake", "params": [], "type": "ReportReason" }, { "id": -694681851, "predicate": "userFull", "params": [{ "name": "flags", "type": "#" }, { "name": "blocked", "type": "flags.0?true" }, { "name": "phone_calls_available", "type": "flags.4?true" }, { "name": "phone_calls_private", "type": "flags.5?true" }, { "name": "can_pin_message", "type": "flags.7?true" }, { "name": "has_scheduled", "type": "flags.12?true" }, { "name": "video_calls_available", "type": "flags.13?true" }, { "name": "user", "type": "User" }, { "name": "about", "type": "flags.1?string" }, { "name": "settings", "type": "PeerSettings" }, { "name": "profile_photo", "type": "flags.2?Photo" }, { "name": "notify_settings", "type": "PeerNotifySettings" }, { "name": "bot_info", "type": "flags.3?BotInfo" }, { "name": "pinned_msg_id", "type": "flags.6?int" }, { "name": "common_chats_count", "type": "int" }, { "name": "folder_id", "type": "flags.11?int" }, { "name": "ttl_period", "type": "flags.14?int" }, { "name": "theme_emoticon", "type": "flags.15?string" }], "type": "UserFull" }, { "id": 341499403, "predicate": "contact", "params": [{ "name": "user_id", "type": "long" }, { "name": "mutual", "type": "Bool" }], "type": "Contact" }, { "id": -1052885936, "predicate": "importedContact", "params": [{ "name": "user_id", "type": "long" }, { "name": "client_id", "type": "long" }], "type": "ImportedContact" }, { "id": 383348795, "predicate": "contactStatus", "params": [{ "name": "user_id", "type": "long" }, { "name": "status", "type": "UserStatus" }], "type": "ContactStatus" }, { "id": -1219778094, "predicate": "contacts.contactsNotModified", "params": [], "type": "contacts.Contacts" }, { "id": -353862078, "predicate": "contacts.contacts", "params": [{ "name": "contacts", "type": "Vector<Contact>" }, { "name": "saved_count", "type": "int" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.Contacts" }, { "id": 2010127419, "predicate": "contacts.importedContacts", "params": [{ "name": "imported", "type": "Vector<ImportedContact>" }, { "name": "popular_invites", "type": "Vector<PopularContact>" }, { "name": "retry_contacts", "type": "Vector<long>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.ImportedContacts" }, { "id": 182326673, "predicate": "contacts.blocked", "params": [{ "name": "blocked", "type": "Vector<PeerBlocked>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.Blocked" }, { "id": -513392236, "predicate": "contacts.blockedSlice", "params": [{ "name": "count", "type": "int" }, { "name": "blocked", "type": "Vector<PeerBlocked>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.Blocked" }, { "id": 364538944, "predicate": "messages.dialogs", "params": [{ "name": "dialogs", "type": "Vector<Dialog>" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.Dialogs" }, { "id": 1910543603, "predicate": "messages.dialogsSlice", "params": [{ "name": "count", "type": "int" }, { "name": "dialogs", "type": "Vector<Dialog>" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.Dialogs" }, { "id": -253500010, "predicate": "messages.dialogsNotModified", "params": [{ "name": "count", "type": "int" }], "type": "messages.Dialogs" }, { "id": -1938715001, "predicate": "messages.messages", "params": [{ "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.Messages" }, { "id": 978610270, "predicate": "messages.messagesSlice", "params": [{ "name": "flags", "type": "#" }, { "name": "inexact", "type": "flags.1?true" }, { "name": "count", "type": "int" }, { "name": "next_rate", "type": "flags.0?int" }, { "name": "offset_id_offset", "type": "flags.2?int" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.Messages" }, { "id": 1682413576, "predicate": "messages.channelMessages", "params": [{ "name": "flags", "type": "#" }, { "name": "inexact", "type": "flags.1?true" }, { "name": "pts", "type": "int" }, { "name": "count", "type": "int" }, { "name": "offset_id_offset", "type": "flags.2?int" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.Messages" }, { "id": 1951620897, "predicate": "messages.messagesNotModified", "params": [{ "name": "count", "type": "int" }], "type": "messages.Messages" }, { "id": 1694474197, "predicate": "messages.chats", "params": [{ "name": "chats", "type": "Vector<Chat>" }], "type": "messages.Chats" }, { "id": -1663561404, "predicate": "messages.chatsSlice", "params": [{ "name": "count", "type": "int" }, { "name": "chats", "type": "Vector<Chat>" }], "type": "messages.Chats" }, { "id": -438840932, "predicate": "messages.chatFull", "params": [{ "name": "full_chat", "type": "ChatFull" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ChatFull" }, { "id": -1269012015, "predicate": "messages.affectedHistory", "params": [{ "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }, { "name": "offset", "type": "int" }], "type": "messages.AffectedHistory" }, { "id": 1474492012, "predicate": "inputMessagesFilterEmpty", "params": [], "type": "MessagesFilter" }, { "id": -1777752804, "predicate": "inputMessagesFilterPhotos", "params": [], "type": "MessagesFilter" }, { "id": -1614803355, "predicate": "inputMessagesFilterVideo", "params": [], "type": "MessagesFilter" }, { "id": 1458172132, "predicate": "inputMessagesFilterPhotoVideo", "params": [], "type": "MessagesFilter" }, { "id": -1629621880, "predicate": "inputMessagesFilterDocument", "params": [], "type": "MessagesFilter" }, { "id": 2129714567, "predicate": "inputMessagesFilterUrl", "params": [], "type": "MessagesFilter" }, { "id": -3644025, "predicate": "inputMessagesFilterGif", "params": [], "type": "MessagesFilter" }, { "id": 1358283666, "predicate": "inputMessagesFilterVoice", "params": [], "type": "MessagesFilter" }, { "id": 928101534, "predicate": "inputMessagesFilterMusic", "params": [], "type": "MessagesFilter" }, { "id": 975236280, "predicate": "inputMessagesFilterChatPhotos", "params": [], "type": "MessagesFilter" }, { "id": -2134272152, "predicate": "inputMessagesFilterPhoneCalls", "params": [{ "name": "flags", "type": "#" }, { "name": "missed", "type": "flags.0?true" }], "type": "MessagesFilter" }, { "id": 2054952868, "predicate": "inputMessagesFilterRoundVoice", "params": [], "type": "MessagesFilter" }, { "id": -1253451181, "predicate": "inputMessagesFilterRoundVideo", "params": [], "type": "MessagesFilter" }, { "id": -1040652646, "predicate": "inputMessagesFilterMyMentions", "params": [], "type": "MessagesFilter" }, { "id": -419271411, "predicate": "inputMessagesFilterGeo", "params": [], "type": "MessagesFilter" }, { "id": -530392189, "predicate": "inputMessagesFilterContacts", "params": [], "type": "MessagesFilter" }, { "id": 464520273, "predicate": "inputMessagesFilterPinned", "params": [], "type": "MessagesFilter" }, { "id": 522914557, "predicate": "updateNewMessage", "params": [{ "name": "message", "type": "Message" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1318109142, "predicate": "updateMessageID", "params": [{ "name": "id", "type": "int" }, { "name": "random_id", "type": "long" }], "type": "Update" }, { "id": -1576161051, "predicate": "updateDeleteMessages", "params": [{ "name": "messages", "type": "Vector<int>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": -1071741569, "predicate": "updateUserTyping", "params": [{ "name": "user_id", "type": "long" }, { "name": "action", "type": "SendMessageAction" }], "type": "Update" }, { "id": -2092401936, "predicate": "updateChatUserTyping", "params": [{ "name": "chat_id", "type": "long" }, { "name": "from_id", "type": "Peer" }, { "name": "action", "type": "SendMessageAction" }], "type": "Update" }, { "id": 125178264, "predicate": "updateChatParticipants", "params": [{ "name": "participants", "type": "ChatParticipants" }], "type": "Update" }, { "id": -440534818, "predicate": "updateUserStatus", "params": [{ "name": "user_id", "type": "long" }, { "name": "status", "type": "UserStatus" }], "type": "Update" }, { "id": -1007549728, "predicate": "updateUserName", "params": [{ "name": "user_id", "type": "long" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "username", "type": "string" }], "type": "Update" }, { "id": -232290676, "predicate": "updateUserPhoto", "params": [{ "name": "user_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "photo", "type": "UserProfilePhoto" }, { "name": "previous", "type": "Bool" }], "type": "Update" }, { "id": 314359194, "predicate": "updateNewEncryptedMessage", "params": [{ "name": "message", "type": "EncryptedMessage" }, { "name": "qts", "type": "int" }], "type": "Update" }, { "id": 386986326, "predicate": "updateEncryptedChatTyping", "params": [{ "name": "chat_id", "type": "int" }], "type": "Update" }, { "id": -1264392051, "predicate": "updateEncryption", "params": [{ "name": "chat", "type": "EncryptedChat" }, { "name": "date", "type": "int" }], "type": "Update" }, { "id": 956179895, "predicate": "updateEncryptedMessagesRead", "params": [{ "name": "chat_id", "type": "int" }, { "name": "max_date", "type": "int" }, { "name": "date", "type": "int" }], "type": "Update" }, { "id": 1037718609, "predicate": "updateChatParticipantAdd", "params": [{ "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "inviter_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "version", "type": "int" }], "type": "Update" }, { "id": -483443337, "predicate": "updateChatParticipantDelete", "params": [{ "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "version", "type": "int" }], "type": "Update" }, { "id": -1906403213, "predicate": "updateDcOptions", "params": [{ "name": "dc_options", "type": "Vector<DcOption>" }], "type": "Update" }, { "id": -1094555409, "predicate": "updateNotifySettings", "params": [{ "name": "peer", "type": "NotifyPeer" }, { "name": "notify_settings", "type": "PeerNotifySettings" }], "type": "Update" }, { "id": -337352679, "predicate": "updateServiceNotification", "params": [{ "name": "flags", "type": "#" }, { "name": "popup", "type": "flags.0?true" }, { "name": "inbox_date", "type": "flags.1?int" }, { "name": "type", "type": "string" }, { "name": "message", "type": "string" }, { "name": "media", "type": "MessageMedia" }, { "name": "entities", "type": "Vector<MessageEntity>" }], "type": "Update" }, { "id": -298113238, "predicate": "updatePrivacy", "params": [{ "name": "key", "type": "PrivacyKey" }, { "name": "rules", "type": "Vector<PrivacyRule>" }], "type": "Update" }, { "id": 88680979, "predicate": "updateUserPhone", "params": [{ "name": "user_id", "type": "long" }, { "name": "phone", "type": "string" }], "type": "Update" }, { "id": -1667805217, "predicate": "updateReadHistoryInbox", "params": [{ "name": "flags", "type": "#" }, { "name": "folder_id", "type": "flags.0?int" }, { "name": "peer", "type": "Peer" }, { "name": "max_id", "type": "int" }, { "name": "still_unread_count", "type": "int" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 791617983, "predicate": "updateReadHistoryOutbox", "params": [{ "name": "peer", "type": "Peer" }, { "name": "max_id", "type": "int" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 2139689491, "predicate": "updateWebPage", "params": [{ "name": "webpage", "type": "WebPage" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1757493555, "predicate": "updateReadMessagesContents", "params": [{ "name": "messages", "type": "Vector<int>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 277713951, "predicate": "updateChannelTooLong", "params": [{ "name": "flags", "type": "#" }, { "name": "channel_id", "type": "long" }, { "name": "pts", "type": "flags.0?int" }], "type": "Update" }, { "id": 1666927625, "predicate": "updateChannel", "params": [{ "name": "channel_id", "type": "long" }], "type": "Update" }, { "id": 1656358105, "predicate": "updateNewChannelMessage", "params": [{ "name": "message", "type": "Message" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": -1842450928, "predicate": "updateReadChannelInbox", "params": [{ "name": "flags", "type": "#" }, { "name": "folder_id", "type": "flags.0?int" }, { "name": "channel_id", "type": "long" }, { "name": "max_id", "type": "int" }, { "name": "still_unread_count", "type": "int" }, { "name": "pts", "type": "int" }], "type": "Update" }, { "id": -1020437742, "predicate": "updateDeleteChannelMessages", "params": [{ "name": "channel_id", "type": "long" }, { "name": "messages", "type": "Vector<int>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": -232346616, "predicate": "updateChannelMessageViews", "params": [{ "name": "channel_id", "type": "long" }, { "name": "id", "type": "int" }, { "name": "views", "type": "int" }], "type": "Update" }, { "id": -674602590, "predicate": "updateChatParticipantAdmin", "params": [{ "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "is_admin", "type": "Bool" }, { "name": "version", "type": "int" }], "type": "Update" }, { "id": 1753886890, "predicate": "updateNewStickerSet", "params": [{ "name": "stickerset", "type": "messages.StickerSet" }], "type": "Update" }, { "id": 196268545, "predicate": "updateStickerSetsOrder", "params": [{ "name": "flags", "type": "#" }, { "name": "masks", "type": "flags.0?true" }, { "name": "order", "type": "Vector<long>" }], "type": "Update" }, { "id": 1135492588, "predicate": "updateStickerSets", "params": [], "type": "Update" }, { "id": -1821035490, "predicate": "updateSavedGifs", "params": [], "type": "Update" }, { "id": 1232025500, "predicate": "updateBotInlineQuery", "params": [{ "name": "flags", "type": "#" }, { "name": "query_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "query", "type": "string" }, { "name": "geo", "type": "flags.0?GeoPoint" }, { "name": "peer_type", "type": "flags.1?InlineQueryPeerType" }, { "name": "offset", "type": "string" }], "type": "Update" }, { "id": 317794823, "predicate": "updateBotInlineSend", "params": [{ "name": "flags", "type": "#" }, { "name": "user_id", "type": "long" }, { "name": "query", "type": "string" }, { "name": "geo", "type": "flags.0?GeoPoint" }, { "name": "id", "type": "string" }, { "name": "msg_id", "type": "flags.1?InputBotInlineMessageID" }], "type": "Update" }, { "id": 457133559, "predicate": "updateEditChannelMessage", "params": [{ "name": "message", "type": "Message" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": -1177566067, "predicate": "updateBotCallbackQuery", "params": [{ "name": "flags", "type": "#" }, { "name": "query_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "peer", "type": "Peer" }, { "name": "msg_id", "type": "int" }, { "name": "chat_instance", "type": "long" }, { "name": "data", "type": "flags.0?bytes" }, { "name": "game_short_name", "type": "flags.1?string" }], "type": "Update" }, { "id": -469536605, "predicate": "updateEditMessage", "params": [{ "name": "message", "type": "Message" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1763610706, "predicate": "updateInlineBotCallbackQuery", "params": [{ "name": "flags", "type": "#" }, { "name": "query_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "msg_id", "type": "InputBotInlineMessageID" }, { "name": "chat_instance", "type": "long" }, { "name": "data", "type": "flags.0?bytes" }, { "name": "game_short_name", "type": "flags.1?string" }], "type": "Update" }, { "id": -1218471511, "predicate": "updateReadChannelOutbox", "params": [{ "name": "channel_id", "type": "long" }, { "name": "max_id", "type": "int" }], "type": "Update" }, { "id": -299124375, "predicate": "updateDraftMessage", "params": [{ "name": "peer", "type": "Peer" }, { "name": "draft", "type": "DraftMessage" }], "type": "Update" }, { "id": 1461528386, "predicate": "updateReadFeaturedStickers", "params": [], "type": "Update" }, { "id": -1706939360, "predicate": "updateRecentStickers", "params": [], "type": "Update" }, { "id": -1574314746, "predicate": "updateConfig", "params": [], "type": "Update" }, { "id": 861169551, "predicate": "updatePtsChanged", "params": [], "type": "Update" }, { "id": 791390623, "predicate": "updateChannelWebPage", "params": [{ "name": "channel_id", "type": "long" }, { "name": "webpage", "type": "WebPage" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1852826908, "predicate": "updateDialogPinned", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.0?true" }, { "name": "folder_id", "type": "flags.1?int" }, { "name": "peer", "type": "DialogPeer" }], "type": "Update" }, { "id": -99664734, "predicate": "updatePinnedDialogs", "params": [{ "name": "flags", "type": "#" }, { "name": "folder_id", "type": "flags.1?int" }, { "name": "order", "type": "flags.0?Vector<DialogPeer>" }], "type": "Update" }, { "id": -2095595325, "predicate": "updateBotWebhookJSON", "params": [{ "name": "data", "type": "DataJSON" }], "type": "Update" }, { "id": -1684914010, "predicate": "updateBotWebhookJSONQuery", "params": [{ "name": "query_id", "type": "long" }, { "name": "data", "type": "DataJSON" }, { "name": "timeout", "type": "int" }], "type": "Update" }, { "id": -1246823043, "predicate": "updateBotShippingQuery", "params": [{ "name": "query_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "payload", "type": "bytes" }, { "name": "shipping_address", "type": "PostAddress" }], "type": "Update" }, { "id": -1934976362, "predicate": "updateBotPrecheckoutQuery", "params": [{ "name": "flags", "type": "#" }, { "name": "query_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "payload", "type": "bytes" }, { "name": "info", "type": "flags.0?PaymentRequestedInfo" }, { "name": "shipping_option_id", "type": "flags.1?string" }, { "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }], "type": "Update" }, { "id": -1425052898, "predicate": "updatePhoneCall", "params": [{ "name": "phone_call", "type": "PhoneCall" }], "type": "Update" }, { "id": 1180041828, "predicate": "updateLangPackTooLong", "params": [{ "name": "lang_code", "type": "string" }], "type": "Update" }, { "id": 1442983757, "predicate": "updateLangPack", "params": [{ "name": "difference", "type": "LangPackDifference" }], "type": "Update" }, { "id": -451831443, "predicate": "updateFavedStickers", "params": [], "type": "Update" }, { "id": 1153291573, "predicate": "updateChannelReadMessagesContents", "params": [{ "name": "channel_id", "type": "long" }, { "name": "messages", "type": "Vector<int>" }], "type": "Update" }, { "id": 1887741886, "predicate": "updateContactsReset", "params": [], "type": "Update" }, { "id": -1304443240, "predicate": "updateChannelAvailableMessages", "params": [{ "name": "channel_id", "type": "long" }, { "name": "available_min_id", "type": "int" }], "type": "Update" }, { "id": -513517117, "predicate": "updateDialogUnreadMark", "params": [{ "name": "flags", "type": "#" }, { "name": "unread", "type": "flags.0?true" }, { "name": "peer", "type": "DialogPeer" }], "type": "Update" }, { "id": -1398708869, "predicate": "updateMessagePoll", "params": [{ "name": "flags", "type": "#" }, { "name": "poll_id", "type": "long" }, { "name": "poll", "type": "flags.0?Poll" }, { "name": "results", "type": "PollResults" }], "type": "Update" }, { "id": 1421875280, "predicate": "updateChatDefaultBannedRights", "params": [{ "name": "peer", "type": "Peer" }, { "name": "default_banned_rights", "type": "ChatBannedRights" }, { "name": "version", "type": "int" }], "type": "Update" }, { "id": 422972864, "predicate": "updateFolderPeers", "params": [{ "name": "folder_peers", "type": "Vector<FolderPeer>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1786671974, "predicate": "updatePeerSettings", "params": [{ "name": "peer", "type": "Peer" }, { "name": "settings", "type": "PeerSettings" }], "type": "Update" }, { "id": -1263546448, "predicate": "updatePeerLocated", "params": [{ "name": "peers", "type": "Vector<PeerLocated>" }], "type": "Update" }, { "id": 967122427, "predicate": "updateNewScheduledMessage", "params": [{ "name": "message", "type": "Message" }], "type": "Update" }, { "id": -1870238482, "predicate": "updateDeleteScheduledMessages", "params": [{ "name": "peer", "type": "Peer" }, { "name": "messages", "type": "Vector<int>" }], "type": "Update" }, { "id": -2112423005, "predicate": "updateTheme", "params": [{ "name": "theme", "type": "Theme" }], "type": "Update" }, { "id": -2027964103, "predicate": "updateGeoLiveViewed", "params": [{ "name": "peer", "type": "Peer" }, { "name": "msg_id", "type": "int" }], "type": "Update" }, { "id": 1448076945, "predicate": "updateLoginToken", "params": [], "type": "Update" }, { "id": 274961865, "predicate": "updateMessagePollVote", "params": [{ "name": "poll_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "options", "type": "Vector<bytes>" }, { "name": "qts", "type": "int" }], "type": "Update" }, { "id": 654302845, "predicate": "updateDialogFilter", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "int" }, { "name": "filter", "type": "flags.0?DialogFilter" }], "type": "Update" }, { "id": -1512627963, "predicate": "updateDialogFilterOrder", "params": [{ "name": "order", "type": "Vector<int>" }], "type": "Update" }, { "id": 889491791, "predicate": "updateDialogFilters", "params": [], "type": "Update" }, { "id": 643940105, "predicate": "updatePhoneCallSignalingData", "params": [{ "name": "phone_call_id", "type": "long" }, { "name": "data", "type": "bytes" }], "type": "Update" }, { "id": -761649164, "predicate": "updateChannelMessageForwards", "params": [{ "name": "channel_id", "type": "long" }, { "name": "id", "type": "int" }, { "name": "forwards", "type": "int" }], "type": "Update" }, { "id": -693004986, "predicate": "updateReadChannelDiscussionInbox", "params": [{ "name": "flags", "type": "#" }, { "name": "channel_id", "type": "long" }, { "name": "top_msg_id", "type": "int" }, { "name": "read_max_id", "type": "int" }, { "name": "broadcast_id", "type": "flags.0?long" }, { "name": "broadcast_post", "type": "flags.0?int" }], "type": "Update" }, { "id": 1767677564, "predicate": "updateReadChannelDiscussionOutbox", "params": [{ "name": "channel_id", "type": "long" }, { "name": "top_msg_id", "type": "int" }, { "name": "read_max_id", "type": "int" }], "type": "Update" }, { "id": 610945826, "predicate": "updatePeerBlocked", "params": [{ "name": "peer_id", "type": "Peer" }, { "name": "blocked", "type": "Bool" }], "type": "Update" }, { "id": -1937192669, "predicate": "updateChannelUserTyping", "params": [{ "name": "flags", "type": "#" }, { "name": "channel_id", "type": "long" }, { "name": "top_msg_id", "type": "flags.0?int" }, { "name": "from_id", "type": "Peer" }, { "name": "action", "type": "SendMessageAction" }], "type": "Update" }, { "id": -309990731, "predicate": "updatePinnedMessages", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.0?true" }, { "name": "peer", "type": "Peer" }, { "name": "messages", "type": "Vector<int>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": 1538885128, "predicate": "updatePinnedChannelMessages", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.0?true" }, { "name": "channel_id", "type": "long" }, { "name": "messages", "type": "Vector<int>" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "Update" }, { "id": -124097970, "predicate": "updateChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "Update" }, { "id": -219423922, "predicate": "updateGroupCallParticipants", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "participants", "type": "Vector<GroupCallParticipant>" }, { "name": "version", "type": "int" }], "type": "Update" }, { "id": 347227392, "predicate": "updateGroupCall", "params": [{ "name": "chat_id", "type": "long" }, { "name": "call", "type": "GroupCall" }], "type": "Update" }, { "id": -1147422299, "predicate": "updatePeerHistoryTTL", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "Peer" }, { "name": "ttl_period", "type": "flags.0?int" }], "type": "Update" }, { "id": -796432838, "predicate": "updateChatParticipant", "params": [{ "name": "flags", "type": "#" }, { "name": "chat_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "actor_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "prev_participant", "type": "flags.0?ChatParticipant" }, { "name": "new_participant", "type": "flags.1?ChatParticipant" }, { "name": "invite", "type": "flags.2?ExportedChatInvite" }, { "name": "qts", "type": "int" }], "type": "Update" }, { "id": -1738720581, "predicate": "updateChannelParticipant", "params": [{ "name": "flags", "type": "#" }, { "name": "channel_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "actor_id", "type": "long" }, { "name": "user_id", "type": "long" }, { "name": "prev_participant", "type": "flags.0?ChannelParticipant" }, { "name": "new_participant", "type": "flags.1?ChannelParticipant" }, { "name": "invite", "type": "flags.2?ExportedChatInvite" }, { "name": "qts", "type": "int" }], "type": "Update" }, { "id": -997782967, "predicate": "updateBotStopped", "params": [{ "name": "user_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "stopped", "type": "Bool" }, { "name": "qts", "type": "int" }], "type": "Update" }, { "id": 192428418, "predicate": "updateGroupCallConnection", "params": [{ "name": "flags", "type": "#" }, { "name": "presentation", "type": "flags.0?true" }, { "name": "params", "type": "DataJSON" }], "type": "Update" }, { "id": 1299263278, "predicate": "updateBotCommands", "params": [{ "name": "peer", "type": "Peer" }, { "name": "bot_id", "type": "long" }, { "name": "commands", "type": "Vector<BotCommand>" }], "type": "Update" }, { "id": -1519637954, "predicate": "updates.state", "params": [{ "name": "pts", "type": "int" }, { "name": "qts", "type": "int" }, { "name": "date", "type": "int" }, { "name": "seq", "type": "int" }, { "name": "unread_count", "type": "int" }], "type": "updates.State" }, { "id": 1567990072, "predicate": "updates.differenceEmpty", "params": [{ "name": "date", "type": "int" }, { "name": "seq", "type": "int" }], "type": "updates.Difference" }, { "id": 16030880, "predicate": "updates.difference", "params": [{ "name": "new_messages", "type": "Vector<Message>" }, { "name": "new_encrypted_messages", "type": "Vector<EncryptedMessage>" }, { "name": "other_updates", "type": "Vector<Update>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }, { "name": "state", "type": "updates.State" }], "type": "updates.Difference" }, { "id": -1459938943, "predicate": "updates.differenceSlice", "params": [{ "name": "new_messages", "type": "Vector<Message>" }, { "name": "new_encrypted_messages", "type": "Vector<EncryptedMessage>" }, { "name": "other_updates", "type": "Vector<Update>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }, { "name": "intermediate_state", "type": "updates.State" }], "type": "updates.Difference" }, { "id": 1258196845, "predicate": "updates.differenceTooLong", "params": [{ "name": "pts", "type": "int" }], "type": "updates.Difference" }, { "id": -484987010, "predicate": "updatesTooLong", "params": [], "type": "Updates" }, { "id": 826001400, "predicate": "updateShortMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "out", "type": "flags.1?true" }, { "name": "mentioned", "type": "flags.4?true" }, { "name": "media_unread", "type": "flags.5?true" }, { "name": "silent", "type": "flags.13?true" }, { "name": "id", "type": "int" }, { "name": "user_id", "type": "long" }, { "name": "message", "type": "string" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }, { "name": "date", "type": "int" }, { "name": "fwd_from", "type": "flags.2?MessageFwdHeader" }, { "name": "via_bot_id", "type": "flags.11?long" }, { "name": "reply_to", "type": "flags.3?MessageReplyHeader" }, { "name": "entities", "type": "flags.7?Vector<MessageEntity>" }, { "name": "ttl_period", "type": "flags.25?int" }], "type": "Updates" }, { "id": 1299050149, "predicate": "updateShortChatMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "out", "type": "flags.1?true" }, { "name": "mentioned", "type": "flags.4?true" }, { "name": "media_unread", "type": "flags.5?true" }, { "name": "silent", "type": "flags.13?true" }, { "name": "id", "type": "int" }, { "name": "from_id", "type": "long" }, { "name": "chat_id", "type": "long" }, { "name": "message", "type": "string" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }, { "name": "date", "type": "int" }, { "name": "fwd_from", "type": "flags.2?MessageFwdHeader" }, { "name": "via_bot_id", "type": "flags.11?long" }, { "name": "reply_to", "type": "flags.3?MessageReplyHeader" }, { "name": "entities", "type": "flags.7?Vector<MessageEntity>" }, { "name": "ttl_period", "type": "flags.25?int" }], "type": "Updates" }, { "id": 2027216577, "predicate": "updateShort", "params": [{ "name": "update", "type": "Update" }, { "name": "date", "type": "int" }], "type": "Updates" }, { "id": 1918567619, "predicate": "updatesCombined", "params": [{ "name": "updates", "type": "Vector<Update>" }, { "name": "users", "type": "Vector<User>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "date", "type": "int" }, { "name": "seq_start", "type": "int" }, { "name": "seq", "type": "int" }], "type": "Updates" }, { "id": 1957577280, "predicate": "updates", "params": [{ "name": "updates", "type": "Vector<Update>" }, { "name": "users", "type": "Vector<User>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "date", "type": "int" }, { "name": "seq", "type": "int" }], "type": "Updates" }, { "id": -1877614335, "predicate": "updateShortSentMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "out", "type": "flags.1?true" }, { "name": "id", "type": "int" }, { "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }, { "name": "date", "type": "int" }, { "name": "media", "type": "flags.9?MessageMedia" }, { "name": "entities", "type": "flags.7?Vector<MessageEntity>" }, { "name": "ttl_period", "type": "flags.25?int" }], "type": "Updates" }, { "id": -1916114267, "predicate": "photos.photos", "params": [{ "name": "photos", "type": "Vector<Photo>" }, { "name": "users", "type": "Vector<User>" }], "type": "photos.Photos" }, { "id": 352657236, "predicate": "photos.photosSlice", "params": [{ "name": "count", "type": "int" }, { "name": "photos", "type": "Vector<Photo>" }, { "name": "users", "type": "Vector<User>" }], "type": "photos.Photos" }, { "id": 539045032, "predicate": "photos.photo", "params": [{ "name": "photo", "type": "Photo" }, { "name": "users", "type": "Vector<User>" }], "type": "photos.Photo" }, { "id": 157948117, "predicate": "upload.file", "params": [{ "name": "type", "type": "storage.FileType" }, { "name": "mtime", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "upload.File" }, { "id": -242427324, "predicate": "upload.fileCdnRedirect", "params": [{ "name": "dc_id", "type": "int" }, { "name": "file_token", "type": "bytes" }, { "name": "encryption_key", "type": "bytes" }, { "name": "encryption_iv", "type": "bytes" }, { "name": "file_hashes", "type": "Vector<FileHash>" }], "type": "upload.File" }, { "id": 414687501, "predicate": "dcOption", "params": [{ "name": "flags", "type": "#" }, { "name": "ipv6", "type": "flags.0?true" }, { "name": "media_only", "type": "flags.1?true" }, { "name": "tcpo_only", "type": "flags.2?true" }, { "name": "cdn", "type": "flags.3?true" }, { "name": "static", "type": "flags.4?true" }, { "name": "id", "type": "int" }, { "name": "ip_address", "type": "string" }, { "name": "port", "type": "int" }, { "name": "secret", "type": "flags.10?bytes" }], "type": "DcOption" }, { "id": 856375399, "predicate": "config", "params": [{ "name": "flags", "type": "#" }, { "name": "phonecalls_enabled", "type": "flags.1?true" }, { "name": "default_p2p_contacts", "type": "flags.3?true" }, { "name": "preload_featured_stickers", "type": "flags.4?true" }, { "name": "ignore_phone_entities", "type": "flags.5?true" }, { "name": "revoke_pm_inbox", "type": "flags.6?true" }, { "name": "blocked_mode", "type": "flags.8?true" }, { "name": "pfs_enabled", "type": "flags.13?true" }, { "name": "date", "type": "int" }, { "name": "expires", "type": "int" }, { "name": "test_mode", "type": "Bool" }, { "name": "this_dc", "type": "int" }, { "name": "dc_options", "type": "Vector<DcOption>" }, { "name": "dc_txt_domain_name", "type": "string" }, { "name": "chat_size_max", "type": "int" }, { "name": "megagroup_size_max", "type": "int" }, { "name": "forwarded_count_max", "type": "int" }, { "name": "online_update_period_ms", "type": "int" }, { "name": "offline_blur_timeout_ms", "type": "int" }, { "name": "offline_idle_timeout_ms", "type": "int" }, { "name": "online_cloud_timeout_ms", "type": "int" }, { "name": "notify_cloud_delay_ms", "type": "int" }, { "name": "notify_default_delay_ms", "type": "int" }, { "name": "push_chat_period_ms", "type": "int" }, { "name": "push_chat_limit", "type": "int" }, { "name": "saved_gifs_limit", "type": "int" }, { "name": "edit_time_limit", "type": "int" }, { "name": "revoke_time_limit", "type": "int" }, { "name": "revoke_pm_time_limit", "type": "int" }, { "name": "rating_e_decay", "type": "int" }, { "name": "stickers_recent_limit", "type": "int" }, { "name": "stickers_faved_limit", "type": "int" }, { "name": "channels_read_media_period", "type": "int" }, { "name": "tmp_sessions", "type": "flags.0?int" }, { "name": "pinned_dialogs_count_max", "type": "int" }, { "name": "pinned_infolder_count_max", "type": "int" }, { "name": "call_receive_timeout_ms", "type": "int" }, { "name": "call_ring_timeout_ms", "type": "int" }, { "name": "call_connect_timeout_ms", "type": "int" }, { "name": "call_packet_timeout_ms", "type": "int" }, { "name": "me_url_prefix", "type": "string" }, { "name": "autoupdate_url_prefix", "type": "flags.7?string" }, { "name": "gif_search_username", "type": "flags.9?string" }, { "name": "venue_search_username", "type": "flags.10?string" }, { "name": "img_search_username", "type": "flags.11?string" }, { "name": "static_maps_provider", "type": "flags.12?string" }, { "name": "caption_length_max", "type": "int" }, { "name": "message_length_max", "type": "int" }, { "name": "webfile_dc_id", "type": "int" }, { "name": "suggested_lang_code", "type": "flags.2?string" }, { "name": "lang_pack_version", "type": "flags.2?int" }, { "name": "base_lang_pack_version", "type": "flags.2?int" }], "type": "Config" }, { "id": -1910892683, "predicate": "nearestDc", "params": [{ "name": "country", "type": "string" }, { "name": "this_dc", "type": "int" }, { "name": "nearest_dc", "type": "int" }], "type": "NearestDc" }, { "id": -860107216, "predicate": "help.appUpdate", "params": [{ "name": "flags", "type": "#" }, { "name": "can_not_skip", "type": "flags.0?true" }, { "name": "id", "type": "int" }, { "name": "version", "type": "string" }, { "name": "text", "type": "string" }, { "name": "entities", "type": "Vector<MessageEntity>" }, { "name": "document", "type": "flags.1?Document" }, { "name": "url", "type": "flags.2?string" }, { "name": "sticker", "type": "flags.3?Document" }], "type": "help.AppUpdate" }, { "id": -1000708810, "predicate": "help.noAppUpdate", "params": [], "type": "help.AppUpdate" }, { "id": 415997816, "predicate": "help.inviteText", "params": [{ "name": "message", "type": "string" }], "type": "help.InviteText" }, { "id": -1417756512, "predicate": "encryptedChatEmpty", "params": [{ "name": "id", "type": "int" }], "type": "EncryptedChat" }, { "id": 1722964307, "predicate": "encryptedChatWaiting", "params": [{ "name": "id", "type": "int" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }], "type": "EncryptedChat" }, { "id": 1223809356, "predicate": "encryptedChatRequested", "params": [{ "name": "flags", "type": "#" }, { "name": "folder_id", "type": "flags.0?int" }, { "name": "id", "type": "int" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "g_a", "type": "bytes" }], "type": "EncryptedChat" }, { "id": 1643173063, "predicate": "encryptedChat", "params": [{ "name": "id", "type": "int" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "g_a_or_b", "type": "bytes" }, { "name": "key_fingerprint", "type": "long" }], "type": "EncryptedChat" }, { "id": 505183301, "predicate": "encryptedChatDiscarded", "params": [{ "name": "flags", "type": "#" }, { "name": "history_deleted", "type": "flags.0?true" }, { "name": "id", "type": "int" }], "type": "EncryptedChat" }, { "id": -247351839, "predicate": "inputEncryptedChat", "params": [{ "name": "chat_id", "type": "int" }, { "name": "access_hash", "type": "long" }], "type": "InputEncryptedChat" }, { "id": -1038136962, "predicate": "encryptedFileEmpty", "params": [], "type": "EncryptedFile" }, { "id": 1248893260, "predicate": "encryptedFile", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "size", "type": "int" }, { "name": "dc_id", "type": "int" }, { "name": "key_fingerprint", "type": "int" }], "type": "EncryptedFile" }, { "id": 406307684, "predicate": "inputEncryptedFileEmpty", "params": [], "type": "InputEncryptedFile" }, { "id": 1690108678, "predicate": "inputEncryptedFileUploaded", "params": [{ "name": "id", "type": "long" }, { "name": "parts", "type": "int" }, { "name": "md5_checksum", "type": "string" }, { "name": "key_fingerprint", "type": "int" }], "type": "InputEncryptedFile" }, { "id": 1511503333, "predicate": "inputEncryptedFile", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputEncryptedFile" }, { "id": 767652808, "predicate": "inputEncryptedFileBigUploaded", "params": [{ "name": "id", "type": "long" }, { "name": "parts", "type": "int" }, { "name": "key_fingerprint", "type": "int" }], "type": "InputEncryptedFile" }, { "id": -317144808, "predicate": "encryptedMessage", "params": [{ "name": "random_id", "type": "long" }, { "name": "chat_id", "type": "int" }, { "name": "date", "type": "int" }, { "name": "bytes", "type": "bytes" }, { "name": "file", "type": "EncryptedFile" }], "type": "EncryptedMessage" }, { "id": 594758406, "predicate": "encryptedMessageService", "params": [{ "name": "random_id", "type": "long" }, { "name": "chat_id", "type": "int" }, { "name": "date", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "EncryptedMessage" }, { "id": -1058912715, "predicate": "messages.dhConfigNotModified", "params": [{ "name": "random", "type": "bytes" }], "type": "messages.DhConfig" }, { "id": 740433629, "predicate": "messages.dhConfig", "params": [{ "name": "g", "type": "int" }, { "name": "p", "type": "bytes" }, { "name": "version", "type": "int" }, { "name": "random", "type": "bytes" }], "type": "messages.DhConfig" }, { "id": 1443858741, "predicate": "messages.sentEncryptedMessage", "params": [{ "name": "date", "type": "int" }], "type": "messages.SentEncryptedMessage" }, { "id": -1802240206, "predicate": "messages.sentEncryptedFile", "params": [{ "name": "date", "type": "int" }, { "name": "file", "type": "EncryptedFile" }], "type": "messages.SentEncryptedMessage" }, { "id": 1928391342, "predicate": "inputDocumentEmpty", "params": [], "type": "InputDocument" }, { "id": 448771445, "predicate": "inputDocument", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }], "type": "InputDocument" }, { "id": 922273905, "predicate": "documentEmpty", "params": [{ "name": "id", "type": "long" }], "type": "Document" }, { "id": 512177195, "predicate": "document", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "file_reference", "type": "bytes" }, { "name": "date", "type": "int" }, { "name": "mime_type", "type": "string" }, { "name": "size", "type": "int" }, { "name": "thumbs", "type": "flags.0?Vector<PhotoSize>" }, { "name": "video_thumbs", "type": "flags.1?Vector<VideoSize>" }, { "name": "dc_id", "type": "int" }, { "name": "attributes", "type": "Vector<DocumentAttribute>" }], "type": "Document" }, { "id": 398898678, "predicate": "help.support", "params": [{ "name": "phone_number", "type": "string" }, { "name": "user", "type": "User" }], "type": "help.Support" }, { "id": -1613493288, "predicate": "notifyPeer", "params": [{ "name": "peer", "type": "Peer" }], "type": "NotifyPeer" }, { "id": -1261946036, "predicate": "notifyUsers", "params": [], "type": "NotifyPeer" }, { "id": -1073230141, "predicate": "notifyChats", "params": [], "type": "NotifyPeer" }, { "id": -703403793, "predicate": "notifyBroadcasts", "params": [], "type": "NotifyPeer" }, { "id": 381645902, "predicate": "sendMessageTypingAction", "params": [], "type": "SendMessageAction" }, { "id": -44119819, "predicate": "sendMessageCancelAction", "params": [], "type": "SendMessageAction" }, { "id": -1584933265, "predicate": "sendMessageRecordVideoAction", "params": [], "type": "SendMessageAction" }, { "id": -378127636, "predicate": "sendMessageUploadVideoAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": -718310409, "predicate": "sendMessageRecordAudioAction", "params": [], "type": "SendMessageAction" }, { "id": -212740181, "predicate": "sendMessageUploadAudioAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": -774682074, "predicate": "sendMessageUploadPhotoAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": -1441998364, "predicate": "sendMessageUploadDocumentAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": 393186209, "predicate": "sendMessageGeoLocationAction", "params": [], "type": "SendMessageAction" }, { "id": 1653390447, "predicate": "sendMessageChooseContactAction", "params": [], "type": "SendMessageAction" }, { "id": -580219064, "predicate": "sendMessageGamePlayAction", "params": [], "type": "SendMessageAction" }, { "id": -1997373508, "predicate": "sendMessageRecordRoundAction", "params": [], "type": "SendMessageAction" }, { "id": 608050278, "predicate": "sendMessageUploadRoundAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": -651419003, "predicate": "speakingInGroupCallAction", "params": [], "type": "SendMessageAction" }, { "id": -606432698, "predicate": "sendMessageHistoryImportAction", "params": [{ "name": "progress", "type": "int" }], "type": "SendMessageAction" }, { "id": -1336228175, "predicate": "sendMessageChooseStickerAction", "params": [], "type": "SendMessageAction" }, { "id": 1781674934, "predicate": "sendMessageEmojiInteraction", "params": [{ "name": "emoticon", "type": "string" }, { "name": "interaction", "type": "DataJSON" }], "type": "SendMessageAction" }, { "id": -1234857938, "predicate": "sendMessageEmojiInteractionSeen", "params": [{ "name": "emoticon", "type": "string" }], "type": "SendMessageAction" }, { "id": -1290580579, "predicate": "contacts.found", "params": [{ "name": "my_results", "type": "Vector<Peer>" }, { "name": "results", "type": "Vector<Peer>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.Found" }, { "id": 1335282456, "predicate": "inputPrivacyKeyStatusTimestamp", "params": [], "type": "InputPrivacyKey" }, { "id": -1107622874, "predicate": "inputPrivacyKeyChatInvite", "params": [], "type": "InputPrivacyKey" }, { "id": -88417185, "predicate": "inputPrivacyKeyPhoneCall", "params": [], "type": "InputPrivacyKey" }, { "id": -610373422, "predicate": "inputPrivacyKeyPhoneP2P", "params": [], "type": "InputPrivacyKey" }, { "id": -1529000952, "predicate": "inputPrivacyKeyForwards", "params": [], "type": "InputPrivacyKey" }, { "id": 1461304012, "predicate": "inputPrivacyKeyProfilePhoto", "params": [], "type": "InputPrivacyKey" }, { "id": 55761658, "predicate": "inputPrivacyKeyPhoneNumber", "params": [], "type": "InputPrivacyKey" }, { "id": -786326563, "predicate": "inputPrivacyKeyAddedByPhone", "params": [], "type": "InputPrivacyKey" }, { "id": -1137792208, "predicate": "privacyKeyStatusTimestamp", "params": [], "type": "PrivacyKey" }, { "id": 1343122938, "predicate": "privacyKeyChatInvite", "params": [], "type": "PrivacyKey" }, { "id": 1030105979, "predicate": "privacyKeyPhoneCall", "params": [], "type": "PrivacyKey" }, { "id": 961092808, "predicate": "privacyKeyPhoneP2P", "params": [], "type": "PrivacyKey" }, { "id": 1777096355, "predicate": "privacyKeyForwards", "params": [], "type": "PrivacyKey" }, { "id": -1777000467, "predicate": "privacyKeyProfilePhoto", "params": [], "type": "PrivacyKey" }, { "id": -778378131, "predicate": "privacyKeyPhoneNumber", "params": [], "type": "PrivacyKey" }, { "id": 1124062251, "predicate": "privacyKeyAddedByPhone", "params": [], "type": "PrivacyKey" }, { "id": 218751099, "predicate": "inputPrivacyValueAllowContacts", "params": [], "type": "InputPrivacyRule" }, { "id": 407582158, "predicate": "inputPrivacyValueAllowAll", "params": [], "type": "InputPrivacyRule" }, { "id": 320652927, "predicate": "inputPrivacyValueAllowUsers", "params": [{ "name": "users", "type": "Vector<InputUser>" }], "type": "InputPrivacyRule" }, { "id": 195371015, "predicate": "inputPrivacyValueDisallowContacts", "params": [], "type": "InputPrivacyRule" }, { "id": -697604407, "predicate": "inputPrivacyValueDisallowAll", "params": [], "type": "InputPrivacyRule" }, { "id": -1877932953, "predicate": "inputPrivacyValueDisallowUsers", "params": [{ "name": "users", "type": "Vector<InputUser>" }], "type": "InputPrivacyRule" }, { "id": -2079962673, "predicate": "inputPrivacyValueAllowChatParticipants", "params": [{ "name": "chats", "type": "Vector<long>" }], "type": "InputPrivacyRule" }, { "id": -380694650, "predicate": "inputPrivacyValueDisallowChatParticipants", "params": [{ "name": "chats", "type": "Vector<long>" }], "type": "InputPrivacyRule" }, { "id": -123988, "predicate": "privacyValueAllowContacts", "params": [], "type": "PrivacyRule" }, { "id": 1698855810, "predicate": "privacyValueAllowAll", "params": [], "type": "PrivacyRule" }, { "id": -1198497870, "predicate": "privacyValueAllowUsers", "params": [{ "name": "users", "type": "Vector<long>" }], "type": "PrivacyRule" }, { "id": -125240806, "predicate": "privacyValueDisallowContacts", "params": [], "type": "PrivacyRule" }, { "id": -1955338397, "predicate": "privacyValueDisallowAll", "params": [], "type": "PrivacyRule" }, { "id": -463335103, "predicate": "privacyValueDisallowUsers", "params": [{ "name": "users", "type": "Vector<long>" }], "type": "PrivacyRule" }, { "id": 1796427406, "predicate": "privacyValueAllowChatParticipants", "params": [{ "name": "chats", "type": "Vector<long>" }], "type": "PrivacyRule" }, { "id": 1103656293, "predicate": "privacyValueDisallowChatParticipants", "params": [{ "name": "chats", "type": "Vector<long>" }], "type": "PrivacyRule" }, { "id": 1352683077, "predicate": "account.privacyRules", "params": [{ "name": "rules", "type": "Vector<PrivacyRule>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "account.PrivacyRules" }, { "id": -1194283041, "predicate": "accountDaysTTL", "params": [{ "name": "days", "type": "int" }], "type": "AccountDaysTTL" }, { "id": 1815593308, "predicate": "documentAttributeImageSize", "params": [{ "name": "w", "type": "int" }, { "name": "h", "type": "int" }], "type": "DocumentAttribute" }, { "id": 297109817, "predicate": "documentAttributeAnimated", "params": [], "type": "DocumentAttribute" }, { "id": 1662637586, "predicate": "documentAttributeSticker", "params": [{ "name": "flags", "type": "#" }, { "name": "mask", "type": "flags.1?true" }, { "name": "alt", "type": "string" }, { "name": "stickerset", "type": "InputStickerSet" }, { "name": "mask_coords", "type": "flags.0?MaskCoords" }], "type": "DocumentAttribute" }, { "id": 250621158, "predicate": "documentAttributeVideo", "params": [{ "name": "flags", "type": "#" }, { "name": "round_message", "type": "flags.0?true" }, { "name": "supports_streaming", "type": "flags.1?true" }, { "name": "duration", "type": "int" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }], "type": "DocumentAttribute" }, { "id": -1739392570, "predicate": "documentAttributeAudio", "params": [{ "name": "flags", "type": "#" }, { "name": "voice", "type": "flags.10?true" }, { "name": "duration", "type": "int" }, { "name": "title", "type": "flags.0?string" }, { "name": "performer", "type": "flags.1?string" }, { "name": "waveform", "type": "flags.2?bytes" }], "type": "DocumentAttribute" }, { "id": 358154344, "predicate": "documentAttributeFilename", "params": [{ "name": "file_name", "type": "string" }], "type": "DocumentAttribute" }, { "id": -1744710921, "predicate": "documentAttributeHasStickers", "params": [], "type": "DocumentAttribute" }, { "id": -244016606, "predicate": "messages.stickersNotModified", "params": [], "type": "messages.Stickers" }, { "id": 816245886, "predicate": "messages.stickers", "params": [{ "name": "hash", "type": "long" }, { "name": "stickers", "type": "Vector<Document>" }], "type": "messages.Stickers" }, { "id": 313694676, "predicate": "stickerPack", "params": [{ "name": "emoticon", "type": "string" }, { "name": "documents", "type": "Vector<long>" }], "type": "StickerPack" }, { "id": -395967805, "predicate": "messages.allStickersNotModified", "params": [], "type": "messages.AllStickers" }, { "id": -843329861, "predicate": "messages.allStickers", "params": [{ "name": "hash", "type": "long" }, { "name": "sets", "type": "Vector<StickerSet>" }], "type": "messages.AllStickers" }, { "id": -2066640507, "predicate": "messages.affectedMessages", "params": [{ "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }], "type": "messages.AffectedMessages" }, { "id": -350980120, "predicate": "webPageEmpty", "params": [{ "name": "id", "type": "long" }], "type": "WebPage" }, { "id": -981018084, "predicate": "webPagePending", "params": [{ "name": "id", "type": "long" }, { "name": "date", "type": "int" }], "type": "WebPage" }, { "id": -392411726, "predicate": "webPage", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "long" }, { "name": "url", "type": "string" }, { "name": "display_url", "type": "string" }, { "name": "hash", "type": "int" }, { "name": "type", "type": "flags.0?string" }, { "name": "site_name", "type": "flags.1?string" }, { "name": "title", "type": "flags.2?string" }, { "name": "description", "type": "flags.3?string" }, { "name": "photo", "type": "flags.4?Photo" }, { "name": "embed_url", "type": "flags.5?string" }, { "name": "embed_type", "type": "flags.5?string" }, { "name": "embed_width", "type": "flags.6?int" }, { "name": "embed_height", "type": "flags.6?int" }, { "name": "duration", "type": "flags.7?int" }, { "name": "author", "type": "flags.8?string" }, { "name": "document", "type": "flags.9?Document" }, { "name": "cached_page", "type": "flags.10?Page" }, { "name": "attributes", "type": "flags.12?Vector<WebPageAttribute>" }], "type": "WebPage" }, { "id": 1930545681, "predicate": "webPageNotModified", "params": [{ "name": "flags", "type": "#" }, { "name": "cached_page_views", "type": "flags.0?int" }], "type": "WebPage" }, { "id": -1392388579, "predicate": "authorization", "params": [{ "name": "flags", "type": "#" }, { "name": "current", "type": "flags.0?true" }, { "name": "official_app", "type": "flags.1?true" }, { "name": "password_pending", "type": "flags.2?true" }, { "name": "hash", "type": "long" }, { "name": "device_model", "type": "string" }, { "name": "platform", "type": "string" }, { "name": "system_version", "type": "string" }, { "name": "api_id", "type": "int" }, { "name": "app_name", "type": "string" }, { "name": "app_version", "type": "string" }, { "name": "date_created", "type": "int" }, { "name": "date_active", "type": "int" }, { "name": "ip", "type": "string" }, { "name": "country", "type": "string" }, { "name": "region", "type": "string" }], "type": "Authorization" }, { "id": 307276766, "predicate": "account.authorizations", "params": [{ "name": "authorizations", "type": "Vector<Authorization>" }], "type": "account.Authorizations" }, { "id": 408623183, "predicate": "account.password", "params": [{ "name": "flags", "type": "#" }, { "name": "has_recovery", "type": "flags.0?true" }, { "name": "has_secure_values", "type": "flags.1?true" }, { "name": "has_password", "type": "flags.2?true" }, { "name": "current_algo", "type": "flags.2?PasswordKdfAlgo" }, { "name": "srp_B", "type": "flags.2?bytes" }, { "name": "srp_id", "type": "flags.2?long" }, { "name": "hint", "type": "flags.3?string" }, { "name": "email_unconfirmed_pattern", "type": "flags.4?string" }, { "name": "new_algo", "type": "PasswordKdfAlgo" }, { "name": "new_secure_algo", "type": "SecurePasswordKdfAlgo" }, { "name": "secure_random", "type": "bytes" }, { "name": "pending_reset_date", "type": "flags.5?int" }], "type": "account.Password" }, { "id": -1705233435, "predicate": "account.passwordSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "email", "type": "flags.0?string" }, { "name": "secure_settings", "type": "flags.1?SecureSecretSettings" }], "type": "account.PasswordSettings" }, { "id": -1036572727, "predicate": "account.passwordInputSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "new_algo", "type": "flags.0?PasswordKdfAlgo" }, { "name": "new_password_hash", "type": "flags.0?bytes" }, { "name": "hint", "type": "flags.0?string" }, { "name": "email", "type": "flags.1?string" }, { "name": "new_secure_settings", "type": "flags.2?SecureSecretSettings" }], "type": "account.PasswordInputSettings" }, { "id": 326715557, "predicate": "auth.passwordRecovery", "params": [{ "name": "email_pattern", "type": "string" }], "type": "auth.PasswordRecovery" }, { "id": -1551583367, "predicate": "receivedNotifyMessage", "params": [{ "name": "id", "type": "int" }, { "name": "flags", "type": "int" }], "type": "ReceivedNotifyMessage" }, { "id": -1316944408, "predicate": "chatInviteExported", "params": [{ "name": "flags", "type": "#" }, { "name": "revoked", "type": "flags.0?true" }, { "name": "permanent", "type": "flags.5?true" }, { "name": "link", "type": "string" }, { "name": "admin_id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "start_date", "type": "flags.4?int" }, { "name": "expire_date", "type": "flags.1?int" }, { "name": "usage_limit", "type": "flags.2?int" }, { "name": "usage", "type": "flags.3?int" }], "type": "ExportedChatInvite" }, { "id": 1516793212, "predicate": "chatInviteAlready", "params": [{ "name": "chat", "type": "Chat" }], "type": "ChatInvite" }, { "id": -540871282, "predicate": "chatInvite", "params": [{ "name": "flags", "type": "#" }, { "name": "channel", "type": "flags.0?true" }, { "name": "broadcast", "type": "flags.1?true" }, { "name": "public", "type": "flags.2?true" }, { "name": "megagroup", "type": "flags.3?true" }, { "name": "title", "type": "string" }, { "name": "photo", "type": "Photo" }, { "name": "participants_count", "type": "int" }, { "name": "participants", "type": "flags.4?Vector<User>" }], "type": "ChatInvite" }, { "id": 1634294960, "predicate": "chatInvitePeek", "params": [{ "name": "chat", "type": "Chat" }, { "name": "expires", "type": "int" }], "type": "ChatInvite" }, { "id": -4838507, "predicate": "inputStickerSetEmpty", "params": [], "type": "InputStickerSet" }, { "id": -1645763991, "predicate": "inputStickerSetID", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputStickerSet" }, { "id": -2044933984, "predicate": "inputStickerSetShortName", "params": [{ "name": "short_name", "type": "string" }], "type": "InputStickerSet" }, { "id": 42402760, "predicate": "inputStickerSetAnimatedEmoji", "params": [], "type": "InputStickerSet" }, { "id": -427863538, "predicate": "inputStickerSetDice", "params": [{ "name": "emoticon", "type": "string" }], "type": "InputStickerSet" }, { "id": -673242758, "predicate": "stickerSet", "params": [{ "name": "flags", "type": "#" }, { "name": "archived", "type": "flags.1?true" }, { "name": "official", "type": "flags.2?true" }, { "name": "masks", "type": "flags.3?true" }, { "name": "animated", "type": "flags.5?true" }, { "name": "installed_date", "type": "flags.0?int" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "title", "type": "string" }, { "name": "short_name", "type": "string" }, { "name": "thumbs", "type": "flags.4?Vector<PhotoSize>" }, { "name": "thumb_dc_id", "type": "flags.4?int" }, { "name": "thumb_version", "type": "flags.4?int" }, { "name": "count", "type": "int" }, { "name": "hash", "type": "int" }], "type": "StickerSet" }, { "id": -1240849242, "predicate": "messages.stickerSet", "params": [{ "name": "set", "type": "StickerSet" }, { "name": "packs", "type": "Vector<StickerPack>" }, { "name": "documents", "type": "Vector<Document>" }], "type": "messages.StickerSet" }, { "id": -1032140601, "predicate": "botCommand", "params": [{ "name": "command", "type": "string" }, { "name": "description", "type": "string" }], "type": "BotCommand" }, { "id": 460632885, "predicate": "botInfo", "params": [{ "name": "user_id", "type": "long" }, { "name": "description", "type": "string" }, { "name": "commands", "type": "Vector<BotCommand>" }], "type": "BotInfo" }, { "id": -1560655744, "predicate": "keyboardButton", "params": [{ "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": 629866245, "predicate": "keyboardButtonUrl", "params": [{ "name": "text", "type": "string" }, { "name": "url", "type": "string" }], "type": "KeyboardButton" }, { "id": 901503851, "predicate": "keyboardButtonCallback", "params": [{ "name": "flags", "type": "#" }, { "name": "requires_password", "type": "flags.0?true" }, { "name": "text", "type": "string" }, { "name": "data", "type": "bytes" }], "type": "KeyboardButton" }, { "id": -1318425559, "predicate": "keyboardButtonRequestPhone", "params": [{ "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": -59151553, "predicate": "keyboardButtonRequestGeoLocation", "params": [{ "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": 90744648, "predicate": "keyboardButtonSwitchInline", "params": [{ "name": "flags", "type": "#" }, { "name": "same_peer", "type": "flags.0?true" }, { "name": "text", "type": "string" }, { "name": "query", "type": "string" }], "type": "KeyboardButton" }, { "id": 1358175439, "predicate": "keyboardButtonGame", "params": [{ "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": -1344716869, "predicate": "keyboardButtonBuy", "params": [{ "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": 280464681, "predicate": "keyboardButtonUrlAuth", "params": [{ "name": "flags", "type": "#" }, { "name": "text", "type": "string" }, { "name": "fwd_text", "type": "flags.0?string" }, { "name": "url", "type": "string" }, { "name": "button_id", "type": "int" }], "type": "KeyboardButton" }, { "id": -802258988, "predicate": "inputKeyboardButtonUrlAuth", "params": [{ "name": "flags", "type": "#" }, { "name": "request_write_access", "type": "flags.0?true" }, { "name": "text", "type": "string" }, { "name": "fwd_text", "type": "flags.1?string" }, { "name": "url", "type": "string" }, { "name": "bot", "type": "InputUser" }], "type": "KeyboardButton" }, { "id": -1144565411, "predicate": "keyboardButtonRequestPoll", "params": [{ "name": "flags", "type": "#" }, { "name": "quiz", "type": "flags.0?Bool" }, { "name": "text", "type": "string" }], "type": "KeyboardButton" }, { "id": 2002815875, "predicate": "keyboardButtonRow", "params": [{ "name": "buttons", "type": "Vector<KeyboardButton>" }], "type": "KeyboardButtonRow" }, { "id": -1606526075, "predicate": "replyKeyboardHide", "params": [{ "name": "flags", "type": "#" }, { "name": "selective", "type": "flags.2?true" }], "type": "ReplyMarkup" }, { "id": -2035021048, "predicate": "replyKeyboardForceReply", "params": [{ "name": "flags", "type": "#" }, { "name": "single_use", "type": "flags.1?true" }, { "name": "selective", "type": "flags.2?true" }, { "name": "placeholder", "type": "flags.3?string" }], "type": "ReplyMarkup" }, { "id": -2049074735, "predicate": "replyKeyboardMarkup", "params": [{ "name": "flags", "type": "#" }, { "name": "resize", "type": "flags.0?true" }, { "name": "single_use", "type": "flags.1?true" }, { "name": "selective", "type": "flags.2?true" }, { "name": "rows", "type": "Vector<KeyboardButtonRow>" }, { "name": "placeholder", "type": "flags.3?string" }], "type": "ReplyMarkup" }, { "id": 1218642516, "predicate": "replyInlineMarkup", "params": [{ "name": "rows", "type": "Vector<KeyboardButtonRow>" }], "type": "ReplyMarkup" }, { "id": -1148011883, "predicate": "messageEntityUnknown", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -100378723, "predicate": "messageEntityMention", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1868782349, "predicate": "messageEntityHashtag", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1827637959, "predicate": "messageEntityBotCommand", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1859134776, "predicate": "messageEntityUrl", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1692693954, "predicate": "messageEntityEmail", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -1117713463, "predicate": "messageEntityBold", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -2106619040, "predicate": "messageEntityItalic", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 681706865, "predicate": "messageEntityCode", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1938967520, "predicate": "messageEntityPre", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }, { "name": "language", "type": "string" }], "type": "MessageEntity" }, { "id": 1990644519, "predicate": "messageEntityTextUrl", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }, { "name": "url", "type": "string" }], "type": "MessageEntity" }, { "id": -595914432, "predicate": "messageEntityMentionName", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }, { "name": "user_id", "type": "long" }], "type": "MessageEntity" }, { "id": 546203849, "predicate": "inputMessageEntityMentionName", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }, { "name": "user_id", "type": "InputUser" }], "type": "MessageEntity" }, { "id": -1687559349, "predicate": "messageEntityPhone", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1280209983, "predicate": "messageEntityCashtag", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -1672577397, "predicate": "messageEntityUnderline", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -1090087980, "predicate": "messageEntityStrike", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 34469328, "predicate": "messageEntityBlockquote", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": 1981704948, "predicate": "messageEntityBankCard", "params": [{ "name": "offset", "type": "int" }, { "name": "length", "type": "int" }], "type": "MessageEntity" }, { "id": -292807034, "predicate": "inputChannelEmpty", "params": [], "type": "InputChannel" }, { "id": -212145112, "predicate": "inputChannel", "params": [{ "name": "channel_id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputChannel" }, { "id": 1536380829, "predicate": "inputChannelFromMessage", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "channel_id", "type": "long" }], "type": "InputChannel" }, { "id": 2131196633, "predicate": "contacts.resolvedPeer", "params": [{ "name": "peer", "type": "Peer" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.ResolvedPeer" }, { "id": 182649427, "predicate": "messageRange", "params": [{ "name": "min_id", "type": "int" }, { "name": "max_id", "type": "int" }], "type": "MessageRange" }, { "id": 1041346555, "predicate": "updates.channelDifferenceEmpty", "params": [{ "name": "flags", "type": "#" }, { "name": "final", "type": "flags.0?true" }, { "name": "pts", "type": "int" }, { "name": "timeout", "type": "flags.1?int" }], "type": "updates.ChannelDifference" }, { "id": -1531132162, "predicate": "updates.channelDifferenceTooLong", "params": [{ "name": "flags", "type": "#" }, { "name": "final", "type": "flags.0?true" }, { "name": "timeout", "type": "flags.1?int" }, { "name": "dialog", "type": "Dialog" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "updates.ChannelDifference" }, { "id": 543450958, "predicate": "updates.channelDifference", "params": [{ "name": "flags", "type": "#" }, { "name": "final", "type": "flags.0?true" }, { "name": "pts", "type": "int" }, { "name": "timeout", "type": "flags.1?int" }, { "name": "new_messages", "type": "Vector<Message>" }, { "name": "other_updates", "type": "Vector<Update>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "updates.ChannelDifference" }, { "id": -1798033689, "predicate": "channelMessagesFilterEmpty", "params": [], "type": "ChannelMessagesFilter" }, { "id": -847783593, "predicate": "channelMessagesFilter", "params": [{ "name": "flags", "type": "#" }, { "name": "exclude_new_messages", "type": "flags.1?true" }, { "name": "ranges", "type": "Vector<MessageRange>" }], "type": "ChannelMessagesFilter" }, { "id": -1072953408, "predicate": "channelParticipant", "params": [{ "name": "user_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "ChannelParticipant" }, { "id": 682146919, "predicate": "channelParticipantSelf", "params": [{ "name": "user_id", "type": "long" }, { "name": "inviter_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "ChannelParticipant" }, { "id": 803602899, "predicate": "channelParticipantCreator", "params": [{ "name": "flags", "type": "#" }, { "name": "user_id", "type": "long" }, { "name": "admin_rights", "type": "ChatAdminRights" }, { "name": "rank", "type": "flags.0?string" }], "type": "ChannelParticipant" }, { "id": 885242707, "predicate": "channelParticipantAdmin", "params": [{ "name": "flags", "type": "#" }, { "name": "can_edit", "type": "flags.0?true" }, { "name": "self", "type": "flags.1?true" }, { "name": "user_id", "type": "long" }, { "name": "inviter_id", "type": "flags.1?long" }, { "name": "promoted_by", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_rights", "type": "ChatAdminRights" }, { "name": "rank", "type": "flags.2?string" }], "type": "ChannelParticipant" }, { "id": 1844969806, "predicate": "channelParticipantBanned", "params": [{ "name": "flags", "type": "#" }, { "name": "left", "type": "flags.0?true" }, { "name": "peer", "type": "Peer" }, { "name": "kicked_by", "type": "long" }, { "name": "date", "type": "int" }, { "name": "banned_rights", "type": "ChatBannedRights" }], "type": "ChannelParticipant" }, { "id": 453242886, "predicate": "channelParticipantLeft", "params": [{ "name": "peer", "type": "Peer" }], "type": "ChannelParticipant" }, { "id": -566281095, "predicate": "channelParticipantsRecent", "params": [], "type": "ChannelParticipantsFilter" }, { "id": -1268741783, "predicate": "channelParticipantsAdmins", "params": [], "type": "ChannelParticipantsFilter" }, { "id": -1548400251, "predicate": "channelParticipantsKicked", "params": [{ "name": "q", "type": "string" }], "type": "ChannelParticipantsFilter" }, { "id": -1328445861, "predicate": "channelParticipantsBots", "params": [], "type": "ChannelParticipantsFilter" }, { "id": 338142689, "predicate": "channelParticipantsBanned", "params": [{ "name": "q", "type": "string" }], "type": "ChannelParticipantsFilter" }, { "id": 106343499, "predicate": "channelParticipantsSearch", "params": [{ "name": "q", "type": "string" }], "type": "ChannelParticipantsFilter" }, { "id": -1150621555, "predicate": "channelParticipantsContacts", "params": [{ "name": "q", "type": "string" }], "type": "ChannelParticipantsFilter" }, { "id": -531931925, "predicate": "channelParticipantsMentions", "params": [{ "name": "flags", "type": "#" }, { "name": "q", "type": "flags.0?string" }, { "name": "top_msg_id", "type": "flags.1?int" }], "type": "ChannelParticipantsFilter" }, { "id": -1699676497, "predicate": "channels.channelParticipants", "params": [{ "name": "count", "type": "int" }, { "name": "participants", "type": "Vector<ChannelParticipant>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "channels.ChannelParticipants" }, { "id": -266911767, "predicate": "channels.channelParticipantsNotModified", "params": [], "type": "channels.ChannelParticipants" }, { "id": -541588713, "predicate": "channels.channelParticipant", "params": [{ "name": "participant", "type": "ChannelParticipant" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "channels.ChannelParticipant" }, { "id": 2013922064, "predicate": "help.termsOfService", "params": [{ "name": "flags", "type": "#" }, { "name": "popup", "type": "flags.0?true" }, { "name": "id", "type": "DataJSON" }, { "name": "text", "type": "string" }, { "name": "entities", "type": "Vector<MessageEntity>" }, { "name": "min_age_confirm", "type": "flags.1?int" }], "type": "help.TermsOfService" }, { "id": -402498398, "predicate": "messages.savedGifsNotModified", "params": [], "type": "messages.SavedGifs" }, { "id": -2069878259, "predicate": "messages.savedGifs", "params": [{ "name": "hash", "type": "long" }, { "name": "gifs", "type": "Vector<Document>" }], "type": "messages.SavedGifs" }, { "id": 864077702, "predicate": "inputBotInlineMessageMediaAuto", "params": [{ "name": "flags", "type": "#" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": 1036876423, "predicate": "inputBotInlineMessageText", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.0?true" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": -1768777083, "predicate": "inputBotInlineMessageMediaGeo", "params": [{ "name": "flags", "type": "#" }, { "name": "geo_point", "type": "InputGeoPoint" }, { "name": "heading", "type": "flags.0?int" }, { "name": "period", "type": "flags.1?int" }, { "name": "proximity_notification_radius", "type": "flags.3?int" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": 1098628881, "predicate": "inputBotInlineMessageMediaVenue", "params": [{ "name": "flags", "type": "#" }, { "name": "geo_point", "type": "InputGeoPoint" }, { "name": "title", "type": "string" }, { "name": "address", "type": "string" }, { "name": "provider", "type": "string" }, { "name": "venue_id", "type": "string" }, { "name": "venue_type", "type": "string" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": -1494368259, "predicate": "inputBotInlineMessageMediaContact", "params": [{ "name": "flags", "type": "#" }, { "name": "phone_number", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "vcard", "type": "string" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": 1262639204, "predicate": "inputBotInlineMessageGame", "params": [{ "name": "flags", "type": "#" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": -672693723, "predicate": "inputBotInlineMessageMediaInvoice", "params": [{ "name": "flags", "type": "#" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "flags.0?InputWebDocument" }, { "name": "invoice", "type": "Invoice" }, { "name": "payload", "type": "bytes" }, { "name": "provider", "type": "string" }, { "name": "provider_data", "type": "DataJSON" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "InputBotInlineMessage" }, { "id": -2000710887, "predicate": "inputBotInlineResult", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "string" }, { "name": "type", "type": "string" }, { "name": "title", "type": "flags.1?string" }, { "name": "description", "type": "flags.2?string" }, { "name": "url", "type": "flags.3?string" }, { "name": "thumb", "type": "flags.4?InputWebDocument" }, { "name": "content", "type": "flags.5?InputWebDocument" }, { "name": "send_message", "type": "InputBotInlineMessage" }], "type": "InputBotInlineResult" }, { "id": -1462213465, "predicate": "inputBotInlineResultPhoto", "params": [{ "name": "id", "type": "string" }, { "name": "type", "type": "string" }, { "name": "photo", "type": "InputPhoto" }, { "name": "send_message", "type": "InputBotInlineMessage" }], "type": "InputBotInlineResult" }, { "id": -459324, "predicate": "inputBotInlineResultDocument", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "string" }, { "name": "type", "type": "string" }, { "name": "title", "type": "flags.1?string" }, { "name": "description", "type": "flags.2?string" }, { "name": "document", "type": "InputDocument" }, { "name": "send_message", "type": "InputBotInlineMessage" }], "type": "InputBotInlineResult" }, { "id": 1336154098, "predicate": "inputBotInlineResultGame", "params": [{ "name": "id", "type": "string" }, { "name": "short_name", "type": "string" }, { "name": "send_message", "type": "InputBotInlineMessage" }], "type": "InputBotInlineResult" }, { "id": 1984755728, "predicate": "botInlineMessageMediaAuto", "params": [{ "name": "flags", "type": "#" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": -1937807902, "predicate": "botInlineMessageText", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.0?true" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": 85477117, "predicate": "botInlineMessageMediaGeo", "params": [{ "name": "flags", "type": "#" }, { "name": "geo", "type": "GeoPoint" }, { "name": "heading", "type": "flags.0?int" }, { "name": "period", "type": "flags.1?int" }, { "name": "proximity_notification_radius", "type": "flags.3?int" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": -1970903652, "predicate": "botInlineMessageMediaVenue", "params": [{ "name": "flags", "type": "#" }, { "name": "geo", "type": "GeoPoint" }, { "name": "title", "type": "string" }, { "name": "address", "type": "string" }, { "name": "provider", "type": "string" }, { "name": "venue_id", "type": "string" }, { "name": "venue_type", "type": "string" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": 416402882, "predicate": "botInlineMessageMediaContact", "params": [{ "name": "flags", "type": "#" }, { "name": "phone_number", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "vcard", "type": "string" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": 894081801, "predicate": "botInlineMessageMediaInvoice", "params": [{ "name": "flags", "type": "#" }, { "name": "shipping_address_requested", "type": "flags.1?true" }, { "name": "test", "type": "flags.3?true" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "flags.0?WebDocument" }, { "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }], "type": "BotInlineMessage" }, { "id": 295067450, "predicate": "botInlineResult", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "string" }, { "name": "type", "type": "string" }, { "name": "title", "type": "flags.1?string" }, { "name": "description", "type": "flags.2?string" }, { "name": "url", "type": "flags.3?string" }, { "name": "thumb", "type": "flags.4?WebDocument" }, { "name": "content", "type": "flags.5?WebDocument" }, { "name": "send_message", "type": "BotInlineMessage" }], "type": "BotInlineResult" }, { "id": 400266251, "predicate": "botInlineMediaResult", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "string" }, { "name": "type", "type": "string" }, { "name": "photo", "type": "flags.0?Photo" }, { "name": "document", "type": "flags.1?Document" }, { "name": "title", "type": "flags.2?string" }, { "name": "description", "type": "flags.3?string" }, { "name": "send_message", "type": "BotInlineMessage" }], "type": "BotInlineResult" }, { "id": -1803769784, "predicate": "messages.botResults", "params": [{ "name": "flags", "type": "#" }, { "name": "gallery", "type": "flags.0?true" }, { "name": "query_id", "type": "long" }, { "name": "next_offset", "type": "flags.1?string" }, { "name": "switch_pm", "type": "flags.2?InlineBotSwitchPM" }, { "name": "results", "type": "Vector<BotInlineResult>" }, { "name": "cache_time", "type": "int" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.BotResults" }, { "id": 1571494644, "predicate": "exportedMessageLink", "params": [{ "name": "link", "type": "string" }, { "name": "html", "type": "string" }], "type": "ExportedMessageLink" }, { "id": 1601666510, "predicate": "messageFwdHeader", "params": [{ "name": "flags", "type": "#" }, { "name": "imported", "type": "flags.7?true" }, { "name": "from_id", "type": "flags.0?Peer" }, { "name": "from_name", "type": "flags.5?string" }, { "name": "date", "type": "int" }, { "name": "channel_post", "type": "flags.2?int" }, { "name": "post_author", "type": "flags.3?string" }, { "name": "saved_from_peer", "type": "flags.4?Peer" }, { "name": "saved_from_msg_id", "type": "flags.4?int" }, { "name": "psa_type", "type": "flags.6?string" }], "type": "MessageFwdHeader" }, { "id": 1923290508, "predicate": "auth.codeTypeSms", "params": [], "type": "auth.CodeType" }, { "id": 1948046307, "predicate": "auth.codeTypeCall", "params": [], "type": "auth.CodeType" }, { "id": 577556219, "predicate": "auth.codeTypeFlashCall", "params": [], "type": "auth.CodeType" }, { "id": 1035688326, "predicate": "auth.sentCodeTypeApp", "params": [{ "name": "length", "type": "int" }], "type": "auth.SentCodeType" }, { "id": -1073693790, "predicate": "auth.sentCodeTypeSms", "params": [{ "name": "length", "type": "int" }], "type": "auth.SentCodeType" }, { "id": 1398007207, "predicate": "auth.sentCodeTypeCall", "params": [{ "name": "length", "type": "int" }], "type": "auth.SentCodeType" }, { "id": -1425815847, "predicate": "auth.sentCodeTypeFlashCall", "params": [{ "name": "pattern", "type": "string" }], "type": "auth.SentCodeType" }, { "id": 911761060, "predicate": "messages.botCallbackAnswer", "params": [{ "name": "flags", "type": "#" }, { "name": "alert", "type": "flags.1?true" }, { "name": "has_url", "type": "flags.3?true" }, { "name": "native_ui", "type": "flags.4?true" }, { "name": "message", "type": "flags.0?string" }, { "name": "url", "type": "flags.2?string" }, { "name": "cache_time", "type": "int" }], "type": "messages.BotCallbackAnswer" }, { "id": 649453030, "predicate": "messages.messageEditData", "params": [{ "name": "flags", "type": "#" }, { "name": "caption", "type": "flags.0?true" }], "type": "messages.MessageEditData" }, { "id": -1995686519, "predicate": "inputBotInlineMessageID", "params": [{ "name": "dc_id", "type": "int" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputBotInlineMessageID" }, { "id": -1227287081, "predicate": "inputBotInlineMessageID64", "params": [{ "name": "dc_id", "type": "int" }, { "name": "owner_id", "type": "long" }, { "name": "id", "type": "int" }, { "name": "access_hash", "type": "long" }], "type": "InputBotInlineMessageID" }, { "id": 1008755359, "predicate": "inlineBotSwitchPM", "params": [{ "name": "text", "type": "string" }, { "name": "start_param", "type": "string" }], "type": "InlineBotSwitchPM" }, { "id": 863093588, "predicate": "messages.peerDialogs", "params": [{ "name": "dialogs", "type": "Vector<Dialog>" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }, { "name": "state", "type": "updates.State" }], "type": "messages.PeerDialogs" }, { "id": -305282981, "predicate": "topPeer", "params": [{ "name": "peer", "type": "Peer" }, { "name": "rating", "type": "double" }], "type": "TopPeer" }, { "id": -1419371685, "predicate": "topPeerCategoryBotsPM", "params": [], "type": "TopPeerCategory" }, { "id": 344356834, "predicate": "topPeerCategoryBotsInline", "params": [], "type": "TopPeerCategory" }, { "id": 104314861, "predicate": "topPeerCategoryCorrespondents", "params": [], "type": "TopPeerCategory" }, { "id": -1122524854, "predicate": "topPeerCategoryGroups", "params": [], "type": "TopPeerCategory" }, { "id": 371037736, "predicate": "topPeerCategoryChannels", "params": [], "type": "TopPeerCategory" }, { "id": 511092620, "predicate": "topPeerCategoryPhoneCalls", "params": [], "type": "TopPeerCategory" }, { "id": -1472172887, "predicate": "topPeerCategoryForwardUsers", "params": [], "type": "TopPeerCategory" }, { "id": -68239120, "predicate": "topPeerCategoryForwardChats", "params": [], "type": "TopPeerCategory" }, { "id": -75283823, "predicate": "topPeerCategoryPeers", "params": [{ "name": "category", "type": "TopPeerCategory" }, { "name": "count", "type": "int" }, { "name": "peers", "type": "Vector<TopPeer>" }], "type": "TopPeerCategoryPeers" }, { "id": -567906571, "predicate": "contacts.topPeersNotModified", "params": [], "type": "contacts.TopPeers" }, { "id": 1891070632, "predicate": "contacts.topPeers", "params": [{ "name": "categories", "type": "Vector<TopPeerCategoryPeers>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "contacts.TopPeers" }, { "id": -1255369827, "predicate": "contacts.topPeersDisabled", "params": [], "type": "contacts.TopPeers" }, { "id": 453805082, "predicate": "draftMessageEmpty", "params": [{ "name": "flags", "type": "#" }, { "name": "date", "type": "flags.0?int" }], "type": "DraftMessage" }, { "id": -40996577, "predicate": "draftMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.1?true" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }, { "name": "date", "type": "int" }], "type": "DraftMessage" }, { "id": -958657434, "predicate": "messages.featuredStickersNotModified", "params": [{ "name": "count", "type": "int" }], "type": "messages.FeaturedStickers" }, { "id": -2067782896, "predicate": "messages.featuredStickers", "params": [{ "name": "hash", "type": "long" }, { "name": "count", "type": "int" }, { "name": "sets", "type": "Vector<StickerSetCovered>" }, { "name": "unread", "type": "Vector<long>" }], "type": "messages.FeaturedStickers" }, { "id": 186120336, "predicate": "messages.recentStickersNotModified", "params": [], "type": "messages.RecentStickers" }, { "id": -1999405994, "predicate": "messages.recentStickers", "params": [{ "name": "hash", "type": "long" }, { "name": "packs", "type": "Vector<StickerPack>" }, { "name": "stickers", "type": "Vector<Document>" }, { "name": "dates", "type": "Vector<int>" }], "type": "messages.RecentStickers" }, { "id": 1338747336, "predicate": "messages.archivedStickers", "params": [{ "name": "count", "type": "int" }, { "name": "sets", "type": "Vector<StickerSetCovered>" }], "type": "messages.ArchivedStickers" }, { "id": 946083368, "predicate": "messages.stickerSetInstallResultSuccess", "params": [], "type": "messages.StickerSetInstallResult" }, { "id": 904138920, "predicate": "messages.stickerSetInstallResultArchive", "params": [{ "name": "sets", "type": "Vector<StickerSetCovered>" }], "type": "messages.StickerSetInstallResult" }, { "id": 1678812626, "predicate": "stickerSetCovered", "params": [{ "name": "set", "type": "StickerSet" }, { "name": "cover", "type": "Document" }], "type": "StickerSetCovered" }, { "id": 872932635, "predicate": "stickerSetMultiCovered", "params": [{ "name": "set", "type": "StickerSet" }, { "name": "covers", "type": "Vector<Document>" }], "type": "StickerSetCovered" }, { "id": -1361650766, "predicate": "maskCoords", "params": [{ "name": "n", "type": "int" }, { "name": "x", "type": "double" }, { "name": "y", "type": "double" }, { "name": "zoom", "type": "double" }], "type": "MaskCoords" }, { "id": 1251549527, "predicate": "inputStickeredMediaPhoto", "params": [{ "name": "id", "type": "InputPhoto" }], "type": "InputStickeredMedia" }, { "id": 70813275, "predicate": "inputStickeredMediaDocument", "params": [{ "name": "id", "type": "InputDocument" }], "type": "InputStickeredMedia" }, { "id": -1107729093, "predicate": "game", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "short_name", "type": "string" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "Photo" }, { "name": "document", "type": "flags.0?Document" }], "type": "Game" }, { "id": 53231223, "predicate": "inputGameID", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputGame" }, { "id": -1020139510, "predicate": "inputGameShortName", "params": [{ "name": "bot_id", "type": "InputUser" }, { "name": "short_name", "type": "string" }], "type": "InputGame" }, { "id": 1940093419, "predicate": "highScore", "params": [{ "name": "pos", "type": "int" }, { "name": "user_id", "type": "long" }, { "name": "score", "type": "int" }], "type": "HighScore" }, { "id": -1707344487, "predicate": "messages.highScores", "params": [{ "name": "scores", "type": "Vector<HighScore>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.HighScores" }, { "id": -599948721, "predicate": "textEmpty", "params": [], "type": "RichText" }, { "id": 1950782688, "predicate": "textPlain", "params": [{ "name": "text", "type": "string" }], "type": "RichText" }, { "id": 1730456516, "predicate": "textBold", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": -653089380, "predicate": "textItalic", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": -1054465340, "predicate": "textUnderline", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": -1678197867, "predicate": "textStrike", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": 1816074681, "predicate": "textFixed", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": 1009288385, "predicate": "textUrl", "params": [{ "name": "text", "type": "RichText" }, { "name": "url", "type": "string" }, { "name": "webpage_id", "type": "long" }], "type": "RichText" }, { "id": -564523562, "predicate": "textEmail", "params": [{ "name": "text", "type": "RichText" }, { "name": "email", "type": "string" }], "type": "RichText" }, { "id": 2120376535, "predicate": "textConcat", "params": [{ "name": "texts", "type": "Vector<RichText>" }], "type": "RichText" }, { "id": -311786236, "predicate": "textSubscript", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": -939827711, "predicate": "textSuperscript", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": 55281185, "predicate": "textMarked", "params": [{ "name": "text", "type": "RichText" }], "type": "RichText" }, { "id": 483104362, "predicate": "textPhone", "params": [{ "name": "text", "type": "RichText" }, { "name": "phone", "type": "string" }], "type": "RichText" }, { "id": 136105807, "predicate": "textImage", "params": [{ "name": "document_id", "type": "long" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }], "type": "RichText" }, { "id": 894777186, "predicate": "textAnchor", "params": [{ "name": "text", "type": "RichText" }, { "name": "name", "type": "string" }], "type": "RichText" }, { "id": 324435594, "predicate": "pageBlockUnsupported", "params": [], "type": "PageBlock" }, { "id": 1890305021, "predicate": "pageBlockTitle", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -1879401953, "predicate": "pageBlockSubtitle", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -1162877472, "predicate": "pageBlockAuthorDate", "params": [{ "name": "author", "type": "RichText" }, { "name": "published_date", "type": "int" }], "type": "PageBlock" }, { "id": -1076861716, "predicate": "pageBlockHeader", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -248793375, "predicate": "pageBlockSubheader", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": 1182402406, "predicate": "pageBlockParagraph", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -1066346178, "predicate": "pageBlockPreformatted", "params": [{ "name": "text", "type": "RichText" }, { "name": "language", "type": "string" }], "type": "PageBlock" }, { "id": 1216809369, "predicate": "pageBlockFooter", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -618614392, "predicate": "pageBlockDivider", "params": [], "type": "PageBlock" }, { "id": -837994576, "predicate": "pageBlockAnchor", "params": [{ "name": "name", "type": "string" }], "type": "PageBlock" }, { "id": -454524911, "predicate": "pageBlockList", "params": [{ "name": "items", "type": "Vector<PageListItem>" }], "type": "PageBlock" }, { "id": 641563686, "predicate": "pageBlockBlockquote", "params": [{ "name": "text", "type": "RichText" }, { "name": "caption", "type": "RichText" }], "type": "PageBlock" }, { "id": 1329878739, "predicate": "pageBlockPullquote", "params": [{ "name": "text", "type": "RichText" }, { "name": "caption", "type": "RichText" }], "type": "PageBlock" }, { "id": 391759200, "predicate": "pageBlockPhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "photo_id", "type": "long" }, { "name": "caption", "type": "PageCaption" }, { "name": "url", "type": "flags.0?string" }, { "name": "webpage_id", "type": "flags.0?long" }], "type": "PageBlock" }, { "id": 2089805750, "predicate": "pageBlockVideo", "params": [{ "name": "flags", "type": "#" }, { "name": "autoplay", "type": "flags.0?true" }, { "name": "loop", "type": "flags.1?true" }, { "name": "video_id", "type": "long" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": 972174080, "predicate": "pageBlockCover", "params": [{ "name": "cover", "type": "PageBlock" }], "type": "PageBlock" }, { "id": -1468953147, "predicate": "pageBlockEmbed", "params": [{ "name": "flags", "type": "#" }, { "name": "full_width", "type": "flags.0?true" }, { "name": "allow_scrolling", "type": "flags.3?true" }, { "name": "url", "type": "flags.1?string" }, { "name": "html", "type": "flags.2?string" }, { "name": "poster_photo_id", "type": "flags.4?long" }, { "name": "w", "type": "flags.5?int" }, { "name": "h", "type": "flags.5?int" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": -229005301, "predicate": "pageBlockEmbedPost", "params": [{ "name": "url", "type": "string" }, { "name": "webpage_id", "type": "long" }, { "name": "author_photo_id", "type": "long" }, { "name": "author", "type": "string" }, { "name": "date", "type": "int" }, { "name": "blocks", "type": "Vector<PageBlock>" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": 1705048653, "predicate": "pageBlockCollage", "params": [{ "name": "items", "type": "Vector<PageBlock>" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": 52401552, "predicate": "pageBlockSlideshow", "params": [{ "name": "items", "type": "Vector<PageBlock>" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": -283684427, "predicate": "pageBlockChannel", "params": [{ "name": "channel", "type": "Chat" }], "type": "PageBlock" }, { "id": -2143067670, "predicate": "pageBlockAudio", "params": [{ "name": "audio_id", "type": "long" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": 504660880, "predicate": "pageBlockKicker", "params": [{ "name": "text", "type": "RichText" }], "type": "PageBlock" }, { "id": -1085412734, "predicate": "pageBlockTable", "params": [{ "name": "flags", "type": "#" }, { "name": "bordered", "type": "flags.0?true" }, { "name": "striped", "type": "flags.1?true" }, { "name": "title", "type": "RichText" }, { "name": "rows", "type": "Vector<PageTableRow>" }], "type": "PageBlock" }, { "id": -1702174239, "predicate": "pageBlockOrderedList", "params": [{ "name": "items", "type": "Vector<PageListOrderedItem>" }], "type": "PageBlock" }, { "id": 1987480557, "predicate": "pageBlockDetails", "params": [{ "name": "flags", "type": "#" }, { "name": "open", "type": "flags.0?true" }, { "name": "blocks", "type": "Vector<PageBlock>" }, { "name": "title", "type": "RichText" }], "type": "PageBlock" }, { "id": 370236054, "predicate": "pageBlockRelatedArticles", "params": [{ "name": "title", "type": "RichText" }, { "name": "articles", "type": "Vector<PageRelatedArticle>" }], "type": "PageBlock" }, { "id": -1538310410, "predicate": "pageBlockMap", "params": [{ "name": "geo", "type": "GeoPoint" }, { "name": "zoom", "type": "int" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "caption", "type": "PageCaption" }], "type": "PageBlock" }, { "id": -2048646399, "predicate": "phoneCallDiscardReasonMissed", "params": [], "type": "PhoneCallDiscardReason" }, { "id": -527056480, "predicate": "phoneCallDiscardReasonDisconnect", "params": [], "type": "PhoneCallDiscardReason" }, { "id": 1471006352, "predicate": "phoneCallDiscardReasonHangup", "params": [], "type": "PhoneCallDiscardReason" }, { "id": -84416311, "predicate": "phoneCallDiscardReasonBusy", "params": [], "type": "PhoneCallDiscardReason" }, { "id": 2104790276, "predicate": "dataJSON", "params": [{ "name": "data", "type": "string" }], "type": "DataJSON" }, { "id": -886477832, "predicate": "labeledPrice", "params": [{ "name": "label", "type": "string" }, { "name": "amount", "type": "long" }], "type": "LabeledPrice" }, { "id": 215516896, "predicate": "invoice", "params": [{ "name": "flags", "type": "#" }, { "name": "test", "type": "flags.0?true" }, { "name": "name_requested", "type": "flags.1?true" }, { "name": "phone_requested", "type": "flags.2?true" }, { "name": "email_requested", "type": "flags.3?true" }, { "name": "shipping_address_requested", "type": "flags.4?true" }, { "name": "flexible", "type": "flags.5?true" }, { "name": "phone_to_provider", "type": "flags.6?true" }, { "name": "email_to_provider", "type": "flags.7?true" }, { "name": "currency", "type": "string" }, { "name": "prices", "type": "Vector<LabeledPrice>" }, { "name": "max_tip_amount", "type": "flags.8?long" }, { "name": "suggested_tip_amounts", "type": "flags.8?Vector<long>" }], "type": "Invoice" }, { "id": -368917890, "predicate": "paymentCharge", "params": [{ "name": "id", "type": "string" }, { "name": "provider_charge_id", "type": "string" }], "type": "PaymentCharge" }, { "id": 512535275, "predicate": "postAddress", "params": [{ "name": "street_line1", "type": "string" }, { "name": "street_line2", "type": "string" }, { "name": "city", "type": "string" }, { "name": "state", "type": "string" }, { "name": "country_iso2", "type": "string" }, { "name": "post_code", "type": "string" }], "type": "PostAddress" }, { "id": -1868808300, "predicate": "paymentRequestedInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "name", "type": "flags.0?string" }, { "name": "phone", "type": "flags.1?string" }, { "name": "email", "type": "flags.2?string" }, { "name": "shipping_address", "type": "flags.3?PostAddress" }], "type": "PaymentRequestedInfo" }, { "id": -842892769, "predicate": "paymentSavedCredentialsCard", "params": [{ "name": "id", "type": "string" }, { "name": "title", "type": "string" }], "type": "PaymentSavedCredentials" }, { "id": 475467473, "predicate": "webDocument", "params": [{ "name": "url", "type": "string" }, { "name": "access_hash", "type": "long" }, { "name": "size", "type": "int" }, { "name": "mime_type", "type": "string" }, { "name": "attributes", "type": "Vector<DocumentAttribute>" }], "type": "WebDocument" }, { "id": -104284986, "predicate": "webDocumentNoProxy", "params": [{ "name": "url", "type": "string" }, { "name": "size", "type": "int" }, { "name": "mime_type", "type": "string" }, { "name": "attributes", "type": "Vector<DocumentAttribute>" }], "type": "WebDocument" }, { "id": -1678949555, "predicate": "inputWebDocument", "params": [{ "name": "url", "type": "string" }, { "name": "size", "type": "int" }, { "name": "mime_type", "type": "string" }, { "name": "attributes", "type": "Vector<DocumentAttribute>" }], "type": "InputWebDocument" }, { "id": -1036396922, "predicate": "inputWebFileLocation", "params": [{ "name": "url", "type": "string" }, { "name": "access_hash", "type": "long" }], "type": "InputWebFileLocation" }, { "id": -1625153079, "predicate": "inputWebFileGeoPointLocation", "params": [{ "name": "geo_point", "type": "InputGeoPoint" }, { "name": "access_hash", "type": "long" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "zoom", "type": "int" }, { "name": "scale", "type": "int" }], "type": "InputWebFileLocation" }, { "id": 568808380, "predicate": "upload.webFile", "params": [{ "name": "size", "type": "int" }, { "name": "mime_type", "type": "string" }, { "name": "file_type", "type": "storage.FileType" }, { "name": "mtime", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "upload.WebFile" }, { "id": 378828315, "predicate": "payments.paymentForm", "params": [{ "name": "flags", "type": "#" }, { "name": "can_save_credentials", "type": "flags.2?true" }, { "name": "password_missing", "type": "flags.3?true" }, { "name": "form_id", "type": "long" }, { "name": "bot_id", "type": "long" }, { "name": "invoice", "type": "Invoice" }, { "name": "provider_id", "type": "long" }, { "name": "url", "type": "string" }, { "name": "native_provider", "type": "flags.4?string" }, { "name": "native_params", "type": "flags.4?DataJSON" }, { "name": "saved_info", "type": "flags.0?PaymentRequestedInfo" }, { "name": "saved_credentials", "type": "flags.1?PaymentSavedCredentials" }, { "name": "users", "type": "Vector<User>" }], "type": "payments.PaymentForm" }, { "id": -784000893, "predicate": "payments.validatedRequestedInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "flags.0?string" }, { "name": "shipping_options", "type": "flags.1?Vector<ShippingOption>" }], "type": "payments.ValidatedRequestedInfo" }, { "id": 1314881805, "predicate": "payments.paymentResult", "params": [{ "name": "updates", "type": "Updates" }], "type": "payments.PaymentResult" }, { "id": -666824391, "predicate": "payments.paymentVerificationNeeded", "params": [{ "name": "url", "type": "string" }], "type": "payments.PaymentResult" }, { "id": 1891958275, "predicate": "payments.paymentReceipt", "params": [{ "name": "flags", "type": "#" }, { "name": "date", "type": "int" }, { "name": "bot_id", "type": "long" }, { "name": "provider_id", "type": "long" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "photo", "type": "flags.2?WebDocument" }, { "name": "invoice", "type": "Invoice" }, { "name": "info", "type": "flags.0?PaymentRequestedInfo" }, { "name": "shipping", "type": "flags.1?ShippingOption" }, { "name": "tip_amount", "type": "flags.3?long" }, { "name": "currency", "type": "string" }, { "name": "total_amount", "type": "long" }, { "name": "credentials_title", "type": "string" }, { "name": "users", "type": "Vector<User>" }], "type": "payments.PaymentReceipt" }, { "id": -74456004, "predicate": "payments.savedInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "has_saved_credentials", "type": "flags.1?true" }, { "name": "saved_info", "type": "flags.0?PaymentRequestedInfo" }], "type": "payments.SavedInfo" }, { "id": -1056001329, "predicate": "inputPaymentCredentialsSaved", "params": [{ "name": "id", "type": "string" }, { "name": "tmp_password", "type": "bytes" }], "type": "InputPaymentCredentials" }, { "id": 873977640, "predicate": "inputPaymentCredentials", "params": [{ "name": "flags", "type": "#" }, { "name": "save", "type": "flags.0?true" }, { "name": "data", "type": "DataJSON" }], "type": "InputPaymentCredentials" }, { "id": 178373535, "predicate": "inputPaymentCredentialsApplePay", "params": [{ "name": "payment_data", "type": "DataJSON" }], "type": "InputPaymentCredentials" }, { "id": -1966921727, "predicate": "inputPaymentCredentialsGooglePay", "params": [{ "name": "payment_token", "type": "DataJSON" }], "type": "InputPaymentCredentials" }, { "id": -614138572, "predicate": "account.tmpPassword", "params": [{ "name": "tmp_password", "type": "bytes" }, { "name": "valid_until", "type": "int" }], "type": "account.TmpPassword" }, { "id": -1239335713, "predicate": "shippingOption", "params": [{ "name": "id", "type": "string" }, { "name": "title", "type": "string" }, { "name": "prices", "type": "Vector<LabeledPrice>" }], "type": "ShippingOption" }, { "id": -6249322, "predicate": "inputStickerSetItem", "params": [{ "name": "flags", "type": "#" }, { "name": "document", "type": "InputDocument" }, { "name": "emoji", "type": "string" }, { "name": "mask_coords", "type": "flags.0?MaskCoords" }], "type": "InputStickerSetItem" }, { "id": 506920429, "predicate": "inputPhoneCall", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputPhoneCall" }, { "id": 1399245077, "predicate": "phoneCallEmpty", "params": [{ "name": "id", "type": "long" }], "type": "PhoneCall" }, { "id": -987599081, "predicate": "phoneCallWaiting", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.6?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "protocol", "type": "PhoneCallProtocol" }, { "name": "receive_date", "type": "flags.0?int" }], "type": "PhoneCall" }, { "id": 347139340, "predicate": "phoneCallRequested", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.6?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "g_a_hash", "type": "bytes" }, { "name": "protocol", "type": "PhoneCallProtocol" }], "type": "PhoneCall" }, { "id": 912311057, "predicate": "phoneCallAccepted", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.6?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "g_b", "type": "bytes" }, { "name": "protocol", "type": "PhoneCallProtocol" }], "type": "PhoneCall" }, { "id": -1770029977, "predicate": "phoneCall", "params": [{ "name": "flags", "type": "#" }, { "name": "p2p_allowed", "type": "flags.5?true" }, { "name": "video", "type": "flags.6?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "date", "type": "int" }, { "name": "admin_id", "type": "long" }, { "name": "participant_id", "type": "long" }, { "name": "g_a_or_b", "type": "bytes" }, { "name": "key_fingerprint", "type": "long" }, { "name": "protocol", "type": "PhoneCallProtocol" }, { "name": "connections", "type": "Vector<PhoneConnection>" }, { "name": "start_date", "type": "int" }], "type": "PhoneCall" }, { "id": 1355435489, "predicate": "phoneCallDiscarded", "params": [{ "name": "flags", "type": "#" }, { "name": "need_rating", "type": "flags.2?true" }, { "name": "need_debug", "type": "flags.3?true" }, { "name": "video", "type": "flags.6?true" }, { "name": "id", "type": "long" }, { "name": "reason", "type": "flags.0?PhoneCallDiscardReason" }, { "name": "duration", "type": "flags.1?int" }], "type": "PhoneCall" }, { "id": -1655957568, "predicate": "phoneConnection", "params": [{ "name": "id", "type": "long" }, { "name": "ip", "type": "string" }, { "name": "ipv6", "type": "string" }, { "name": "port", "type": "int" }, { "name": "peer_tag", "type": "bytes" }], "type": "PhoneConnection" }, { "id": 1667228533, "predicate": "phoneConnectionWebrtc", "params": [{ "name": "flags", "type": "#" }, { "name": "turn", "type": "flags.0?true" }, { "name": "stun", "type": "flags.1?true" }, { "name": "id", "type": "long" }, { "name": "ip", "type": "string" }, { "name": "ipv6", "type": "string" }, { "name": "port", "type": "int" }, { "name": "username", "type": "string" }, { "name": "password", "type": "string" }], "type": "PhoneConnection" }, { "id": -58224696, "predicate": "phoneCallProtocol", "params": [{ "name": "flags", "type": "#" }, { "name": "udp_p2p", "type": "flags.0?true" }, { "name": "udp_reflector", "type": "flags.1?true" }, { "name": "min_layer", "type": "int" }, { "name": "max_layer", "type": "int" }, { "name": "library_versions", "type": "Vector<string>" }], "type": "PhoneCallProtocol" }, { "id": -326966976, "predicate": "phone.phoneCall", "params": [{ "name": "phone_call", "type": "PhoneCall" }, { "name": "users", "type": "Vector<User>" }], "type": "phone.PhoneCall" }, { "id": -290921362, "predicate": "upload.cdnFileReuploadNeeded", "params": [{ "name": "request_token", "type": "bytes" }], "type": "upload.CdnFile" }, { "id": -1449145777, "predicate": "upload.cdnFile", "params": [{ "name": "bytes", "type": "bytes" }], "type": "upload.CdnFile" }, { "id": -914167110, "predicate": "cdnPublicKey", "params": [{ "name": "dc_id", "type": "int" }, { "name": "public_key", "type": "string" }], "type": "CdnPublicKey" }, { "id": 1462101002, "predicate": "cdnConfig", "params": [{ "name": "public_keys", "type": "Vector<CdnPublicKey>" }], "type": "CdnConfig" }, { "id": -892239370, "predicate": "langPackString", "params": [{ "name": "key", "type": "string" }, { "name": "value", "type": "string" }], "type": "LangPackString" }, { "id": 1816636575, "predicate": "langPackStringPluralized", "params": [{ "name": "flags", "type": "#" }, { "name": "key", "type": "string" }, { "name": "zero_value", "type": "flags.0?string" }, { "name": "one_value", "type": "flags.1?string" }, { "name": "two_value", "type": "flags.2?string" }, { "name": "few_value", "type": "flags.3?string" }, { "name": "many_value", "type": "flags.4?string" }, { "name": "other_value", "type": "string" }], "type": "LangPackString" }, { "id": 695856818, "predicate": "langPackStringDeleted", "params": [{ "name": "key", "type": "string" }], "type": "LangPackString" }, { "id": -209337866, "predicate": "langPackDifference", "params": [{ "name": "lang_code", "type": "string" }, { "name": "from_version", "type": "int" }, { "name": "version", "type": "int" }, { "name": "strings", "type": "Vector<LangPackString>" }], "type": "LangPackDifference" }, { "id": -288727837, "predicate": "langPackLanguage", "params": [{ "name": "flags", "type": "#" }, { "name": "official", "type": "flags.0?true" }, { "name": "rtl", "type": "flags.2?true" }, { "name": "beta", "type": "flags.3?true" }, { "name": "name", "type": "string" }, { "name": "native_name", "type": "string" }, { "name": "lang_code", "type": "string" }, { "name": "base_lang_code", "type": "flags.1?string" }, { "name": "plural_code", "type": "string" }, { "name": "strings_count", "type": "int" }, { "name": "translated_count", "type": "int" }, { "name": "translations_url", "type": "string" }], "type": "LangPackLanguage" }, { "id": -421545947, "predicate": "channelAdminLogEventActionChangeTitle", "params": [{ "name": "prev_value", "type": "string" }, { "name": "new_value", "type": "string" }], "type": "ChannelAdminLogEventAction" }, { "id": 1427671598, "predicate": "channelAdminLogEventActionChangeAbout", "params": [{ "name": "prev_value", "type": "string" }, { "name": "new_value", "type": "string" }], "type": "ChannelAdminLogEventAction" }, { "id": 1783299128, "predicate": "channelAdminLogEventActionChangeUsername", "params": [{ "name": "prev_value", "type": "string" }, { "name": "new_value", "type": "string" }], "type": "ChannelAdminLogEventAction" }, { "id": 1129042607, "predicate": "channelAdminLogEventActionChangePhoto", "params": [{ "name": "prev_photo", "type": "Photo" }, { "name": "new_photo", "type": "Photo" }], "type": "ChannelAdminLogEventAction" }, { "id": 460916654, "predicate": "channelAdminLogEventActionToggleInvites", "params": [{ "name": "new_value", "type": "Bool" }], "type": "ChannelAdminLogEventAction" }, { "id": 648939889, "predicate": "channelAdminLogEventActionToggleSignatures", "params": [{ "name": "new_value", "type": "Bool" }], "type": "ChannelAdminLogEventAction" }, { "id": -370660328, "predicate": "channelAdminLogEventActionUpdatePinned", "params": [{ "name": "message", "type": "Message" }], "type": "ChannelAdminLogEventAction" }, { "id": 1889215493, "predicate": "channelAdminLogEventActionEditMessage", "params": [{ "name": "prev_message", "type": "Message" }, { "name": "new_message", "type": "Message" }], "type": "ChannelAdminLogEventAction" }, { "id": 1121994683, "predicate": "channelAdminLogEventActionDeleteMessage", "params": [{ "name": "message", "type": "Message" }], "type": "ChannelAdminLogEventAction" }, { "id": 405815507, "predicate": "channelAdminLogEventActionParticipantJoin", "params": [], "type": "ChannelAdminLogEventAction" }, { "id": -124291086, "predicate": "channelAdminLogEventActionParticipantLeave", "params": [], "type": "ChannelAdminLogEventAction" }, { "id": -484690728, "predicate": "channelAdminLogEventActionParticipantInvite", "params": [{ "name": "participant", "type": "ChannelParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": -422036098, "predicate": "channelAdminLogEventActionParticipantToggleBan", "params": [{ "name": "prev_participant", "type": "ChannelParticipant" }, { "name": "new_participant", "type": "ChannelParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": -714643696, "predicate": "channelAdminLogEventActionParticipantToggleAdmin", "params": [{ "name": "prev_participant", "type": "ChannelParticipant" }, { "name": "new_participant", "type": "ChannelParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": -1312568665, "predicate": "channelAdminLogEventActionChangeStickerSet", "params": [{ "name": "prev_stickerset", "type": "InputStickerSet" }, { "name": "new_stickerset", "type": "InputStickerSet" }], "type": "ChannelAdminLogEventAction" }, { "id": 1599903217, "predicate": "channelAdminLogEventActionTogglePreHistoryHidden", "params": [{ "name": "new_value", "type": "Bool" }], "type": "ChannelAdminLogEventAction" }, { "id": 771095562, "predicate": "channelAdminLogEventActionDefaultBannedRights", "params": [{ "name": "prev_banned_rights", "type": "ChatBannedRights" }, { "name": "new_banned_rights", "type": "ChatBannedRights" }], "type": "ChannelAdminLogEventAction" }, { "id": -1895328189, "predicate": "channelAdminLogEventActionStopPoll", "params": [{ "name": "message", "type": "Message" }], "type": "ChannelAdminLogEventAction" }, { "id": 84703944, "predicate": "channelAdminLogEventActionChangeLinkedChat", "params": [{ "name": "prev_value", "type": "long" }, { "name": "new_value", "type": "long" }], "type": "ChannelAdminLogEventAction" }, { "id": 241923758, "predicate": "channelAdminLogEventActionChangeLocation", "params": [{ "name": "prev_value", "type": "ChannelLocation" }, { "name": "new_value", "type": "ChannelLocation" }], "type": "ChannelAdminLogEventAction" }, { "id": 1401984889, "predicate": "channelAdminLogEventActionToggleSlowMode", "params": [{ "name": "prev_value", "type": "int" }, { "name": "new_value", "type": "int" }], "type": "ChannelAdminLogEventAction" }, { "id": 589338437, "predicate": "channelAdminLogEventActionStartGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }], "type": "ChannelAdminLogEventAction" }, { "id": -610299584, "predicate": "channelAdminLogEventActionDiscardGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }], "type": "ChannelAdminLogEventAction" }, { "id": -115071790, "predicate": "channelAdminLogEventActionParticipantMute", "params": [{ "name": "participant", "type": "GroupCallParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": -431740480, "predicate": "channelAdminLogEventActionParticipantUnmute", "params": [{ "name": "participant", "type": "GroupCallParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": 1456906823, "predicate": "channelAdminLogEventActionToggleGroupCallSetting", "params": [{ "name": "join_muted", "type": "Bool" }], "type": "ChannelAdminLogEventAction" }, { "id": 1557846647, "predicate": "channelAdminLogEventActionParticipantJoinByInvite", "params": [{ "name": "invite", "type": "ExportedChatInvite" }], "type": "ChannelAdminLogEventAction" }, { "id": 1515256996, "predicate": "channelAdminLogEventActionExportedInviteDelete", "params": [{ "name": "invite", "type": "ExportedChatInvite" }], "type": "ChannelAdminLogEventAction" }, { "id": 1091179342, "predicate": "channelAdminLogEventActionExportedInviteRevoke", "params": [{ "name": "invite", "type": "ExportedChatInvite" }], "type": "ChannelAdminLogEventAction" }, { "id": -384910503, "predicate": "channelAdminLogEventActionExportedInviteEdit", "params": [{ "name": "prev_invite", "type": "ExportedChatInvite" }, { "name": "new_invite", "type": "ExportedChatInvite" }], "type": "ChannelAdminLogEventAction" }, { "id": 1048537159, "predicate": "channelAdminLogEventActionParticipantVolume", "params": [{ "name": "participant", "type": "GroupCallParticipant" }], "type": "ChannelAdminLogEventAction" }, { "id": 1855199800, "predicate": "channelAdminLogEventActionChangeHistoryTTL", "params": [{ "name": "prev_value", "type": "int" }, { "name": "new_value", "type": "int" }], "type": "ChannelAdminLogEventAction" }, { "id": -26672755, "predicate": "channelAdminLogEventActionChangeTheme", "params": [{ "name": "prev_value", "type": "string" }, { "name": "new_value", "type": "string" }], "type": "ChannelAdminLogEventAction" }, { "id": 531458253, "predicate": "channelAdminLogEvent", "params": [{ "name": "id", "type": "long" }, { "name": "date", "type": "int" }, { "name": "user_id", "type": "long" }, { "name": "action", "type": "ChannelAdminLogEventAction" }], "type": "ChannelAdminLogEvent" }, { "id": -309659827, "predicate": "channels.adminLogResults", "params": [{ "name": "events", "type": "Vector<ChannelAdminLogEvent>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "channels.AdminLogResults" }, { "id": -368018716, "predicate": "channelAdminLogEventsFilter", "params": [{ "name": "flags", "type": "#" }, { "name": "join", "type": "flags.0?true" }, { "name": "leave", "type": "flags.1?true" }, { "name": "invite", "type": "flags.2?true" }, { "name": "ban", "type": "flags.3?true" }, { "name": "unban", "type": "flags.4?true" }, { "name": "kick", "type": "flags.5?true" }, { "name": "unkick", "type": "flags.6?true" }, { "name": "promote", "type": "flags.7?true" }, { "name": "demote", "type": "flags.8?true" }, { "name": "info", "type": "flags.9?true" }, { "name": "settings", "type": "flags.10?true" }, { "name": "pinned", "type": "flags.11?true" }, { "name": "edit", "type": "flags.12?true" }, { "name": "delete", "type": "flags.13?true" }, { "name": "group_call", "type": "flags.14?true" }, { "name": "invites", "type": "flags.15?true" }], "type": "ChannelAdminLogEventsFilter" }, { "id": 1558266229, "predicate": "popularContact", "params": [{ "name": "client_id", "type": "long" }, { "name": "importers", "type": "int" }], "type": "PopularContact" }, { "id": -1634752813, "predicate": "messages.favedStickersNotModified", "params": [], "type": "messages.FavedStickers" }, { "id": 750063767, "predicate": "messages.favedStickers", "params": [{ "name": "hash", "type": "long" }, { "name": "packs", "type": "Vector<StickerPack>" }, { "name": "stickers", "type": "Vector<Document>" }], "type": "messages.FavedStickers" }, { "id": 1189204285, "predicate": "recentMeUrlUnknown", "params": [{ "name": "url", "type": "string" }], "type": "RecentMeUrl" }, { "id": -1188296222, "predicate": "recentMeUrlUser", "params": [{ "name": "url", "type": "string" }, { "name": "user_id", "type": "long" }], "type": "RecentMeUrl" }, { "id": -1294306862, "predicate": "recentMeUrlChat", "params": [{ "name": "url", "type": "string" }, { "name": "chat_id", "type": "long" }], "type": "RecentMeUrl" }, { "id": -347535331, "predicate": "recentMeUrlChatInvite", "params": [{ "name": "url", "type": "string" }, { "name": "chat_invite", "type": "ChatInvite" }], "type": "RecentMeUrl" }, { "id": -1140172836, "predicate": "recentMeUrlStickerSet", "params": [{ "name": "url", "type": "string" }, { "name": "set", "type": "StickerSetCovered" }], "type": "RecentMeUrl" }, { "id": 235081943, "predicate": "help.recentMeUrls", "params": [{ "name": "urls", "type": "Vector<RecentMeUrl>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "help.RecentMeUrls" }, { "id": 482797855, "predicate": "inputSingleMedia", "params": [{ "name": "flags", "type": "#" }, { "name": "media", "type": "InputMedia" }, { "name": "random_id", "type": "long" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.0?Vector<MessageEntity>" }], "type": "InputSingleMedia" }, { "id": -1493633966, "predicate": "webAuthorization", "params": [{ "name": "hash", "type": "long" }, { "name": "bot_id", "type": "long" }, { "name": "domain", "type": "string" }, { "name": "browser", "type": "string" }, { "name": "platform", "type": "string" }, { "name": "date_created", "type": "int" }, { "name": "date_active", "type": "int" }, { "name": "ip", "type": "string" }, { "name": "region", "type": "string" }], "type": "WebAuthorization" }, { "id": -313079300, "predicate": "account.webAuthorizations", "params": [{ "name": "authorizations", "type": "Vector<WebAuthorization>" }, { "name": "users", "type": "Vector<User>" }], "type": "account.WebAuthorizations" }, { "id": -1502174430, "predicate": "inputMessageID", "params": [{ "name": "id", "type": "int" }], "type": "InputMessage" }, { "id": -1160215659, "predicate": "inputMessageReplyTo", "params": [{ "name": "id", "type": "int" }], "type": "InputMessage" }, { "id": -2037963464, "predicate": "inputMessagePinned", "params": [], "type": "InputMessage" }, { "id": -1392895362, "predicate": "inputMessageCallbackQuery", "params": [{ "name": "id", "type": "int" }, { "name": "query_id", "type": "long" }], "type": "InputMessage" }, { "id": -55902537, "predicate": "inputDialogPeer", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "InputDialogPeer" }, { "id": 1684014375, "predicate": "inputDialogPeerFolder", "params": [{ "name": "folder_id", "type": "int" }], "type": "InputDialogPeer" }, { "id": -445792507, "predicate": "dialogPeer", "params": [{ "name": "peer", "type": "Peer" }], "type": "DialogPeer" }, { "id": 1363483106, "predicate": "dialogPeerFolder", "params": [{ "name": "folder_id", "type": "int" }], "type": "DialogPeer" }, { "id": 223655517, "predicate": "messages.foundStickerSetsNotModified", "params": [], "type": "messages.FoundStickerSets" }, { "id": -1963942446, "predicate": "messages.foundStickerSets", "params": [{ "name": "hash", "type": "long" }, { "name": "sets", "type": "Vector<StickerSetCovered>" }], "type": "messages.FoundStickerSets" }, { "id": 1648543603, "predicate": "fileHash", "params": [{ "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "bytes" }], "type": "FileHash" }, { "id": 1968737087, "predicate": "inputClientProxy", "params": [{ "name": "address", "type": "string" }, { "name": "port", "type": "int" }], "type": "InputClientProxy" }, { "id": -483352705, "predicate": "help.termsOfServiceUpdateEmpty", "params": [{ "name": "expires", "type": "int" }], "type": "help.TermsOfServiceUpdate" }, { "id": 686618977, "predicate": "help.termsOfServiceUpdate", "params": [{ "name": "expires", "type": "int" }, { "name": "terms_of_service", "type": "help.TermsOfService" }], "type": "help.TermsOfServiceUpdate" }, { "id": 859091184, "predicate": "inputSecureFileUploaded", "params": [{ "name": "id", "type": "long" }, { "name": "parts", "type": "int" }, { "name": "md5_checksum", "type": "string" }, { "name": "file_hash", "type": "bytes" }, { "name": "secret", "type": "bytes" }], "type": "InputSecureFile" }, { "id": 1399317950, "predicate": "inputSecureFile", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputSecureFile" }, { "id": 1679398724, "predicate": "secureFileEmpty", "params": [], "type": "SecureFile" }, { "id": -534283678, "predicate": "secureFile", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "size", "type": "int" }, { "name": "dc_id", "type": "int" }, { "name": "date", "type": "int" }, { "name": "file_hash", "type": "bytes" }, { "name": "secret", "type": "bytes" }], "type": "SecureFile" }, { "id": -1964327229, "predicate": "secureData", "params": [{ "name": "data", "type": "bytes" }, { "name": "data_hash", "type": "bytes" }, { "name": "secret", "type": "bytes" }], "type": "SecureData" }, { "id": 2103482845, "predicate": "securePlainPhone", "params": [{ "name": "phone", "type": "string" }], "type": "SecurePlainData" }, { "id": 569137759, "predicate": "securePlainEmail", "params": [{ "name": "email", "type": "string" }], "type": "SecurePlainData" }, { "id": -1658158621, "predicate": "secureValueTypePersonalDetails", "params": [], "type": "SecureValueType" }, { "id": 1034709504, "predicate": "secureValueTypePassport", "params": [], "type": "SecureValueType" }, { "id": 115615172, "predicate": "secureValueTypeDriverLicense", "params": [], "type": "SecureValueType" }, { "id": -1596951477, "predicate": "secureValueTypeIdentityCard", "params": [], "type": "SecureValueType" }, { "id": -1717268701, "predicate": "secureValueTypeInternalPassport", "params": [], "type": "SecureValueType" }, { "id": -874308058, "predicate": "secureValueTypeAddress", "params": [], "type": "SecureValueType" }, { "id": -63531698, "predicate": "secureValueTypeUtilityBill", "params": [], "type": "SecureValueType" }, { "id": -1995211763, "predicate": "secureValueTypeBankStatement", "params": [], "type": "SecureValueType" }, { "id": -1954007928, "predicate": "secureValueTypeRentalAgreement", "params": [], "type": "SecureValueType" }, { "id": -1713143702, "predicate": "secureValueTypePassportRegistration", "params": [], "type": "SecureValueType" }, { "id": -368907213, "predicate": "secureValueTypeTemporaryRegistration", "params": [], "type": "SecureValueType" }, { "id": -1289704741, "predicate": "secureValueTypePhone", "params": [], "type": "SecureValueType" }, { "id": -1908627474, "predicate": "secureValueTypeEmail", "params": [], "type": "SecureValueType" }, { "id": 411017418, "predicate": "secureValue", "params": [{ "name": "flags", "type": "#" }, { "name": "type", "type": "SecureValueType" }, { "name": "data", "type": "flags.0?SecureData" }, { "name": "front_side", "type": "flags.1?SecureFile" }, { "name": "reverse_side", "type": "flags.2?SecureFile" }, { "name": "selfie", "type": "flags.3?SecureFile" }, { "name": "translation", "type": "flags.6?Vector<SecureFile>" }, { "name": "files", "type": "flags.4?Vector<SecureFile>" }, { "name": "plain_data", "type": "flags.5?SecurePlainData" }, { "name": "hash", "type": "bytes" }], "type": "SecureValue" }, { "id": -618540889, "predicate": "inputSecureValue", "params": [{ "name": "flags", "type": "#" }, { "name": "type", "type": "SecureValueType" }, { "name": "data", "type": "flags.0?SecureData" }, { "name": "front_side", "type": "flags.1?InputSecureFile" }, { "name": "reverse_side", "type": "flags.2?InputSecureFile" }, { "name": "selfie", "type": "flags.3?InputSecureFile" }, { "name": "translation", "type": "flags.6?Vector<InputSecureFile>" }, { "name": "files", "type": "flags.4?Vector<InputSecureFile>" }, { "name": "plain_data", "type": "flags.5?SecurePlainData" }], "type": "InputSecureValue" }, { "id": -316748368, "predicate": "secureValueHash", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "hash", "type": "bytes" }], "type": "SecureValueHash" }, { "id": -391902247, "predicate": "secureValueErrorData", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "data_hash", "type": "bytes" }, { "name": "field", "type": "string" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": 12467706, "predicate": "secureValueErrorFrontSide", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": -2037765467, "predicate": "secureValueErrorReverseSide", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": -449327402, "predicate": "secureValueErrorSelfie", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": 2054162547, "predicate": "secureValueErrorFile", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": 1717706985, "predicate": "secureValueErrorFiles", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "Vector<bytes>" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": -2036501105, "predicate": "secureValueError", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": -1592506512, "predicate": "secureValueErrorTranslationFile", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "bytes" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": 878931416, "predicate": "secureValueErrorTranslationFiles", "params": [{ "name": "type", "type": "SecureValueType" }, { "name": "file_hash", "type": "Vector<bytes>" }, { "name": "text", "type": "string" }], "type": "SecureValueError" }, { "id": 871426631, "predicate": "secureCredentialsEncrypted", "params": [{ "name": "data", "type": "bytes" }, { "name": "hash", "type": "bytes" }, { "name": "secret", "type": "bytes" }], "type": "SecureCredentialsEncrypted" }, { "id": -1389486888, "predicate": "account.authorizationForm", "params": [{ "name": "flags", "type": "#" }, { "name": "required_types", "type": "Vector<SecureRequiredType>" }, { "name": "values", "type": "Vector<SecureValue>" }, { "name": "errors", "type": "Vector<SecureValueError>" }, { "name": "users", "type": "Vector<User>" }, { "name": "privacy_policy_url", "type": "flags.0?string" }], "type": "account.AuthorizationForm" }, { "id": -2128640689, "predicate": "account.sentEmailCode", "params": [{ "name": "email_pattern", "type": "string" }, { "name": "length", "type": "int" }], "type": "account.SentEmailCode" }, { "id": 1722786150, "predicate": "help.deepLinkInfoEmpty", "params": [], "type": "help.DeepLinkInfo" }, { "id": 1783556146, "predicate": "help.deepLinkInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "update_app", "type": "flags.0?true" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }], "type": "help.DeepLinkInfo" }, { "id": 289586518, "predicate": "savedPhoneContact", "params": [{ "name": "phone", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "date", "type": "int" }], "type": "SavedContact" }, { "id": 1304052993, "predicate": "account.takeout", "params": [{ "name": "id", "type": "long" }], "type": "account.Takeout" }, { "id": -732254058, "predicate": "passwordKdfAlgoUnknown", "params": [], "type": "PasswordKdfAlgo" }, { "id": 982592842, "predicate": "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow", "params": [{ "name": "salt1", "type": "bytes" }, { "name": "salt2", "type": "bytes" }, { "name": "g", "type": "int" }, { "name": "p", "type": "bytes" }], "type": "PasswordKdfAlgo" }, { "id": 4883767, "predicate": "securePasswordKdfAlgoUnknown", "params": [], "type": "SecurePasswordKdfAlgo" }, { "id": -1141711456, "predicate": "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000", "params": [{ "name": "salt", "type": "bytes" }], "type": "SecurePasswordKdfAlgo" }, { "id": -2042159726, "predicate": "securePasswordKdfAlgoSHA512", "params": [{ "name": "salt", "type": "bytes" }], "type": "SecurePasswordKdfAlgo" }, { "id": 354925740, "predicate": "secureSecretSettings", "params": [{ "name": "secure_algo", "type": "SecurePasswordKdfAlgo" }, { "name": "secure_secret", "type": "bytes" }, { "name": "secure_secret_id", "type": "long" }], "type": "SecureSecretSettings" }, { "id": -1736378792, "predicate": "inputCheckPasswordEmpty", "params": [], "type": "InputCheckPasswordSRP" }, { "id": -763367294, "predicate": "inputCheckPasswordSRP", "params": [{ "name": "srp_id", "type": "long" }, { "name": "A", "type": "bytes" }, { "name": "M1", "type": "bytes" }], "type": "InputCheckPasswordSRP" }, { "id": -2103600678, "predicate": "secureRequiredType", "params": [{ "name": "flags", "type": "#" }, { "name": "native_names", "type": "flags.0?true" }, { "name": "selfie_required", "type": "flags.1?true" }, { "name": "translation_required", "type": "flags.2?true" }, { "name": "type", "type": "SecureValueType" }], "type": "SecureRequiredType" }, { "id": 41187252, "predicate": "secureRequiredTypeOneOf", "params": [{ "name": "types", "type": "Vector<SecureRequiredType>" }], "type": "SecureRequiredType" }, { "id": -1078332329, "predicate": "help.passportConfigNotModified", "params": [], "type": "help.PassportConfig" }, { "id": -1600596305, "predicate": "help.passportConfig", "params": [{ "name": "hash", "type": "int" }, { "name": "countries_langs", "type": "DataJSON" }], "type": "help.PassportConfig" }, { "id": 488313413, "predicate": "inputAppEvent", "params": [{ "name": "time", "type": "double" }, { "name": "type", "type": "string" }, { "name": "peer", "type": "long" }, { "name": "data", "type": "JSONValue" }], "type": "InputAppEvent" }, { "id": -1059185703, "predicate": "jsonObjectValue", "params": [{ "name": "key", "type": "string" }, { "name": "value", "type": "JSONValue" }], "type": "JSONObjectValue" }, { "id": 1064139624, "predicate": "jsonNull", "params": [], "type": "JSONValue" }, { "id": -952869270, "predicate": "jsonBool", "params": [{ "name": "value", "type": "Bool" }], "type": "JSONValue" }, { "id": 736157604, "predicate": "jsonNumber", "params": [{ "name": "value", "type": "double" }], "type": "JSONValue" }, { "id": -1222740358, "predicate": "jsonString", "params": [{ "name": "value", "type": "string" }], "type": "JSONValue" }, { "id": -146520221, "predicate": "jsonArray", "params": [{ "name": "value", "type": "Vector<JSONValue>" }], "type": "JSONValue" }, { "id": -1715350371, "predicate": "jsonObject", "params": [{ "name": "value", "type": "Vector<JSONObjectValue>" }], "type": "JSONValue" }, { "id": 878078826, "predicate": "pageTableCell", "params": [{ "name": "flags", "type": "#" }, { "name": "header", "type": "flags.0?true" }, { "name": "align_center", "type": "flags.3?true" }, { "name": "align_right", "type": "flags.4?true" }, { "name": "valign_middle", "type": "flags.5?true" }, { "name": "valign_bottom", "type": "flags.6?true" }, { "name": "text", "type": "flags.7?RichText" }, { "name": "colspan", "type": "flags.1?int" }, { "name": "rowspan", "type": "flags.2?int" }], "type": "PageTableCell" }, { "id": -524237339, "predicate": "pageTableRow", "params": [{ "name": "cells", "type": "Vector<PageTableCell>" }], "type": "PageTableRow" }, { "id": 1869903447, "predicate": "pageCaption", "params": [{ "name": "text", "type": "RichText" }, { "name": "credit", "type": "RichText" }], "type": "PageCaption" }, { "id": -1188055347, "predicate": "pageListItemText", "params": [{ "name": "text", "type": "RichText" }], "type": "PageListItem" }, { "id": 635466748, "predicate": "pageListItemBlocks", "params": [{ "name": "blocks", "type": "Vector<PageBlock>" }], "type": "PageListItem" }, { "id": 1577484359, "predicate": "pageListOrderedItemText", "params": [{ "name": "num", "type": "string" }, { "name": "text", "type": "RichText" }], "type": "PageListOrderedItem" }, { "id": -1730311882, "predicate": "pageListOrderedItemBlocks", "params": [{ "name": "num", "type": "string" }, { "name": "blocks", "type": "Vector<PageBlock>" }], "type": "PageListOrderedItem" }, { "id": -1282352120, "predicate": "pageRelatedArticle", "params": [{ "name": "flags", "type": "#" }, { "name": "url", "type": "string" }, { "name": "webpage_id", "type": "long" }, { "name": "title", "type": "flags.0?string" }, { "name": "description", "type": "flags.1?string" }, { "name": "photo_id", "type": "flags.2?long" }, { "name": "author", "type": "flags.3?string" }, { "name": "published_date", "type": "flags.4?int" }], "type": "PageRelatedArticle" }, { "id": -1738178803, "predicate": "page", "params": [{ "name": "flags", "type": "#" }, { "name": "part", "type": "flags.0?true" }, { "name": "rtl", "type": "flags.1?true" }, { "name": "v2", "type": "flags.2?true" }, { "name": "url", "type": "string" }, { "name": "blocks", "type": "Vector<PageBlock>" }, { "name": "photos", "type": "Vector<Photo>" }, { "name": "documents", "type": "Vector<Document>" }, { "name": "views", "type": "flags.3?int" }], "type": "Page" }, { "id": -1945767479, "predicate": "help.supportName", "params": [{ "name": "name", "type": "string" }], "type": "help.SupportName" }, { "id": -206688531, "predicate": "help.userInfoEmpty", "params": [], "type": "help.UserInfo" }, { "id": 32192344, "predicate": "help.userInfo", "params": [{ "name": "message", "type": "string" }, { "name": "entities", "type": "Vector<MessageEntity>" }, { "name": "author", "type": "string" }, { "name": "date", "type": "int" }], "type": "help.UserInfo" }, { "id": 1823064809, "predicate": "pollAnswer", "params": [{ "name": "text", "type": "string" }, { "name": "option", "type": "bytes" }], "type": "PollAnswer" }, { "id": -2032041631, "predicate": "poll", "params": [{ "name": "id", "type": "long" }, { "name": "flags", "type": "#" }, { "name": "closed", "type": "flags.0?true" }, { "name": "public_voters", "type": "flags.1?true" }, { "name": "multiple_choice", "type": "flags.2?true" }, { "name": "quiz", "type": "flags.3?true" }, { "name": "question", "type": "string" }, { "name": "answers", "type": "Vector<PollAnswer>" }, { "name": "close_period", "type": "flags.4?int" }, { "name": "close_date", "type": "flags.5?int" }], "type": "Poll" }, { "id": 997055186, "predicate": "pollAnswerVoters", "params": [{ "name": "flags", "type": "#" }, { "name": "chosen", "type": "flags.0?true" }, { "name": "correct", "type": "flags.1?true" }, { "name": "option", "type": "bytes" }, { "name": "voters", "type": "int" }], "type": "PollAnswerVoters" }, { "id": -591909213, "predicate": "pollResults", "params": [{ "name": "flags", "type": "#" }, { "name": "min", "type": "flags.0?true" }, { "name": "results", "type": "flags.1?Vector<PollAnswerVoters>" }, { "name": "total_voters", "type": "flags.2?int" }, { "name": "recent_voters", "type": "flags.3?Vector<long>" }, { "name": "solution", "type": "flags.4?string" }, { "name": "solution_entities", "type": "flags.4?Vector<MessageEntity>" }], "type": "PollResults" }, { "id": -264117680, "predicate": "chatOnlines", "params": [{ "name": "onlines", "type": "int" }], "type": "ChatOnlines" }, { "id": 1202287072, "predicate": "statsURL", "params": [{ "name": "url", "type": "string" }], "type": "StatsURL" }, { "id": 1605510357, "predicate": "chatAdminRights", "params": [{ "name": "flags", "type": "#" }, { "name": "change_info", "type": "flags.0?true" }, { "name": "post_messages", "type": "flags.1?true" }, { "name": "edit_messages", "type": "flags.2?true" }, { "name": "delete_messages", "type": "flags.3?true" }, { "name": "ban_users", "type": "flags.4?true" }, { "name": "invite_users", "type": "flags.5?true" }, { "name": "pin_messages", "type": "flags.7?true" }, { "name": "add_admins", "type": "flags.9?true" }, { "name": "anonymous", "type": "flags.10?true" }, { "name": "manage_call", "type": "flags.11?true" }, { "name": "other", "type": "flags.12?true" }], "type": "ChatAdminRights" }, { "id": -1626209256, "predicate": "chatBannedRights", "params": [{ "name": "flags", "type": "#" }, { "name": "view_messages", "type": "flags.0?true" }, { "name": "send_messages", "type": "flags.1?true" }, { "name": "send_media", "type": "flags.2?true" }, { "name": "send_stickers", "type": "flags.3?true" }, { "name": "send_gifs", "type": "flags.4?true" }, { "name": "send_games", "type": "flags.5?true" }, { "name": "send_inline", "type": "flags.6?true" }, { "name": "embed_links", "type": "flags.7?true" }, { "name": "send_polls", "type": "flags.8?true" }, { "name": "change_info", "type": "flags.10?true" }, { "name": "invite_users", "type": "flags.15?true" }, { "name": "pin_messages", "type": "flags.17?true" }, { "name": "until_date", "type": "int" }], "type": "ChatBannedRights" }, { "id": -433014407, "predicate": "inputWallPaper", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputWallPaper" }, { "id": 1913199744, "predicate": "inputWallPaperSlug", "params": [{ "name": "slug", "type": "string" }], "type": "InputWallPaper" }, { "id": -1770371538, "predicate": "inputWallPaperNoFile", "params": [{ "name": "id", "type": "long" }], "type": "InputWallPaper" }, { "id": 471437699, "predicate": "account.wallPapersNotModified", "params": [], "type": "account.WallPapers" }, { "id": -842824308, "predicate": "account.wallPapers", "params": [{ "name": "hash", "type": "long" }, { "name": "wallpapers", "type": "Vector<WallPaper>" }], "type": "account.WallPapers" }, { "id": -557924733, "predicate": "codeSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "allow_flashcall", "type": "flags.0?true" }, { "name": "current_number", "type": "flags.1?true" }, { "name": "allow_app_hash", "type": "flags.4?true" }], "type": "CodeSettings" }, { "id": 499236004, "predicate": "wallPaperSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "blur", "type": "flags.1?true" }, { "name": "motion", "type": "flags.2?true" }, { "name": "background_color", "type": "flags.0?int" }, { "name": "second_background_color", "type": "flags.4?int" }, { "name": "third_background_color", "type": "flags.5?int" }, { "name": "fourth_background_color", "type": "flags.6?int" }, { "name": "intensity", "type": "flags.3?int" }, { "name": "rotation", "type": "flags.4?int" }], "type": "WallPaperSettings" }, { "id": -532532493, "predicate": "autoDownloadSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "disabled", "type": "flags.0?true" }, { "name": "video_preload_large", "type": "flags.1?true" }, { "name": "audio_preload_next", "type": "flags.2?true" }, { "name": "phonecalls_less_data", "type": "flags.3?true" }, { "name": "photo_size_max", "type": "int" }, { "name": "video_size_max", "type": "int" }, { "name": "file_size_max", "type": "int" }, { "name": "video_upload_maxbitrate", "type": "int" }], "type": "AutoDownloadSettings" }, { "id": 1674235686, "predicate": "account.autoDownloadSettings", "params": [{ "name": "low", "type": "AutoDownloadSettings" }, { "name": "medium", "type": "AutoDownloadSettings" }, { "name": "high", "type": "AutoDownloadSettings" }], "type": "account.AutoDownloadSettings" }, { "id": -709641735, "predicate": "emojiKeyword", "params": [{ "name": "keyword", "type": "string" }, { "name": "emoticons", "type": "Vector<string>" }], "type": "EmojiKeyword" }, { "id": 594408994, "predicate": "emojiKeywordDeleted", "params": [{ "name": "keyword", "type": "string" }, { "name": "emoticons", "type": "Vector<string>" }], "type": "EmojiKeyword" }, { "id": 1556570557, "predicate": "emojiKeywordsDifference", "params": [{ "name": "lang_code", "type": "string" }, { "name": "from_version", "type": "int" }, { "name": "version", "type": "int" }, { "name": "keywords", "type": "Vector<EmojiKeyword>" }], "type": "EmojiKeywordsDifference" }, { "id": -1519029347, "predicate": "emojiURL", "params": [{ "name": "url", "type": "string" }], "type": "EmojiURL" }, { "id": -1275374751, "predicate": "emojiLanguage", "params": [{ "name": "lang_code", "type": "string" }], "type": "EmojiLanguage" }, { "id": -11252123, "predicate": "folder", "params": [{ "name": "flags", "type": "#" }, { "name": "autofill_new_broadcasts", "type": "flags.0?true" }, { "name": "autofill_public_groups", "type": "flags.1?true" }, { "name": "autofill_new_correspondents", "type": "flags.2?true" }, { "name": "id", "type": "int" }, { "name": "title", "type": "string" }, { "name": "photo", "type": "flags.3?ChatPhoto" }], "type": "Folder" }, { "id": -70073706, "predicate": "inputFolderPeer", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "folder_id", "type": "int" }], "type": "InputFolderPeer" }, { "id": -373643672, "predicate": "folderPeer", "params": [{ "name": "peer", "type": "Peer" }, { "name": "folder_id", "type": "int" }], "type": "FolderPeer" }, { "id": -398136321, "predicate": "messages.searchCounter", "params": [{ "name": "flags", "type": "#" }, { "name": "inexact", "type": "flags.1?true" }, { "name": "filter", "type": "MessagesFilter" }, { "name": "count", "type": "int" }], "type": "messages.SearchCounter" }, { "id": -1831650802, "predicate": "urlAuthResultRequest", "params": [{ "name": "flags", "type": "#" }, { "name": "request_write_access", "type": "flags.0?true" }, { "name": "bot", "type": "User" }, { "name": "domain", "type": "string" }], "type": "UrlAuthResult" }, { "id": -1886646706, "predicate": "urlAuthResultAccepted", "params": [{ "name": "url", "type": "string" }], "type": "UrlAuthResult" }, { "id": -1445536993, "predicate": "urlAuthResultDefault", "params": [], "type": "UrlAuthResult" }, { "id": -1078612597, "predicate": "channelLocationEmpty", "params": [], "type": "ChannelLocation" }, { "id": 547062491, "predicate": "channelLocation", "params": [{ "name": "geo_point", "type": "GeoPoint" }, { "name": "address", "type": "string" }], "type": "ChannelLocation" }, { "id": -901375139, "predicate": "peerLocated", "params": [{ "name": "peer", "type": "Peer" }, { "name": "expires", "type": "int" }, { "name": "distance", "type": "int" }], "type": "PeerLocated" }, { "id": -118740917, "predicate": "peerSelfLocated", "params": [{ "name": "expires", "type": "int" }], "type": "PeerLocated" }, { "id": -797791052, "predicate": "restrictionReason", "params": [{ "name": "platform", "type": "string" }, { "name": "reason", "type": "string" }, { "name": "text", "type": "string" }], "type": "RestrictionReason" }, { "id": 1012306921, "predicate": "inputTheme", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputTheme" }, { "id": -175567375, "predicate": "inputThemeSlug", "params": [{ "name": "slug", "type": "string" }], "type": "InputTheme" }, { "id": -402474788, "predicate": "theme", "params": [{ "name": "flags", "type": "#" }, { "name": "creator", "type": "flags.0?true" }, { "name": "default", "type": "flags.1?true" }, { "name": "for_chat", "type": "flags.5?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "slug", "type": "string" }, { "name": "title", "type": "string" }, { "name": "document", "type": "flags.2?Document" }, { "name": "settings", "type": "flags.3?ThemeSettings" }, { "name": "installs_count", "type": "flags.4?int" }], "type": "Theme" }, { "id": -199313886, "predicate": "account.themesNotModified", "params": [], "type": "account.Themes" }, { "id": -1707242387, "predicate": "account.themes", "params": [{ "name": "hash", "type": "long" }, { "name": "themes", "type": "Vector<Theme>" }], "type": "account.Themes" }, { "id": 1654593920, "predicate": "auth.loginToken", "params": [{ "name": "expires", "type": "int" }, { "name": "token", "type": "bytes" }], "type": "auth.LoginToken" }, { "id": 110008598, "predicate": "auth.loginTokenMigrateTo", "params": [{ "name": "dc_id", "type": "int" }, { "name": "token", "type": "bytes" }], "type": "auth.LoginToken" }, { "id": 957176926, "predicate": "auth.loginTokenSuccess", "params": [{ "name": "authorization", "type": "auth.Authorization" }], "type": "auth.LoginToken" }, { "id": 1474462241, "predicate": "account.contentSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "sensitive_enabled", "type": "flags.0?true" }, { "name": "sensitive_can_change", "type": "flags.1?true" }], "type": "account.ContentSettings" }, { "id": -1456996667, "predicate": "messages.inactiveChats", "params": [{ "name": "dates", "type": "Vector<int>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.InactiveChats" }, { "id": -1012849566, "predicate": "baseThemeClassic", "params": [], "type": "BaseTheme" }, { "id": -69724536, "predicate": "baseThemeDay", "params": [], "type": "BaseTheme" }, { "id": -1212997976, "predicate": "baseThemeNight", "params": [], "type": "BaseTheme" }, { "id": 1834973166, "predicate": "baseThemeTinted", "params": [], "type": "BaseTheme" }, { "id": 1527845466, "predicate": "baseThemeArctic", "params": [], "type": "BaseTheme" }, { "id": -1881255857, "predicate": "inputThemeSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "message_colors_animated", "type": "flags.2?true" }, { "name": "base_theme", "type": "BaseTheme" }, { "name": "accent_color", "type": "int" }, { "name": "outbox_accent_color", "type": "flags.3?int" }, { "name": "message_colors", "type": "flags.0?Vector<int>" }, { "name": "wallpaper", "type": "flags.1?InputWallPaper" }, { "name": "wallpaper_settings", "type": "flags.1?WallPaperSettings" }], "type": "InputThemeSettings" }, { "id": -94849324, "predicate": "themeSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "message_colors_animated", "type": "flags.2?true" }, { "name": "base_theme", "type": "BaseTheme" }, { "name": "accent_color", "type": "int" }, { "name": "outbox_accent_color", "type": "flags.3?int" }, { "name": "message_colors", "type": "flags.0?Vector<int>" }, { "name": "wallpaper", "type": "flags.1?WallPaper" }], "type": "ThemeSettings" }, { "id": 1421174295, "predicate": "webPageAttributeTheme", "params": [{ "name": "flags", "type": "#" }, { "name": "documents", "type": "flags.0?Vector<Document>" }, { "name": "settings", "type": "flags.1?ThemeSettings" }], "type": "WebPageAttribute" }, { "id": 886196148, "predicate": "messageUserVote", "params": [{ "name": "user_id", "type": "long" }, { "name": "option", "type": "bytes" }, { "name": "date", "type": "int" }], "type": "MessageUserVote" }, { "id": 1017491692, "predicate": "messageUserVoteInputOption", "params": [{ "name": "user_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "MessageUserVote" }, { "id": -1973033641, "predicate": "messageUserVoteMultiple", "params": [{ "name": "user_id", "type": "long" }, { "name": "options", "type": "Vector<bytes>" }, { "name": "date", "type": "int" }], "type": "MessageUserVote" }, { "id": 136574537, "predicate": "messages.votesList", "params": [{ "name": "flags", "type": "#" }, { "name": "count", "type": "int" }, { "name": "votes", "type": "Vector<MessageUserVote>" }, { "name": "users", "type": "Vector<User>" }, { "name": "next_offset", "type": "flags.0?string" }], "type": "messages.VotesList" }, { "id": -177732982, "predicate": "bankCardOpenUrl", "params": [{ "name": "url", "type": "string" }, { "name": "name", "type": "string" }], "type": "BankCardOpenUrl" }, { "id": 1042605427, "predicate": "payments.bankCardData", "params": [{ "name": "title", "type": "string" }, { "name": "open_urls", "type": "Vector<BankCardOpenUrl>" }], "type": "payments.BankCardData" }, { "id": 1949890536, "predicate": "dialogFilter", "params": [{ "name": "flags", "type": "#" }, { "name": "contacts", "type": "flags.0?true" }, { "name": "non_contacts", "type": "flags.1?true" }, { "name": "groups", "type": "flags.2?true" }, { "name": "broadcasts", "type": "flags.3?true" }, { "name": "bots", "type": "flags.4?true" }, { "name": "exclude_muted", "type": "flags.11?true" }, { "name": "exclude_read", "type": "flags.12?true" }, { "name": "exclude_archived", "type": "flags.13?true" }, { "name": "id", "type": "int" }, { "name": "title", "type": "string" }, { "name": "emoticon", "type": "flags.25?string" }, { "name": "pinned_peers", "type": "Vector<InputPeer>" }, { "name": "include_peers", "type": "Vector<InputPeer>" }, { "name": "exclude_peers", "type": "Vector<InputPeer>" }], "type": "DialogFilter" }, { "id": 2004110666, "predicate": "dialogFilterSuggested", "params": [{ "name": "filter", "type": "DialogFilter" }, { "name": "description", "type": "string" }], "type": "DialogFilterSuggested" }, { "id": -1237848657, "predicate": "statsDateRangeDays", "params": [{ "name": "min_date", "type": "int" }, { "name": "max_date", "type": "int" }], "type": "StatsDateRangeDays" }, { "id": -884757282, "predicate": "statsAbsValueAndPrev", "params": [{ "name": "current", "type": "double" }, { "name": "previous", "type": "double" }], "type": "StatsAbsValueAndPrev" }, { "id": -875679776, "predicate": "statsPercentValue", "params": [{ "name": "part", "type": "double" }, { "name": "total", "type": "double" }], "type": "StatsPercentValue" }, { "id": 1244130093, "predicate": "statsGraphAsync", "params": [{ "name": "token", "type": "string" }], "type": "StatsGraph" }, { "id": -1092839390, "predicate": "statsGraphError", "params": [{ "name": "error", "type": "string" }], "type": "StatsGraph" }, { "id": -1901828938, "predicate": "statsGraph", "params": [{ "name": "flags", "type": "#" }, { "name": "json", "type": "DataJSON" }, { "name": "zoom_token", "type": "flags.0?string" }], "type": "StatsGraph" }, { "id": -1387279939, "predicate": "messageInteractionCounters", "params": [{ "name": "msg_id", "type": "int" }, { "name": "views", "type": "int" }, { "name": "forwards", "type": "int" }], "type": "MessageInteractionCounters" }, { "id": -1107852396, "predicate": "stats.broadcastStats", "params": [{ "name": "period", "type": "StatsDateRangeDays" }, { "name": "followers", "type": "StatsAbsValueAndPrev" }, { "name": "views_per_post", "type": "StatsAbsValueAndPrev" }, { "name": "shares_per_post", "type": "StatsAbsValueAndPrev" }, { "name": "enabled_notifications", "type": "StatsPercentValue" }, { "name": "growth_graph", "type": "StatsGraph" }, { "name": "followers_graph", "type": "StatsGraph" }, { "name": "mute_graph", "type": "StatsGraph" }, { "name": "top_hours_graph", "type": "StatsGraph" }, { "name": "interactions_graph", "type": "StatsGraph" }, { "name": "iv_interactions_graph", "type": "StatsGraph" }, { "name": "views_by_source_graph", "type": "StatsGraph" }, { "name": "new_followers_by_source_graph", "type": "StatsGraph" }, { "name": "languages_graph", "type": "StatsGraph" }, { "name": "recent_message_interactions", "type": "Vector<MessageInteractionCounters>" }], "type": "stats.BroadcastStats" }, { "id": -1728664459, "predicate": "help.promoDataEmpty", "params": [{ "name": "expires", "type": "int" }], "type": "help.PromoData" }, { "id": -1942390465, "predicate": "help.promoData", "params": [{ "name": "flags", "type": "#" }, { "name": "proxy", "type": "flags.0?true" }, { "name": "expires", "type": "int" }, { "name": "peer", "type": "Peer" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }, { "name": "psa_type", "type": "flags.1?string" }, { "name": "psa_message", "type": "flags.2?string" }], "type": "help.PromoData" }, { "id": -567037804, "predicate": "videoSize", "params": [{ "name": "flags", "type": "#" }, { "name": "type", "type": "string" }, { "name": "w", "type": "int" }, { "name": "h", "type": "int" }, { "name": "size", "type": "int" }, { "name": "video_start_ts", "type": "flags.0?double" }], "type": "VideoSize" }, { "id": -1660637285, "predicate": "statsGroupTopPoster", "params": [{ "name": "user_id", "type": "long" }, { "name": "messages", "type": "int" }, { "name": "avg_chars", "type": "int" }], "type": "StatsGroupTopPoster" }, { "id": -682079097, "predicate": "statsGroupTopAdmin", "params": [{ "name": "user_id", "type": "long" }, { "name": "deleted", "type": "int" }, { "name": "kicked", "type": "int" }, { "name": "banned", "type": "int" }], "type": "StatsGroupTopAdmin" }, { "id": 1398765469, "predicate": "statsGroupTopInviter", "params": [{ "name": "user_id", "type": "long" }, { "name": "invitations", "type": "int" }], "type": "StatsGroupTopInviter" }, { "id": -276825834, "predicate": "stats.megagroupStats", "params": [{ "name": "period", "type": "StatsDateRangeDays" }, { "name": "members", "type": "StatsAbsValueAndPrev" }, { "name": "messages", "type": "StatsAbsValueAndPrev" }, { "name": "viewers", "type": "StatsAbsValueAndPrev" }, { "name": "posters", "type": "StatsAbsValueAndPrev" }, { "name": "growth_graph", "type": "StatsGraph" }, { "name": "members_graph", "type": "StatsGraph" }, { "name": "new_members_by_source_graph", "type": "StatsGraph" }, { "name": "languages_graph", "type": "StatsGraph" }, { "name": "messages_graph", "type": "StatsGraph" }, { "name": "actions_graph", "type": "StatsGraph" }, { "name": "top_hours_graph", "type": "StatsGraph" }, { "name": "weekdays_graph", "type": "StatsGraph" }, { "name": "top_posters", "type": "Vector<StatsGroupTopPoster>" }, { "name": "top_admins", "type": "Vector<StatsGroupTopAdmin>" }, { "name": "top_inviters", "type": "Vector<StatsGroupTopInviter>" }, { "name": "users", "type": "Vector<User>" }], "type": "stats.MegagroupStats" }, { "id": -1096616924, "predicate": "globalPrivacySettings", "params": [{ "name": "flags", "type": "#" }, { "name": "archive_and_mute_new_noncontact_peers", "type": "flags.0?Bool" }], "type": "GlobalPrivacySettings" }, { "id": 1107543535, "predicate": "help.countryCode", "params": [{ "name": "flags", "type": "#" }, { "name": "country_code", "type": "string" }, { "name": "prefixes", "type": "flags.0?Vector<string>" }, { "name": "patterns", "type": "flags.1?Vector<string>" }], "type": "help.CountryCode" }, { "id": -1014526429, "predicate": "help.country", "params": [{ "name": "flags", "type": "#" }, { "name": "hidden", "type": "flags.0?true" }, { "name": "iso2", "type": "string" }, { "name": "default_name", "type": "string" }, { "name": "name", "type": "flags.1?string" }, { "name": "country_codes", "type": "Vector<help.CountryCode>" }], "type": "help.Country" }, { "id": -1815339214, "predicate": "help.countriesListNotModified", "params": [], "type": "help.CountriesList" }, { "id": -2016381538, "predicate": "help.countriesList", "params": [{ "name": "countries", "type": "Vector<help.Country>" }, { "name": "hash", "type": "int" }], "type": "help.CountriesList" }, { "id": 1163625789, "predicate": "messageViews", "params": [{ "name": "flags", "type": "#" }, { "name": "views", "type": "flags.0?int" }, { "name": "forwards", "type": "flags.1?int" }, { "name": "replies", "type": "flags.2?MessageReplies" }], "type": "MessageViews" }, { "id": -1228606141, "predicate": "messages.messageViews", "params": [{ "name": "views", "type": "Vector<MessageViews>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.MessageViews" }, { "id": -1506535550, "predicate": "messages.discussionMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "messages", "type": "Vector<Message>" }, { "name": "max_id", "type": "flags.0?int" }, { "name": "read_inbox_max_id", "type": "flags.1?int" }, { "name": "read_outbox_max_id", "type": "flags.2?int" }, { "name": "unread_count", "type": "int" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.DiscussionMessage" }, { "id": -1495959709, "predicate": "messageReplyHeader", "params": [{ "name": "flags", "type": "#" }, { "name": "reply_to_msg_id", "type": "int" }, { "name": "reply_to_peer_id", "type": "flags.0?Peer" }, { "name": "reply_to_top_id", "type": "flags.1?int" }], "type": "MessageReplyHeader" }, { "id": -2083123262, "predicate": "messageReplies", "params": [{ "name": "flags", "type": "#" }, { "name": "comments", "type": "flags.0?true" }, { "name": "replies", "type": "int" }, { "name": "replies_pts", "type": "int" }, { "name": "recent_repliers", "type": "flags.1?Vector<Peer>" }, { "name": "channel_id", "type": "flags.0?long" }, { "name": "max_id", "type": "flags.2?int" }, { "name": "read_max_id", "type": "flags.3?int" }], "type": "MessageReplies" }, { "id": -386039788, "predicate": "peerBlocked", "params": [{ "name": "peer_id", "type": "Peer" }, { "name": "date", "type": "int" }], "type": "PeerBlocked" }, { "id": -1986399595, "predicate": "stats.messageStats", "params": [{ "name": "views_graph", "type": "StatsGraph" }], "type": "stats.MessageStats" }, { "id": 2004925620, "predicate": "groupCallDiscarded", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "duration", "type": "int" }], "type": "GroupCall" }, { "id": -711498484, "predicate": "groupCall", "params": [{ "name": "flags", "type": "#" }, { "name": "join_muted", "type": "flags.1?true" }, { "name": "can_change_join_muted", "type": "flags.2?true" }, { "name": "join_date_asc", "type": "flags.6?true" }, { "name": "schedule_start_subscribed", "type": "flags.8?true" }, { "name": "can_start_video", "type": "flags.9?true" }, { "name": "record_video_active", "type": "flags.11?true" }, { "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }, { "name": "participants_count", "type": "int" }, { "name": "title", "type": "flags.3?string" }, { "name": "stream_dc_id", "type": "flags.4?int" }, { "name": "record_start_date", "type": "flags.5?int" }, { "name": "schedule_date", "type": "flags.7?int" }, { "name": "unmuted_video_count", "type": "flags.10?int" }, { "name": "unmuted_video_limit", "type": "int" }, { "name": "version", "type": "int" }], "type": "GroupCall" }, { "id": -659913713, "predicate": "inputGroupCall", "params": [{ "name": "id", "type": "long" }, { "name": "access_hash", "type": "long" }], "type": "InputGroupCall" }, { "id": -341428482, "predicate": "groupCallParticipant", "params": [{ "name": "flags", "type": "#" }, { "name": "muted", "type": "flags.0?true" }, { "name": "left", "type": "flags.1?true" }, { "name": "can_self_unmute", "type": "flags.2?true" }, { "name": "just_joined", "type": "flags.4?true" }, { "name": "versioned", "type": "flags.5?true" }, { "name": "min", "type": "flags.8?true" }, { "name": "muted_by_you", "type": "flags.9?true" }, { "name": "volume_by_admin", "type": "flags.10?true" }, { "name": "self", "type": "flags.12?true" }, { "name": "video_joined", "type": "flags.15?true" }, { "name": "peer", "type": "Peer" }, { "name": "date", "type": "int" }, { "name": "active_date", "type": "flags.3?int" }, { "name": "source", "type": "int" }, { "name": "volume", "type": "flags.7?int" }, { "name": "about", "type": "flags.11?string" }, { "name": "raise_hand_rating", "type": "flags.13?long" }, { "name": "video", "type": "flags.6?GroupCallParticipantVideo" }, { "name": "presentation", "type": "flags.14?GroupCallParticipantVideo" }], "type": "GroupCallParticipant" }, { "id": -1636664659, "predicate": "phone.groupCall", "params": [{ "name": "call", "type": "GroupCall" }, { "name": "participants", "type": "Vector<GroupCallParticipant>" }, { "name": "participants_next_offset", "type": "string" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "phone.GroupCall" }, { "id": -193506890, "predicate": "phone.groupParticipants", "params": [{ "name": "count", "type": "int" }, { "name": "participants", "type": "Vector<GroupCallParticipant>" }, { "name": "next_offset", "type": "string" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }, { "name": "version", "type": "int" }], "type": "phone.GroupParticipants" }, { "id": 813821341, "predicate": "inlineQueryPeerTypeSameBotPM", "params": [], "type": "InlineQueryPeerType" }, { "id": -2093215828, "predicate": "inlineQueryPeerTypePM", "params": [], "type": "InlineQueryPeerType" }, { "id": -681130742, "predicate": "inlineQueryPeerTypeChat", "params": [], "type": "InlineQueryPeerType" }, { "id": 1589952067, "predicate": "inlineQueryPeerTypeMegagroup", "params": [], "type": "InlineQueryPeerType" }, { "id": 1664413338, "predicate": "inlineQueryPeerTypeBroadcast", "params": [], "type": "InlineQueryPeerType" }, { "id": 375566091, "predicate": "messages.historyImport", "params": [{ "name": "id", "type": "long" }], "type": "messages.HistoryImport" }, { "id": 1578088377, "predicate": "messages.historyImportParsed", "params": [{ "name": "flags", "type": "#" }, { "name": "pm", "type": "flags.0?true" }, { "name": "group", "type": "flags.1?true" }, { "name": "title", "type": "flags.2?string" }], "type": "messages.HistoryImportParsed" }, { "id": -275956116, "predicate": "messages.affectedFoundMessages", "params": [{ "name": "pts", "type": "int" }, { "name": "pts_count", "type": "int" }, { "name": "offset", "type": "int" }, { "name": "messages", "type": "Vector<int>" }], "type": "messages.AffectedFoundMessages" }, { "id": 190633460, "predicate": "chatInviteImporter", "params": [{ "name": "user_id", "type": "long" }, { "name": "date", "type": "int" }], "type": "ChatInviteImporter" }, { "id": -1111085620, "predicate": "messages.exportedChatInvites", "params": [{ "name": "count", "type": "int" }, { "name": "invites", "type": "Vector<ExportedChatInvite>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ExportedChatInvites" }, { "id": 410107472, "predicate": "messages.exportedChatInvite", "params": [{ "name": "invite", "type": "ExportedChatInvite" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ExportedChatInvite" }, { "id": 572915951, "predicate": "messages.exportedChatInviteReplaced", "params": [{ "name": "invite", "type": "ExportedChatInvite" }, { "name": "new_invite", "type": "ExportedChatInvite" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ExportedChatInvite" }, { "id": -2118733814, "predicate": "messages.chatInviteImporters", "params": [{ "name": "count", "type": "int" }, { "name": "importers", "type": "Vector<ChatInviteImporter>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ChatInviteImporters" }, { "id": -219353309, "predicate": "chatAdminWithInvites", "params": [{ "name": "admin_id", "type": "long" }, { "name": "invites_count", "type": "int" }, { "name": "revoked_invites_count", "type": "int" }], "type": "ChatAdminWithInvites" }, { "id": -1231326505, "predicate": "messages.chatAdminsWithInvites", "params": [{ "name": "admins", "type": "Vector<ChatAdminWithInvites>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.ChatAdminsWithInvites" }, { "id": -1571952873, "predicate": "messages.checkedHistoryImportPeer", "params": [{ "name": "confirm_text", "type": "string" }], "type": "messages.CheckedHistoryImportPeer" }, { "id": -1343921601, "predicate": "phone.joinAsPeers", "params": [{ "name": "peers", "type": "Vector<Peer>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "phone.JoinAsPeers" }, { "id": 541839704, "predicate": "phone.exportedGroupCallInvite", "params": [{ "name": "link", "type": "string" }], "type": "phone.ExportedGroupCallInvite" }, { "id": -592373577, "predicate": "groupCallParticipantVideoSourceGroup", "params": [{ "name": "semantics", "type": "string" }, { "name": "sources", "type": "Vector<int>" }], "type": "GroupCallParticipantVideoSourceGroup" }, { "id": 1735736008, "predicate": "groupCallParticipantVideo", "params": [{ "name": "flags", "type": "#" }, { "name": "paused", "type": "flags.0?true" }, { "name": "endpoint", "type": "string" }, { "name": "source_groups", "type": "Vector<GroupCallParticipantVideoSourceGroup>" }, { "name": "audio_source", "type": "flags.1?int" }], "type": "GroupCallParticipantVideo" }, { "id": -2046910401, "predicate": "stickers.suggestedShortName", "params": [{ "name": "short_name", "type": "string" }], "type": "stickers.SuggestedShortName" }, { "id": 795652779, "predicate": "botCommandScopeDefault", "params": [], "type": "BotCommandScope" }, { "id": 1011811544, "predicate": "botCommandScopeUsers", "params": [], "type": "BotCommandScope" }, { "id": 1877059713, "predicate": "botCommandScopeChats", "params": [], "type": "BotCommandScope" }, { "id": -1180016534, "predicate": "botCommandScopeChatAdmins", "params": [], "type": "BotCommandScope" }, { "id": -610432643, "predicate": "botCommandScopePeer", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "BotCommandScope" }, { "id": 1071145937, "predicate": "botCommandScopePeerAdmins", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "BotCommandScope" }, { "id": 169026035, "predicate": "botCommandScopePeerUser", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "user_id", "type": "InputUser" }], "type": "BotCommandScope" }, { "id": -478701471, "predicate": "account.resetPasswordFailedWait", "params": [{ "name": "retry_date", "type": "int" }], "type": "account.ResetPasswordResult" }, { "id": -370148227, "predicate": "account.resetPasswordRequestedWait", "params": [{ "name": "until_date", "type": "int" }], "type": "account.ResetPasswordResult" }, { "id": -383330754, "predicate": "account.resetPasswordOk", "params": [], "type": "account.ResetPasswordResult" }, { "id": -318022605, "predicate": "chatTheme", "params": [{ "name": "emoticon", "type": "string" }, { "name": "theme", "type": "Theme" }, { "name": "dark_theme", "type": "Theme" }], "type": "ChatTheme" }, { "id": -535699004, "predicate": "account.chatThemesNotModified", "params": [], "type": "account.ChatThemes" }, { "id": -28524867, "predicate": "account.chatThemes", "params": [{ "name": "hash", "type": "int" }, { "name": "themes", "type": "Vector<ChatTheme>" }], "type": "account.ChatThemes" }, { "id": 708589599, "predicate": "sponsoredMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "random_id", "type": "bytes" }, { "name": "from_id", "type": "Peer" }, { "name": "start_param", "type": "flags.0?string" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.1?Vector<MessageEntity>" }], "type": "SponsoredMessage" }, { "id": 1705297877, "predicate": "messages.sponsoredMessages", "params": [{ "name": "messages", "type": "Vector<SponsoredMessage>" }, { "name": "chats", "type": "Vector<Chat>" }, { "name": "users", "type": "Vector<User>" }], "type": "messages.SponsoredMessages" }], "methods": [{ "id": -878758099, "method": "invokeAfterMsg", "params": [{ "name": "msg_id", "type": "long" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": 1036301552, "method": "invokeAfterMsgs", "params": [{ "name": "msg_ids", "type": "Vector<long>" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": -1043505495, "method": "initConnection", "params": [{ "name": "flags", "type": "#" }, { "name": "api_id", "type": "int" }, { "name": "device_model", "type": "string" }, { "name": "system_version", "type": "string" }, { "name": "app_version", "type": "string" }, { "name": "system_lang_code", "type": "string" }, { "name": "lang_pack", "type": "string" }, { "name": "lang_code", "type": "string" }, { "name": "proxy", "type": "flags.0?InputClientProxy" }, { "name": "params", "type": "flags.1?JSONValue" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": -627372787, "method": "invokeWithLayer", "params": [{ "name": "layer", "type": "int" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": -1080796745, "method": "invokeWithoutUpdates", "params": [{ "name": "query", "type": "!X" }], "type": "X" }, { "id": 911373810, "method": "invokeWithMessagesRange", "params": [{ "name": "range", "type": "MessageRange" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": -1398145746, "method": "invokeWithTakeout", "params": [{ "name": "takeout_id", "type": "long" }, { "name": "query", "type": "!X" }], "type": "X" }, { "id": -1502141361, "method": "auth.sendCode", "params": [{ "name": "phone_number", "type": "string" }, { "name": "api_id", "type": "int" }, { "name": "api_hash", "type": "string" }, { "name": "settings", "type": "CodeSettings" }], "type": "auth.SentCode" }, { "id": -2131827673, "method": "auth.signUp", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }], "type": "auth.Authorization" }, { "id": -1126886015, "method": "auth.signIn", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }, { "name": "phone_code", "type": "string" }], "type": "auth.Authorization" }, { "id": 1461180992, "method": "auth.logOut", "params": [], "type": "Bool" }, { "id": -1616179942, "method": "auth.resetAuthorizations", "params": [], "type": "Bool" }, { "id": -440401971, "method": "auth.exportAuthorization", "params": [{ "name": "dc_id", "type": "int" }], "type": "auth.ExportedAuthorization" }, { "id": -1518699091, "method": "auth.importAuthorization", "params": [{ "name": "id", "type": "long" }, { "name": "bytes", "type": "bytes" }], "type": "auth.Authorization" }, { "id": -841733627, "method": "auth.bindTempAuthKey", "params": [{ "name": "perm_auth_key_id", "type": "long" }, { "name": "nonce", "type": "long" }, { "name": "expires_at", "type": "int" }, { "name": "encrypted_message", "type": "bytes" }], "type": "Bool" }, { "id": 1738800940, "method": "auth.importBotAuthorization", "params": [{ "name": "flags", "type": "int" }, { "name": "api_id", "type": "int" }, { "name": "api_hash", "type": "string" }, { "name": "bot_auth_token", "type": "string" }], "type": "auth.Authorization" }, { "id": -779399914, "method": "auth.checkPassword", "params": [{ "name": "password", "type": "InputCheckPasswordSRP" }], "type": "auth.Authorization" }, { "id": -661144474, "method": "auth.requestPasswordRecovery", "params": [], "type": "auth.PasswordRecovery" }, { "id": 923364464, "method": "auth.recoverPassword", "params": [{ "name": "flags", "type": "#" }, { "name": "code", "type": "string" }, { "name": "new_settings", "type": "flags.0?account.PasswordInputSettings" }], "type": "auth.Authorization" }, { "id": 1056025023, "method": "auth.resendCode", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }], "type": "auth.SentCode" }, { "id": 520357240, "method": "auth.cancelCode", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }], "type": "Bool" }, { "id": -1907842680, "method": "auth.dropTempAuthKeys", "params": [{ "name": "except_auth_keys", "type": "Vector<long>" }], "type": "Bool" }, { "id": -1210022402, "method": "auth.exportLoginToken", "params": [{ "name": "api_id", "type": "int" }, { "name": "api_hash", "type": "string" }, { "name": "except_ids", "type": "Vector<long>" }], "type": "auth.LoginToken" }, { "id": -1783866140, "method": "auth.importLoginToken", "params": [{ "name": "token", "type": "bytes" }], "type": "auth.LoginToken" }, { "id": -392909491, "method": "auth.acceptLoginToken", "params": [{ "name": "token", "type": "bytes" }], "type": "Authorization" }, { "id": 221691769, "method": "auth.checkRecoveryPassword", "params": [{ "name": "code", "type": "string" }], "type": "Bool" }, { "id": -326762118, "method": "account.registerDevice", "params": [{ "name": "flags", "type": "#" }, { "name": "no_muted", "type": "flags.0?true" }, { "name": "token_type", "type": "int" }, { "name": "token", "type": "string" }, { "name": "app_sandbox", "type": "Bool" }, { "name": "secret", "type": "bytes" }, { "name": "other_uids", "type": "Vector<long>" }], "type": "Bool" }, { "id": 1779249670, "method": "account.unregisterDevice", "params": [{ "name": "token_type", "type": "int" }, { "name": "token", "type": "string" }, { "name": "other_uids", "type": "Vector<long>" }], "type": "Bool" }, { "id": -2067899501, "method": "account.updateNotifySettings", "params": [{ "name": "peer", "type": "InputNotifyPeer" }, { "name": "settings", "type": "InputPeerNotifySettings" }], "type": "Bool" }, { "id": 313765169, "method": "account.getNotifySettings", "params": [{ "name": "peer", "type": "InputNotifyPeer" }], "type": "PeerNotifySettings" }, { "id": -612493497, "method": "account.resetNotifySettings", "params": [], "type": "Bool" }, { "id": 2018596725, "method": "account.updateProfile", "params": [{ "name": "flags", "type": "#" }, { "name": "first_name", "type": "flags.0?string" }, { "name": "last_name", "type": "flags.1?string" }, { "name": "about", "type": "flags.2?string" }], "type": "User" }, { "id": 1713919532, "method": "account.updateStatus", "params": [{ "name": "offline", "type": "Bool" }], "type": "Bool" }, { "id": 127302966, "method": "account.getWallPapers", "params": [{ "name": "hash", "type": "long" }], "type": "account.WallPapers" }, { "id": -977650298, "method": "account.reportPeer", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "reason", "type": "ReportReason" }, { "name": "message", "type": "string" }], "type": "Bool" }, { "id": 655677548, "method": "account.checkUsername", "params": [{ "name": "username", "type": "string" }], "type": "Bool" }, { "id": 1040964988, "method": "account.updateUsername", "params": [{ "name": "username", "type": "string" }], "type": "User" }, { "id": -623130288, "method": "account.getPrivacy", "params": [{ "name": "key", "type": "InputPrivacyKey" }], "type": "account.PrivacyRules" }, { "id": -906486552, "method": "account.setPrivacy", "params": [{ "name": "key", "type": "InputPrivacyKey" }, { "name": "rules", "type": "Vector<InputPrivacyRule>" }], "type": "account.PrivacyRules" }, { "id": 1099779595, "method": "account.deleteAccount", "params": [{ "name": "reason", "type": "string" }], "type": "Bool" }, { "id": 150761757, "method": "account.getAccountTTL", "params": [], "type": "AccountDaysTTL" }, { "id": 608323678, "method": "account.setAccountTTL", "params": [{ "name": "ttl", "type": "AccountDaysTTL" }], "type": "Bool" }, { "id": -2108208411, "method": "account.sendChangePhoneCode", "params": [{ "name": "phone_number", "type": "string" }, { "name": "settings", "type": "CodeSettings" }], "type": "auth.SentCode" }, { "id": 1891839707, "method": "account.changePhone", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }, { "name": "phone_code", "type": "string" }], "type": "User" }, { "id": 954152242, "method": "account.updateDeviceLocked", "params": [{ "name": "period", "type": "int" }], "type": "Bool" }, { "id": -484392616, "method": "account.getAuthorizations", "params": [], "type": "account.Authorizations" }, { "id": -545786948, "method": "account.resetAuthorization", "params": [{ "name": "hash", "type": "long" }], "type": "Bool" }, { "id": 1418342645, "method": "account.getPassword", "params": [], "type": "account.Password" }, { "id": -1663767815, "method": "account.getPasswordSettings", "params": [{ "name": "password", "type": "InputCheckPasswordSRP" }], "type": "account.PasswordSettings" }, { "id": -1516564433, "method": "account.updatePasswordSettings", "params": [{ "name": "password", "type": "InputCheckPasswordSRP" }, { "name": "new_settings", "type": "account.PasswordInputSettings" }], "type": "Bool" }, { "id": 457157256, "method": "account.sendConfirmPhoneCode", "params": [{ "name": "hash", "type": "string" }, { "name": "settings", "type": "CodeSettings" }], "type": "auth.SentCode" }, { "id": 1596029123, "method": "account.confirmPhone", "params": [{ "name": "phone_code_hash", "type": "string" }, { "name": "phone_code", "type": "string" }], "type": "Bool" }, { "id": 1151208273, "method": "account.getTmpPassword", "params": [{ "name": "password", "type": "InputCheckPasswordSRP" }, { "name": "period", "type": "int" }], "type": "account.TmpPassword" }, { "id": 405695855, "method": "account.getWebAuthorizations", "params": [], "type": "account.WebAuthorizations" }, { "id": 755087855, "method": "account.resetWebAuthorization", "params": [{ "name": "hash", "type": "long" }], "type": "Bool" }, { "id": 1747789204, "method": "account.resetWebAuthorizations", "params": [], "type": "Bool" }, { "id": -1299661699, "method": "account.getAllSecureValues", "params": [], "type": "Vector<SecureValue>" }, { "id": 1936088002, "method": "account.getSecureValue", "params": [{ "name": "types", "type": "Vector<SecureValueType>" }], "type": "Vector<SecureValue>" }, { "id": -1986010339, "method": "account.saveSecureValue", "params": [{ "name": "value", "type": "InputSecureValue" }, { "name": "secure_secret_id", "type": "long" }], "type": "SecureValue" }, { "id": -1199522741, "method": "account.deleteSecureValue", "params": [{ "name": "types", "type": "Vector<SecureValueType>" }], "type": "Bool" }, { "id": -1456907910, "method": "account.getAuthorizationForm", "params": [{ "name": "bot_id", "type": "long" }, { "name": "scope", "type": "string" }, { "name": "public_key", "type": "string" }], "type": "account.AuthorizationForm" }, { "id": -202552205, "method": "account.acceptAuthorization", "params": [{ "name": "bot_id", "type": "long" }, { "name": "scope", "type": "string" }, { "name": "public_key", "type": "string" }, { "name": "value_hashes", "type": "Vector<SecureValueHash>" }, { "name": "credentials", "type": "SecureCredentialsEncrypted" }], "type": "Bool" }, { "id": -1516022023, "method": "account.sendVerifyPhoneCode", "params": [{ "name": "phone_number", "type": "string" }, { "name": "settings", "type": "CodeSettings" }], "type": "auth.SentCode" }, { "id": 1305716726, "method": "account.verifyPhone", "params": [{ "name": "phone_number", "type": "string" }, { "name": "phone_code_hash", "type": "string" }, { "name": "phone_code", "type": "string" }], "type": "Bool" }, { "id": 1880182943, "method": "account.sendVerifyEmailCode", "params": [{ "name": "email", "type": "string" }], "type": "account.SentEmailCode" }, { "id": -323339813, "method": "account.verifyEmail", "params": [{ "name": "email", "type": "string" }, { "name": "code", "type": "string" }], "type": "Bool" }, { "id": -262453244, "method": "account.initTakeoutSession", "params": [{ "name": "flags", "type": "#" }, { "name": "contacts", "type": "flags.0?true" }, { "name": "message_users", "type": "flags.1?true" }, { "name": "message_chats", "type": "flags.2?true" }, { "name": "message_megagroups", "type": "flags.3?true" }, { "name": "message_channels", "type": "flags.4?true" }, { "name": "files", "type": "flags.5?true" }, { "name": "file_max_size", "type": "flags.5?int" }], "type": "account.Takeout" }, { "id": 489050862, "method": "account.finishTakeoutSession", "params": [{ "name": "flags", "type": "#" }, { "name": "success", "type": "flags.0?true" }], "type": "Bool" }, { "id": -1881204448, "method": "account.confirmPasswordEmail", "params": [{ "name": "code", "type": "string" }], "type": "Bool" }, { "id": 2055154197, "method": "account.resendPasswordEmail", "params": [], "type": "Bool" }, { "id": -1043606090, "method": "account.cancelPasswordEmail", "params": [], "type": "Bool" }, { "id": -1626880216, "method": "account.getContactSignUpNotification", "params": [], "type": "Bool" }, { "id": -806076575, "method": "account.setContactSignUpNotification", "params": [{ "name": "silent", "type": "Bool" }], "type": "Bool" }, { "id": 1398240377, "method": "account.getNotifyExceptions", "params": [{ "name": "flags", "type": "#" }, { "name": "compare_sound", "type": "flags.1?true" }, { "name": "peer", "type": "flags.0?InputNotifyPeer" }], "type": "Updates" }, { "id": -57811990, "method": "account.getWallPaper", "params": [{ "name": "wallpaper", "type": "InputWallPaper" }], "type": "WallPaper" }, { "id": -578472351, "method": "account.uploadWallPaper", "params": [{ "name": "file", "type": "InputFile" }, { "name": "mime_type", "type": "string" }, { "name": "settings", "type": "WallPaperSettings" }], "type": "WallPaper" }, { "id": 1817860919, "method": "account.saveWallPaper", "params": [{ "name": "wallpaper", "type": "InputWallPaper" }, { "name": "unsave", "type": "Bool" }, { "name": "settings", "type": "WallPaperSettings" }], "type": "Bool" }, { "id": -18000023, "method": "account.installWallPaper", "params": [{ "name": "wallpaper", "type": "InputWallPaper" }, { "name": "settings", "type": "WallPaperSettings" }], "type": "Bool" }, { "id": -1153722364, "method": "account.resetWallPapers", "params": [], "type": "Bool" }, { "id": 1457130303, "method": "account.getAutoDownloadSettings", "params": [], "type": "account.AutoDownloadSettings" }, { "id": 1995661875, "method": "account.saveAutoDownloadSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "low", "type": "flags.0?true" }, { "name": "high", "type": "flags.1?true" }, { "name": "settings", "type": "AutoDownloadSettings" }], "type": "Bool" }, { "id": 473805619, "method": "account.uploadTheme", "params": [{ "name": "flags", "type": "#" }, { "name": "file", "type": "InputFile" }, { "name": "thumb", "type": "flags.0?InputFile" }, { "name": "file_name", "type": "string" }, { "name": "mime_type", "type": "string" }], "type": "Document" }, { "id": -2077048289, "method": "account.createTheme", "params": [{ "name": "flags", "type": "#" }, { "name": "slug", "type": "string" }, { "name": "title", "type": "string" }, { "name": "document", "type": "flags.2?InputDocument" }, { "name": "settings", "type": "flags.3?InputThemeSettings" }], "type": "Theme" }, { "id": 1555261397, "method": "account.updateTheme", "params": [{ "name": "flags", "type": "#" }, { "name": "format", "type": "string" }, { "name": "theme", "type": "InputTheme" }, { "name": "slug", "type": "flags.0?string" }, { "name": "title", "type": "flags.1?string" }, { "name": "document", "type": "flags.2?InputDocument" }, { "name": "settings", "type": "flags.3?InputThemeSettings" }], "type": "Theme" }, { "id": -229175188, "method": "account.saveTheme", "params": [{ "name": "theme", "type": "InputTheme" }, { "name": "unsave", "type": "Bool" }], "type": "Bool" }, { "id": 2061776695, "method": "account.installTheme", "params": [{ "name": "flags", "type": "#" }, { "name": "dark", "type": "flags.0?true" }, { "name": "format", "type": "flags.1?string" }, { "name": "theme", "type": "flags.1?InputTheme" }], "type": "Bool" }, { "id": -1919060949, "method": "account.getTheme", "params": [{ "name": "format", "type": "string" }, { "name": "theme", "type": "InputTheme" }, { "name": "document_id", "type": "long" }], "type": "Theme" }, { "id": 1913054296, "method": "account.getThemes", "params": [{ "name": "format", "type": "string" }, { "name": "hash", "type": "long" }], "type": "account.Themes" }, { "id": -1250643605, "method": "account.setContentSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "sensitive_enabled", "type": "flags.0?true" }], "type": "Bool" }, { "id": -1952756306, "method": "account.getContentSettings", "params": [], "type": "account.ContentSettings" }, { "id": 1705865692, "method": "account.getMultiWallPapers", "params": [{ "name": "wallpapers", "type": "Vector<InputWallPaper>" }], "type": "Vector<WallPaper>" }, { "id": -349483786, "method": "account.getGlobalPrivacySettings", "params": [], "type": "GlobalPrivacySettings" }, { "id": 517647042, "method": "account.setGlobalPrivacySettings", "params": [{ "name": "settings", "type": "GlobalPrivacySettings" }], "type": "GlobalPrivacySettings" }, { "id": -91437323, "method": "account.reportProfilePhoto", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "photo_id", "type": "InputPhoto" }, { "name": "reason", "type": "ReportReason" }, { "name": "message", "type": "string" }], "type": "Bool" }, { "id": -1828139493, "method": "account.resetPassword", "params": [], "type": "account.ResetPasswordResult" }, { "id": 1284770294, "method": "account.declinePasswordReset", "params": [], "type": "Bool" }, { "id": -690545285, "method": "account.getChatThemes", "params": [{ "name": "hash", "type": "int" }], "type": "account.ChatThemes" }, { "id": 227648840, "method": "users.getUsers", "params": [{ "name": "id", "type": "Vector<InputUser>" }], "type": "Vector<User>" }, { "id": -902781519, "method": "users.getFullUser", "params": [{ "name": "id", "type": "InputUser" }], "type": "UserFull" }, { "id": -1865902923, "method": "users.setSecureValueErrors", "params": [{ "name": "id", "type": "InputUser" }, { "name": "errors", "type": "Vector<SecureValueError>" }], "type": "Bool" }, { "id": 2061264541, "method": "contacts.getContactIDs", "params": [{ "name": "hash", "type": "long" }], "type": "Vector<int>" }, { "id": -995929106, "method": "contacts.getStatuses", "params": [], "type": "Vector<ContactStatus>" }, { "id": 1574346258, "method": "contacts.getContacts", "params": [{ "name": "hash", "type": "long" }], "type": "contacts.Contacts" }, { "id": 746589157, "method": "contacts.importContacts", "params": [{ "name": "contacts", "type": "Vector<InputContact>" }], "type": "contacts.ImportedContacts" }, { "id": 157945344, "method": "contacts.deleteContacts", "params": [{ "name": "id", "type": "Vector<InputUser>" }], "type": "Updates" }, { "id": 269745566, "method": "contacts.deleteByPhones", "params": [{ "name": "phones", "type": "Vector<string>" }], "type": "Bool" }, { "id": 1758204945, "method": "contacts.block", "params": [{ "name": "id", "type": "InputPeer" }], "type": "Bool" }, { "id": -1096393392, "method": "contacts.unblock", "params": [{ "name": "id", "type": "InputPeer" }], "type": "Bool" }, { "id": -176409329, "method": "contacts.getBlocked", "params": [{ "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }], "type": "contacts.Blocked" }, { "id": 301470424, "method": "contacts.search", "params": [{ "name": "q", "type": "string" }, { "name": "limit", "type": "int" }], "type": "contacts.Found" }, { "id": -113456221, "method": "contacts.resolveUsername", "params": [{ "name": "username", "type": "string" }], "type": "contacts.ResolvedPeer" }, { "id": -1758168906, "method": "contacts.getTopPeers", "params": [{ "name": "flags", "type": "#" }, { "name": "correspondents", "type": "flags.0?true" }, { "name": "bots_pm", "type": "flags.1?true" }, { "name": "bots_inline", "type": "flags.2?true" }, { "name": "phone_calls", "type": "flags.3?true" }, { "name": "forward_users", "type": "flags.4?true" }, { "name": "forward_chats", "type": "flags.5?true" }, { "name": "groups", "type": "flags.10?true" }, { "name": "channels", "type": "flags.15?true" }, { "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "long" }], "type": "contacts.TopPeers" }, { "id": 451113900, "method": "contacts.resetTopPeerRating", "params": [{ "name": "category", "type": "TopPeerCategory" }, { "name": "peer", "type": "InputPeer" }], "type": "Bool" }, { "id": -2020263951, "method": "contacts.resetSaved", "params": [], "type": "Bool" }, { "id": -2098076769, "method": "contacts.getSaved", "params": [], "type": "Vector<SavedContact>" }, { "id": -2062238246, "method": "contacts.toggleTopPeers", "params": [{ "name": "enabled", "type": "Bool" }], "type": "Bool" }, { "id": -386636848, "method": "contacts.addContact", "params": [{ "name": "flags", "type": "#" }, { "name": "add_phone_privacy_exception", "type": "flags.0?true" }, { "name": "id", "type": "InputUser" }, { "name": "first_name", "type": "string" }, { "name": "last_name", "type": "string" }, { "name": "phone", "type": "string" }], "type": "Updates" }, { "id": -130964977, "method": "contacts.acceptContact", "params": [{ "name": "id", "type": "InputUser" }], "type": "Updates" }, { "id": -750207932, "method": "contacts.getLocated", "params": [{ "name": "flags", "type": "#" }, { "name": "background", "type": "flags.1?true" }, { "name": "geo_point", "type": "InputGeoPoint" }, { "name": "self_expires", "type": "flags.0?int" }], "type": "Updates" }, { "id": 698914348, "method": "contacts.blockFromReplies", "params": [{ "name": "flags", "type": "#" }, { "name": "delete_message", "type": "flags.0?true" }, { "name": "delete_history", "type": "flags.1?true" }, { "name": "report_spam", "type": "flags.2?true" }, { "name": "msg_id", "type": "int" }], "type": "Updates" }, { "id": 1673946374, "method": "messages.getMessages", "params": [{ "name": "id", "type": "Vector<InputMessage>" }], "type": "messages.Messages" }, { "id": -1594569905, "method": "messages.getDialogs", "params": [{ "name": "flags", "type": "#" }, { "name": "exclude_pinned", "type": "flags.0?true" }, { "name": "folder_id", "type": "flags.1?int" }, { "name": "offset_date", "type": "int" }, { "name": "offset_id", "type": "int" }, { "name": "offset_peer", "type": "InputPeer" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.Dialogs" }, { "id": 1143203525, "method": "messages.getHistory", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "offset_id", "type": "int" }, { "name": "offset_date", "type": "int" }, { "name": "add_offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "max_id", "type": "int" }, { "name": "min_id", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.Messages" }, { "id": -1593989278, "method": "messages.search", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "InputPeer" }, { "name": "q", "type": "string" }, { "name": "from_id", "type": "flags.0?InputPeer" }, { "name": "top_msg_id", "type": "flags.1?int" }, { "name": "filter", "type": "MessagesFilter" }, { "name": "min_date", "type": "int" }, { "name": "max_date", "type": "int" }, { "name": "offset_id", "type": "int" }, { "name": "add_offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "max_id", "type": "int" }, { "name": "min_id", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.Messages" }, { "id": 238054714, "method": "messages.readHistory", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "max_id", "type": "int" }], "type": "messages.AffectedMessages" }, { "id": 469850889, "method": "messages.deleteHistory", "params": [{ "name": "flags", "type": "#" }, { "name": "just_clear", "type": "flags.0?true" }, { "name": "revoke", "type": "flags.1?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "max_id", "type": "int" }], "type": "messages.AffectedHistory" }, { "id": -443640366, "method": "messages.deleteMessages", "params": [{ "name": "flags", "type": "#" }, { "name": "revoke", "type": "flags.0?true" }, { "name": "id", "type": "Vector<int>" }], "type": "messages.AffectedMessages" }, { "id": 94983360, "method": "messages.receivedMessages", "params": [{ "name": "max_id", "type": "int" }], "type": "Vector<ReceivedNotifyMessage>" }, { "id": 1486110434, "method": "messages.setTyping", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "InputPeer" }, { "name": "top_msg_id", "type": "flags.0?int" }, { "name": "action", "type": "SendMessageAction" }], "type": "Bool" }, { "id": 1376532592, "method": "messages.sendMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.1?true" }, { "name": "silent", "type": "flags.5?true" }, { "name": "background", "type": "flags.6?true" }, { "name": "clear_draft", "type": "flags.7?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "message", "type": "string" }, { "name": "random_id", "type": "long" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }, { "name": "schedule_date", "type": "flags.10?int" }], "type": "Updates" }, { "id": 881978281, "method": "messages.sendMedia", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.5?true" }, { "name": "background", "type": "flags.6?true" }, { "name": "clear_draft", "type": "flags.7?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "media", "type": "InputMedia" }, { "name": "message", "type": "string" }, { "name": "random_id", "type": "long" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }, { "name": "schedule_date", "type": "flags.10?int" }], "type": "Updates" }, { "id": -637606386, "method": "messages.forwardMessages", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.5?true" }, { "name": "background", "type": "flags.6?true" }, { "name": "with_my_score", "type": "flags.8?true" }, { "name": "drop_author", "type": "flags.11?true" }, { "name": "drop_media_captions", "type": "flags.12?true" }, { "name": "from_peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }, { "name": "random_id", "type": "Vector<long>" }, { "name": "to_peer", "type": "InputPeer" }, { "name": "schedule_date", "type": "flags.10?int" }], "type": "Updates" }, { "id": -820669733, "method": "messages.reportSpam", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "Bool" }, { "id": 913498268, "method": "messages.getPeerSettings", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "PeerSettings" }, { "id": -1991005362, "method": "messages.report", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }, { "name": "reason", "type": "ReportReason" }, { "name": "message", "type": "string" }], "type": "Bool" }, { "id": 1240027791, "method": "messages.getChats", "params": [{ "name": "id", "type": "Vector<long>" }], "type": "messages.Chats" }, { "id": -1364194508, "method": "messages.getFullChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "messages.ChatFull" }, { "id": 1937260541, "method": "messages.editChatTitle", "params": [{ "name": "chat_id", "type": "long" }, { "name": "title", "type": "string" }], "type": "Updates" }, { "id": 903730804, "method": "messages.editChatPhoto", "params": [{ "name": "chat_id", "type": "long" }, { "name": "photo", "type": "InputChatPhoto" }], "type": "Updates" }, { "id": -230206493, "method": "messages.addChatUser", "params": [{ "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "InputUser" }, { "name": "fwd_limit", "type": "int" }], "type": "Updates" }, { "id": -1575461717, "method": "messages.deleteChatUser", "params": [{ "name": "flags", "type": "#" }, { "name": "revoke_history", "type": "flags.0?true" }, { "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "InputUser" }], "type": "Updates" }, { "id": 164303470, "method": "messages.createChat", "params": [{ "name": "users", "type": "Vector<InputUser>" }, { "name": "title", "type": "string" }], "type": "Updates" }, { "id": 651135312, "method": "messages.getDhConfig", "params": [{ "name": "version", "type": "int" }, { "name": "random_length", "type": "int" }], "type": "messages.DhConfig" }, { "id": -162681021, "method": "messages.requestEncryption", "params": [{ "name": "user_id", "type": "InputUser" }, { "name": "random_id", "type": "int" }, { "name": "g_a", "type": "bytes" }], "type": "EncryptedChat" }, { "id": 1035731989, "method": "messages.acceptEncryption", "params": [{ "name": "peer", "type": "InputEncryptedChat" }, { "name": "g_b", "type": "bytes" }, { "name": "key_fingerprint", "type": "long" }], "type": "EncryptedChat" }, { "id": -208425312, "method": "messages.discardEncryption", "params": [{ "name": "flags", "type": "#" }, { "name": "delete_history", "type": "flags.0?true" }, { "name": "chat_id", "type": "int" }], "type": "Bool" }, { "id": 2031374829, "method": "messages.setEncryptedTyping", "params": [{ "name": "peer", "type": "InputEncryptedChat" }, { "name": "typing", "type": "Bool" }], "type": "Bool" }, { "id": 2135648522, "method": "messages.readEncryptedHistory", "params": [{ "name": "peer", "type": "InputEncryptedChat" }, { "name": "max_date", "type": "int" }], "type": "Bool" }, { "id": 1157265941, "method": "messages.sendEncrypted", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.0?true" }, { "name": "peer", "type": "InputEncryptedChat" }, { "name": "random_id", "type": "long" }, { "name": "data", "type": "bytes" }], "type": "messages.SentEncryptedMessage" }, { "id": 1431914525, "method": "messages.sendEncryptedFile", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.0?true" }, { "name": "peer", "type": "InputEncryptedChat" }, { "name": "random_id", "type": "long" }, { "name": "data", "type": "bytes" }, { "name": "file", "type": "InputEncryptedFile" }], "type": "messages.SentEncryptedMessage" }, { "id": 852769188, "method": "messages.sendEncryptedService", "params": [{ "name": "peer", "type": "InputEncryptedChat" }, { "name": "random_id", "type": "long" }, { "name": "data", "type": "bytes" }], "type": "messages.SentEncryptedMessage" }, { "id": 1436924774, "method": "messages.receivedQueue", "params": [{ "name": "max_qts", "type": "int" }], "type": "Vector<long>" }, { "id": 1259113487, "method": "messages.reportEncryptedSpam", "params": [{ "name": "peer", "type": "InputEncryptedChat" }], "type": "Bool" }, { "id": 916930423, "method": "messages.readMessageContents", "params": [{ "name": "id", "type": "Vector<int>" }], "type": "messages.AffectedMessages" }, { "id": -710552671, "method": "messages.getStickers", "params": [{ "name": "emoticon", "type": "string" }, { "name": "hash", "type": "long" }], "type": "messages.Stickers" }, { "id": -1197432408, "method": "messages.getAllStickers", "params": [{ "name": "hash", "type": "long" }], "type": "messages.AllStickers" }, { "id": -1956073268, "method": "messages.getWebPagePreview", "params": [{ "name": "flags", "type": "#" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }], "type": "MessageMedia" }, { "id": 347716823, "method": "messages.exportChatInvite", "params": [{ "name": "flags", "type": "#" }, { "name": "legacy_revoke_permanent", "type": "flags.2?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "expire_date", "type": "flags.0?int" }, { "name": "usage_limit", "type": "flags.1?int" }], "type": "ExportedChatInvite" }, { "id": 1051570619, "method": "messages.checkChatInvite", "params": [{ "name": "hash", "type": "string" }], "type": "ChatInvite" }, { "id": 1817183516, "method": "messages.importChatInvite", "params": [{ "name": "hash", "type": "string" }], "type": "Updates" }, { "id": 639215886, "method": "messages.getStickerSet", "params": [{ "name": "stickerset", "type": "InputStickerSet" }], "type": "messages.StickerSet" }, { "id": -946871200, "method": "messages.installStickerSet", "params": [{ "name": "stickerset", "type": "InputStickerSet" }, { "name": "archived", "type": "Bool" }], "type": "messages.StickerSetInstallResult" }, { "id": -110209570, "method": "messages.uninstallStickerSet", "params": [{ "name": "stickerset", "type": "InputStickerSet" }], "type": "Bool" }, { "id": -421563528, "method": "messages.startBot", "params": [{ "name": "bot", "type": "InputUser" }, { "name": "peer", "type": "InputPeer" }, { "name": "random_id", "type": "long" }, { "name": "start_param", "type": "string" }], "type": "Updates" }, { "id": 1468322785, "method": "messages.getMessagesViews", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }, { "name": "increment", "type": "Bool" }], "type": "messages.MessageViews" }, { "id": -1470377534, "method": "messages.editChatAdmin", "params": [{ "name": "chat_id", "type": "long" }, { "name": "user_id", "type": "InputUser" }, { "name": "is_admin", "type": "Bool" }], "type": "Bool" }, { "id": -1568189671, "method": "messages.migrateChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "Updates" }, { "id": 1271290010, "method": "messages.searchGlobal", "params": [{ "name": "flags", "type": "#" }, { "name": "folder_id", "type": "flags.0?int" }, { "name": "q", "type": "string" }, { "name": "filter", "type": "MessagesFilter" }, { "name": "min_date", "type": "int" }, { "name": "max_date", "type": "int" }, { "name": "offset_rate", "type": "int" }, { "name": "offset_peer", "type": "InputPeer" }, { "name": "offset_id", "type": "int" }, { "name": "limit", "type": "int" }], "type": "messages.Messages" }, { "id": 2016638777, "method": "messages.reorderStickerSets", "params": [{ "name": "flags", "type": "#" }, { "name": "masks", "type": "flags.0?true" }, { "name": "order", "type": "Vector<long>" }], "type": "Bool" }, { "id": 864953444, "method": "messages.getDocumentByHash", "params": [{ "name": "sha256", "type": "bytes" }, { "name": "size", "type": "int" }, { "name": "mime_type", "type": "string" }], "type": "Document" }, { "id": 1559270965, "method": "messages.getSavedGifs", "params": [{ "name": "hash", "type": "long" }], "type": "messages.SavedGifs" }, { "id": 846868683, "method": "messages.saveGif", "params": [{ "name": "id", "type": "InputDocument" }, { "name": "unsave", "type": "Bool" }], "type": "Bool" }, { "id": 1364105629, "method": "messages.getInlineBotResults", "params": [{ "name": "flags", "type": "#" }, { "name": "bot", "type": "InputUser" }, { "name": "peer", "type": "InputPeer" }, { "name": "geo_point", "type": "flags.0?InputGeoPoint" }, { "name": "query", "type": "string" }, { "name": "offset", "type": "string" }], "type": "messages.BotResults" }, { "id": -346119674, "method": "messages.setInlineBotResults", "params": [{ "name": "flags", "type": "#" }, { "name": "gallery", "type": "flags.0?true" }, { "name": "private", "type": "flags.1?true" }, { "name": "query_id", "type": "long" }, { "name": "results", "type": "Vector<InputBotInlineResult>" }, { "name": "cache_time", "type": "int" }, { "name": "next_offset", "type": "flags.2?string" }, { "name": "switch_pm", "type": "flags.3?InlineBotSwitchPM" }], "type": "Bool" }, { "id": 570955184, "method": "messages.sendInlineBotResult", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.5?true" }, { "name": "background", "type": "flags.6?true" }, { "name": "clear_draft", "type": "flags.7?true" }, { "name": "hide_via", "type": "flags.11?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "random_id", "type": "long" }, { "name": "query_id", "type": "long" }, { "name": "id", "type": "string" }, { "name": "schedule_date", "type": "flags.10?int" }], "type": "Updates" }, { "id": -39416522, "method": "messages.getMessageEditData", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }], "type": "messages.MessageEditData" }, { "id": 1224152952, "method": "messages.editMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.1?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }, { "name": "message", "type": "flags.11?string" }, { "name": "media", "type": "flags.14?InputMedia" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }, { "name": "schedule_date", "type": "flags.15?int" }], "type": "Updates" }, { "id": -2091549254, "method": "messages.editInlineBotMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.1?true" }, { "name": "id", "type": "InputBotInlineMessageID" }, { "name": "message", "type": "flags.11?string" }, { "name": "media", "type": "flags.14?InputMedia" }, { "name": "reply_markup", "type": "flags.2?ReplyMarkup" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }], "type": "Bool" }, { "id": -1824339449, "method": "messages.getBotCallbackAnswer", "params": [{ "name": "flags", "type": "#" }, { "name": "game", "type": "flags.1?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "data", "type": "flags.0?bytes" }, { "name": "password", "type": "flags.2?InputCheckPasswordSRP" }], "type": "messages.BotCallbackAnswer" }, { "id": -712043766, "method": "messages.setBotCallbackAnswer", "params": [{ "name": "flags", "type": "#" }, { "name": "alert", "type": "flags.1?true" }, { "name": "query_id", "type": "long" }, { "name": "message", "type": "flags.0?string" }, { "name": "url", "type": "flags.2?string" }, { "name": "cache_time", "type": "int" }], "type": "Bool" }, { "id": -462373635, "method": "messages.getPeerDialogs", "params": [{ "name": "peers", "type": "Vector<InputDialogPeer>" }], "type": "messages.PeerDialogs" }, { "id": -1137057461, "method": "messages.saveDraft", "params": [{ "name": "flags", "type": "#" }, { "name": "no_webpage", "type": "flags.1?true" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "peer", "type": "InputPeer" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "flags.3?Vector<MessageEntity>" }], "type": "Bool" }, { "id": 1782549861, "method": "messages.getAllDrafts", "params": [], "type": "Updates" }, { "id": 1685588756, "method": "messages.getFeaturedStickers", "params": [{ "name": "hash", "type": "long" }], "type": "messages.FeaturedStickers" }, { "id": 1527873830, "method": "messages.readFeaturedStickers", "params": [{ "name": "id", "type": "Vector<long>" }], "type": "Bool" }, { "id": -1649852357, "method": "messages.getRecentStickers", "params": [{ "name": "flags", "type": "#" }, { "name": "attached", "type": "flags.0?true" }, { "name": "hash", "type": "long" }], "type": "messages.RecentStickers" }, { "id": 958863608, "method": "messages.saveRecentSticker", "params": [{ "name": "flags", "type": "#" }, { "name": "attached", "type": "flags.0?true" }, { "name": "id", "type": "InputDocument" }, { "name": "unsave", "type": "Bool" }], "type": "Bool" }, { "id": -1986437075, "method": "messages.clearRecentStickers", "params": [{ "name": "flags", "type": "#" }, { "name": "attached", "type": "flags.0?true" }], "type": "Bool" }, { "id": 1475442322, "method": "messages.getArchivedStickers", "params": [{ "name": "flags", "type": "#" }, { "name": "masks", "type": "flags.0?true" }, { "name": "offset_id", "type": "long" }, { "name": "limit", "type": "int" }], "type": "messages.ArchivedStickers" }, { "id": 1678738104, "method": "messages.getMaskStickers", "params": [{ "name": "hash", "type": "long" }], "type": "messages.AllStickers" }, { "id": -866424884, "method": "messages.getAttachedStickers", "params": [{ "name": "media", "type": "InputStickeredMedia" }], "type": "Vector<StickerSetCovered>" }, { "id": -1896289088, "method": "messages.setGameScore", "params": [{ "name": "flags", "type": "#" }, { "name": "edit_message", "type": "flags.0?true" }, { "name": "force", "type": "flags.1?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }, { "name": "user_id", "type": "InputUser" }, { "name": "score", "type": "int" }], "type": "Updates" }, { "id": 363700068, "method": "messages.setInlineGameScore", "params": [{ "name": "flags", "type": "#" }, { "name": "edit_message", "type": "flags.0?true" }, { "name": "force", "type": "flags.1?true" }, { "name": "id", "type": "InputBotInlineMessageID" }, { "name": "user_id", "type": "InputUser" }, { "name": "score", "type": "int" }], "type": "Bool" }, { "id": -400399203, "method": "messages.getGameHighScores", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }, { "name": "user_id", "type": "InputUser" }], "type": "messages.HighScores" }, { "id": 258170395, "method": "messages.getInlineGameHighScores", "params": [{ "name": "id", "type": "InputBotInlineMessageID" }, { "name": "user_id", "type": "InputUser" }], "type": "messages.HighScores" }, { "id": -468934396, "method": "messages.getCommonChats", "params": [{ "name": "user_id", "type": "InputUser" }, { "name": "max_id", "type": "long" }, { "name": "limit", "type": "int" }], "type": "messages.Chats" }, { "id": -2023787330, "method": "messages.getAllChats", "params": [{ "name": "except_ids", "type": "Vector<long>" }], "type": "messages.Chats" }, { "id": 852135825, "method": "messages.getWebPage", "params": [{ "name": "url", "type": "string" }, { "name": "hash", "type": "int" }], "type": "WebPage" }, { "id": -1489903017, "method": "messages.toggleDialogPin", "params": [{ "name": "flags", "type": "#" }, { "name": "pinned", "type": "flags.0?true" }, { "name": "peer", "type": "InputDialogPeer" }], "type": "Bool" }, { "id": 991616823, "method": "messages.reorderPinnedDialogs", "params": [{ "name": "flags", "type": "#" }, { "name": "force", "type": "flags.0?true" }, { "name": "folder_id", "type": "int" }, { "name": "order", "type": "Vector<InputDialogPeer>" }], "type": "Bool" }, { "id": -692498958, "method": "messages.getPinnedDialogs", "params": [{ "name": "folder_id", "type": "int" }], "type": "messages.PeerDialogs" }, { "id": -436833542, "method": "messages.setBotShippingResults", "params": [{ "name": "flags", "type": "#" }, { "name": "query_id", "type": "long" }, { "name": "error", "type": "flags.0?string" }, { "name": "shipping_options", "type": "flags.1?Vector<ShippingOption>" }], "type": "Bool" }, { "id": 163765653, "method": "messages.setBotPrecheckoutResults", "params": [{ "name": "flags", "type": "#" }, { "name": "success", "type": "flags.1?true" }, { "name": "query_id", "type": "long" }, { "name": "error", "type": "flags.0?string" }], "type": "Bool" }, { "id": 1369162417, "method": "messages.uploadMedia", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "media", "type": "InputMedia" }], "type": "MessageMedia" }, { "id": -914493408, "method": "messages.sendScreenshotNotification", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "reply_to_msg_id", "type": "int" }, { "name": "random_id", "type": "long" }], "type": "Updates" }, { "id": 82946729, "method": "messages.getFavedStickers", "params": [{ "name": "hash", "type": "long" }], "type": "messages.FavedStickers" }, { "id": -1174420133, "method": "messages.faveSticker", "params": [{ "name": "id", "type": "InputDocument" }, { "name": "unfave", "type": "Bool" }], "type": "Bool" }, { "id": 1180140658, "method": "messages.getUnreadMentions", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "offset_id", "type": "int" }, { "name": "add_offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "max_id", "type": "int" }, { "name": "min_id", "type": "int" }], "type": "messages.Messages" }, { "id": 251759059, "method": "messages.readMentions", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "messages.AffectedHistory" }, { "id": 1881817312, "method": "messages.getRecentLocations", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.Messages" }, { "id": -872345397, "method": "messages.sendMultiMedia", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.5?true" }, { "name": "background", "type": "flags.6?true" }, { "name": "clear_draft", "type": "flags.7?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "reply_to_msg_id", "type": "flags.0?int" }, { "name": "multi_media", "type": "Vector<InputSingleMedia>" }, { "name": "schedule_date", "type": "flags.10?int" }], "type": "Updates" }, { "id": 1347929239, "method": "messages.uploadEncryptedFile", "params": [{ "name": "peer", "type": "InputEncryptedChat" }, { "name": "file", "type": "InputEncryptedFile" }], "type": "EncryptedFile" }, { "id": 896555914, "method": "messages.searchStickerSets", "params": [{ "name": "flags", "type": "#" }, { "name": "exclude_featured", "type": "flags.0?true" }, { "name": "q", "type": "string" }, { "name": "hash", "type": "long" }], "type": "messages.FoundStickerSets" }, { "id": 486505992, "method": "messages.getSplitRanges", "params": [], "type": "Vector<MessageRange>" }, { "id": -1031349873, "method": "messages.markDialogUnread", "params": [{ "name": "flags", "type": "#" }, { "name": "unread", "type": "flags.0?true" }, { "name": "peer", "type": "InputDialogPeer" }], "type": "Bool" }, { "id": 585256482, "method": "messages.getDialogUnreadMarks", "params": [], "type": "Vector<DialogPeer>" }, { "id": 2119757468, "method": "messages.clearAllDrafts", "params": [], "type": "Bool" }, { "id": -760547348, "method": "messages.updatePinnedMessage", "params": [{ "name": "flags", "type": "#" }, { "name": "silent", "type": "flags.0?true" }, { "name": "unpin", "type": "flags.1?true" }, { "name": "pm_oneside", "type": "flags.2?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }], "type": "Updates" }, { "id": 283795844, "method": "messages.sendVote", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "options", "type": "Vector<bytes>" }], "type": "Updates" }, { "id": 1941660731, "method": "messages.getPollResults", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }], "type": "Updates" }, { "id": 1848369232, "method": "messages.getOnlines", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "ChatOnlines" }, { "id": -2127811866, "method": "messages.getStatsURL", "params": [{ "name": "flags", "type": "#" }, { "name": "dark", "type": "flags.0?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "params", "type": "string" }], "type": "StatsURL" }, { "id": -554301545, "method": "messages.editChatAbout", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "about", "type": "string" }], "type": "Bool" }, { "id": -1517917375, "method": "messages.editChatDefaultBannedRights", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "banned_rights", "type": "ChatBannedRights" }], "type": "Updates" }, { "id": 899735650, "method": "messages.getEmojiKeywords", "params": [{ "name": "lang_code", "type": "string" }], "type": "EmojiKeywordsDifference" }, { "id": 352892591, "method": "messages.getEmojiKeywordsDifference", "params": [{ "name": "lang_code", "type": "string" }, { "name": "from_version", "type": "int" }], "type": "EmojiKeywordsDifference" }, { "id": 1318675378, "method": "messages.getEmojiKeywordsLanguages", "params": [{ "name": "lang_codes", "type": "Vector<string>" }], "type": "Vector<EmojiLanguage>" }, { "id": -709817306, "method": "messages.getEmojiURL", "params": [{ "name": "lang_code", "type": "string" }], "type": "EmojiURL" }, { "id": 1932455680, "method": "messages.getSearchCounters", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "filters", "type": "Vector<MessagesFilter>" }], "type": "Vector<messages.SearchCounter>" }, { "id": 428848198, "method": "messages.requestUrlAuth", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "flags.1?InputPeer" }, { "name": "msg_id", "type": "flags.1?int" }, { "name": "button_id", "type": "flags.1?int" }, { "name": "url", "type": "flags.2?string" }], "type": "UrlAuthResult" }, { "id": -1322487515, "method": "messages.acceptUrlAuth", "params": [{ "name": "flags", "type": "#" }, { "name": "write_allowed", "type": "flags.0?true" }, { "name": "peer", "type": "flags.1?InputPeer" }, { "name": "msg_id", "type": "flags.1?int" }, { "name": "button_id", "type": "flags.1?int" }, { "name": "url", "type": "flags.2?string" }], "type": "UrlAuthResult" }, { "id": 1336717624, "method": "messages.hidePeerSettingsBar", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "Bool" }, { "id": -183077365, "method": "messages.getScheduledHistory", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "hash", "type": "long" }], "type": "messages.Messages" }, { "id": -1111817116, "method": "messages.getScheduledMessages", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }], "type": "messages.Messages" }, { "id": -1120369398, "method": "messages.sendScheduledMessages", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }], "type": "Updates" }, { "id": 1504586518, "method": "messages.deleteScheduledMessages", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "Vector<int>" }], "type": "Updates" }, { "id": -1200736242, "method": "messages.getPollVotes", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "InputPeer" }, { "name": "id", "type": "int" }, { "name": "option", "type": "flags.0?bytes" }, { "name": "offset", "type": "flags.1?string" }, { "name": "limit", "type": "int" }], "type": "messages.VotesList" }, { "id": -1257951254, "method": "messages.toggleStickerSets", "params": [{ "name": "flags", "type": "#" }, { "name": "uninstall", "type": "flags.0?true" }, { "name": "archive", "type": "flags.1?true" }, { "name": "unarchive", "type": "flags.2?true" }, { "name": "stickersets", "type": "Vector<InputStickerSet>" }], "type": "Bool" }, { "id": -241247891, "method": "messages.getDialogFilters", "params": [], "type": "Vector<DialogFilter>" }, { "id": -1566780372, "method": "messages.getSuggestedDialogFilters", "params": [], "type": "Vector<DialogFilterSuggested>" }, { "id": 450142282, "method": "messages.updateDialogFilter", "params": [{ "name": "flags", "type": "#" }, { "name": "id", "type": "int" }, { "name": "filter", "type": "flags.0?DialogFilter" }], "type": "Bool" }, { "id": -983318044, "method": "messages.updateDialogFiltersOrder", "params": [{ "name": "order", "type": "Vector<int>" }], "type": "Bool" }, { "id": 2127598753, "method": "messages.getOldFeaturedStickers", "params": [{ "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.FeaturedStickers" }, { "id": 584962828, "method": "messages.getReplies", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "offset_id", "type": "int" }, { "name": "offset_date", "type": "int" }, { "name": "add_offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "max_id", "type": "int" }, { "name": "min_id", "type": "int" }, { "name": "hash", "type": "long" }], "type": "messages.Messages" }, { "id": 1147761405, "method": "messages.getDiscussionMessage", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }], "type": "messages.DiscussionMessage" }, { "id": -147740172, "method": "messages.readDiscussion", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "read_max_id", "type": "int" }], "type": "Bool" }, { "id": -265962357, "method": "messages.unpinAllMessages", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "messages.AffectedHistory" }, { "id": 1540419152, "method": "messages.deleteChat", "params": [{ "name": "chat_id", "type": "long" }], "type": "Bool" }, { "id": -104078327, "method": "messages.deletePhoneCallHistory", "params": [{ "name": "flags", "type": "#" }, { "name": "revoke", "type": "flags.0?true" }], "type": "messages.AffectedFoundMessages" }, { "id": 1140726259, "method": "messages.checkHistoryImport", "params": [{ "name": "import_head", "type": "string" }], "type": "messages.HistoryImportParsed" }, { "id": 873008187, "method": "messages.initHistoryImport", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "file", "type": "InputFile" }, { "name": "media_count", "type": "int" }], "type": "messages.HistoryImport" }, { "id": 713433234, "method": "messages.uploadImportedMedia", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "import_id", "type": "long" }, { "name": "file_name", "type": "string" }, { "name": "media", "type": "InputMedia" }], "type": "MessageMedia" }, { "id": -1271008444, "method": "messages.startHistoryImport", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "import_id", "type": "long" }], "type": "Bool" }, { "id": -1565154314, "method": "messages.getExportedChatInvites", "params": [{ "name": "flags", "type": "#" }, { "name": "revoked", "type": "flags.3?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "admin_id", "type": "InputUser" }, { "name": "offset_date", "type": "flags.2?int" }, { "name": "offset_link", "type": "flags.2?string" }, { "name": "limit", "type": "int" }], "type": "messages.ExportedChatInvites" }, { "id": 1937010524, "method": "messages.getExportedChatInvite", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "link", "type": "string" }], "type": "messages.ExportedChatInvite" }, { "id": 48562110, "method": "messages.editExportedChatInvite", "params": [{ "name": "flags", "type": "#" }, { "name": "revoked", "type": "flags.2?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "link", "type": "string" }, { "name": "expire_date", "type": "flags.0?int" }, { "name": "usage_limit", "type": "flags.1?int" }], "type": "messages.ExportedChatInvite" }, { "id": 1452833749, "method": "messages.deleteRevokedExportedChatInvites", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "admin_id", "type": "InputUser" }], "type": "Bool" }, { "id": -731601877, "method": "messages.deleteExportedChatInvite", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "link", "type": "string" }], "type": "Bool" }, { "id": 958457583, "method": "messages.getAdminsWithInvites", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "messages.ChatAdminsWithInvites" }, { "id": 654013065, "method": "messages.getChatInviteImporters", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "link", "type": "string" }, { "name": "offset_date", "type": "int" }, { "name": "offset_user", "type": "InputUser" }, { "name": "limit", "type": "int" }], "type": "messages.ChatInviteImporters" }, { "id": -1207017500, "method": "messages.setHistoryTTL", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "period", "type": "int" }], "type": "Updates" }, { "id": 1573261059, "method": "messages.checkHistoryImportPeer", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "messages.CheckedHistoryImportPeer" }, { "id": -432283329, "method": "messages.setChatTheme", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "emoticon", "type": "string" }], "type": "Updates" }, { "id": 745510839, "method": "messages.getMessageReadParticipants", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }], "type": "Vector<long>" }, { "id": -304838614, "method": "updates.getState", "params": [], "type": "updates.State" }, { "id": 630429265, "method": "updates.getDifference", "params": [{ "name": "flags", "type": "#" }, { "name": "pts", "type": "int" }, { "name": "pts_total_limit", "type": "flags.0?int" }, { "name": "date", "type": "int" }, { "name": "qts", "type": "int" }], "type": "updates.Difference" }, { "id": 51854712, "method": "updates.getChannelDifference", "params": [{ "name": "flags", "type": "#" }, { "name": "force", "type": "flags.0?true" }, { "name": "channel", "type": "InputChannel" }, { "name": "filter", "type": "ChannelMessagesFilter" }, { "name": "pts", "type": "int" }, { "name": "limit", "type": "int" }], "type": "updates.ChannelDifference" }, { "id": 1926525996, "method": "photos.updateProfilePhoto", "params": [{ "name": "id", "type": "InputPhoto" }], "type": "photos.Photo" }, { "id": -1980559511, "method": "photos.uploadProfilePhoto", "params": [{ "name": "flags", "type": "#" }, { "name": "file", "type": "flags.0?InputFile" }, { "name": "video", "type": "flags.1?InputFile" }, { "name": "video_start_ts", "type": "flags.2?double" }], "type": "photos.Photo" }, { "id": -2016444625, "method": "photos.deletePhotos", "params": [{ "name": "id", "type": "Vector<InputPhoto>" }], "type": "Vector<long>" }, { "id": -1848823128, "method": "photos.getUserPhotos", "params": [{ "name": "user_id", "type": "InputUser" }, { "name": "offset", "type": "int" }, { "name": "max_id", "type": "long" }, { "name": "limit", "type": "int" }], "type": "photos.Photos" }, { "id": -1291540959, "method": "upload.saveFilePart", "params": [{ "name": "file_id", "type": "long" }, { "name": "file_part", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "Bool" }, { "id": -1319462148, "method": "upload.getFile", "params": [{ "name": "flags", "type": "#" }, { "name": "precise", "type": "flags.0?true" }, { "name": "cdn_supported", "type": "flags.1?true" }, { "name": "location", "type": "InputFileLocation" }, { "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }], "type": "upload.File" }, { "id": -562337987, "method": "upload.saveBigFilePart", "params": [{ "name": "file_id", "type": "long" }, { "name": "file_part", "type": "int" }, { "name": "file_total_parts", "type": "int" }, { "name": "bytes", "type": "bytes" }], "type": "Bool" }, { "id": 619086221, "method": "upload.getWebFile", "params": [{ "name": "location", "type": "InputWebFileLocation" }, { "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }], "type": "upload.WebFile" }, { "id": 536919235, "method": "upload.getCdnFile", "params": [{ "name": "file_token", "type": "bytes" }, { "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }], "type": "upload.CdnFile" }, { "id": -1691921240, "method": "upload.reuploadCdnFile", "params": [{ "name": "file_token", "type": "bytes" }, { "name": "request_token", "type": "bytes" }], "type": "Vector<FileHash>" }, { "id": 1302676017, "method": "upload.getCdnFileHashes", "params": [{ "name": "file_token", "type": "bytes" }, { "name": "offset", "type": "int" }], "type": "Vector<FileHash>" }, { "id": -956147407, "method": "upload.getFileHashes", "params": [{ "name": "location", "type": "InputFileLocation" }, { "name": "offset", "type": "int" }], "type": "Vector<FileHash>" }, { "id": -990308245, "method": "help.getConfig", "params": [], "type": "Config" }, { "id": 531836966, "method": "help.getNearestDc", "params": [], "type": "NearestDc" }, { "id": 1378703997, "method": "help.getAppUpdate", "params": [{ "name": "source", "type": "string" }], "type": "help.AppUpdate" }, { "id": 1295590211, "method": "help.getInviteText", "params": [], "type": "help.InviteText" }, { "id": -1663104819, "method": "help.getSupport", "params": [], "type": "help.Support" }, { "id": -1877938321, "method": "help.getAppChangelog", "params": [{ "name": "prev_app_version", "type": "string" }], "type": "Updates" }, { "id": -333262899, "method": "help.setBotUpdatesStatus", "params": [{ "name": "pending_updates_count", "type": "int" }, { "name": "message", "type": "string" }], "type": "Bool" }, { "id": 1375900482, "method": "help.getCdnConfig", "params": [], "type": "CdnConfig" }, { "id": 1036054804, "method": "help.getRecentMeUrls", "params": [{ "name": "referer", "type": "string" }], "type": "help.RecentMeUrls" }, { "id": 749019089, "method": "help.getTermsOfServiceUpdate", "params": [], "type": "help.TermsOfServiceUpdate" }, { "id": -294455398, "method": "help.acceptTermsOfService", "params": [{ "name": "id", "type": "DataJSON" }], "type": "Bool" }, { "id": 1072547679, "method": "help.getDeepLinkInfo", "params": [{ "name": "path", "type": "string" }], "type": "help.DeepLinkInfo" }, { "id": -1735311088, "method": "help.getAppConfig", "params": [], "type": "JSONValue" }, { "id": 1862465352, "method": "help.saveAppLog", "params": [{ "name": "events", "type": "Vector<InputAppEvent>" }], "type": "Bool" }, { "id": -966677240, "method": "help.getPassportConfig", "params": [{ "name": "hash", "type": "int" }], "type": "help.PassportConfig" }, { "id": -748624084, "method": "help.getSupportName", "params": [], "type": "help.SupportName" }, { "id": 59377875, "method": "help.getUserInfo", "params": [{ "name": "user_id", "type": "InputUser" }], "type": "help.UserInfo" }, { "id": 1723407216, "method": "help.editUserInfo", "params": [{ "name": "user_id", "type": "InputUser" }, { "name": "message", "type": "string" }, { "name": "entities", "type": "Vector<MessageEntity>" }], "type": "help.UserInfo" }, { "id": -1063816159, "method": "help.getPromoData", "params": [], "type": "help.PromoData" }, { "id": 505748629, "method": "help.hidePromoData", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "Bool" }, { "id": -183649631, "method": "help.dismissSuggestion", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "suggestion", "type": "string" }], "type": "Bool" }, { "id": 1935116200, "method": "help.getCountriesList", "params": [{ "name": "lang_code", "type": "string" }, { "name": "hash", "type": "int" }], "type": "help.CountriesList" }, { "id": -871347913, "method": "channels.readHistory", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "max_id", "type": "int" }], "type": "Bool" }, { "id": -2067661490, "method": "channels.deleteMessages", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "id", "type": "Vector<int>" }], "type": "messages.AffectedMessages" }, { "id": -787622117, "method": "channels.deleteUserHistory", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "user_id", "type": "InputUser" }], "type": "messages.AffectedHistory" }, { "id": -32999408, "method": "channels.reportSpam", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "user_id", "type": "InputUser" }, { "name": "id", "type": "Vector<int>" }], "type": "Bool" }, { "id": -1383294429, "method": "channels.getMessages", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "id", "type": "Vector<InputMessage>" }], "type": "messages.Messages" }, { "id": 2010044880, "method": "channels.getParticipants", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "filter", "type": "ChannelParticipantsFilter" }, { "name": "offset", "type": "int" }, { "name": "limit", "type": "int" }, { "name": "hash", "type": "long" }], "type": "channels.ChannelParticipants" }, { "id": -1599378234, "method": "channels.getParticipant", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "participant", "type": "InputPeer" }], "type": "channels.ChannelParticipant" }, { "id": 176122811, "method": "channels.getChannels", "params": [{ "name": "id", "type": "Vector<InputChannel>" }], "type": "messages.Chats" }, { "id": 141781513, "method": "channels.getFullChannel", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "messages.ChatFull" }, { "id": 1029681423, "method": "channels.createChannel", "params": [{ "name": "flags", "type": "#" }, { "name": "broadcast", "type": "flags.0?true" }, { "name": "megagroup", "type": "flags.1?true" }, { "name": "for_import", "type": "flags.3?true" }, { "name": "title", "type": "string" }, { "name": "about", "type": "string" }, { "name": "geo_point", "type": "flags.2?InputGeoPoint" }, { "name": "address", "type": "flags.2?string" }], "type": "Updates" }, { "id": -751007486, "method": "channels.editAdmin", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "user_id", "type": "InputUser" }, { "name": "admin_rights", "type": "ChatAdminRights" }, { "name": "rank", "type": "string" }], "type": "Updates" }, { "id": 1450044624, "method": "channels.editTitle", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "title", "type": "string" }], "type": "Updates" }, { "id": -248621111, "method": "channels.editPhoto", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "photo", "type": "InputChatPhoto" }], "type": "Updates" }, { "id": 283557164, "method": "channels.checkUsername", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "username", "type": "string" }], "type": "Bool" }, { "id": 890549214, "method": "channels.updateUsername", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "username", "type": "string" }], "type": "Bool" }, { "id": 615851205, "method": "channels.joinChannel", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "Updates" }, { "id": -130635115, "method": "channels.leaveChannel", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "Updates" }, { "id": 429865580, "method": "channels.inviteToChannel", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "users", "type": "Vector<InputUser>" }], "type": "Updates" }, { "id": -1072619549, "method": "channels.deleteChannel", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "Updates" }, { "id": -432034325, "method": "channels.exportMessageLink", "params": [{ "name": "flags", "type": "#" }, { "name": "grouped", "type": "flags.0?true" }, { "name": "thread", "type": "flags.1?true" }, { "name": "channel", "type": "InputChannel" }, { "name": "id", "type": "int" }], "type": "ExportedMessageLink" }, { "id": 527021574, "method": "channels.toggleSignatures", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "enabled", "type": "Bool" }], "type": "Updates" }, { "id": -122669393, "method": "channels.getAdminedPublicChannels", "params": [{ "name": "flags", "type": "#" }, { "name": "by_location", "type": "flags.0?true" }, { "name": "check_limit", "type": "flags.1?true" }], "type": "messages.Chats" }, { "id": -1763259007, "method": "channels.editBanned", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "participant", "type": "InputPeer" }, { "name": "banned_rights", "type": "ChatBannedRights" }], "type": "Updates" }, { "id": 870184064, "method": "channels.getAdminLog", "params": [{ "name": "flags", "type": "#" }, { "name": "channel", "type": "InputChannel" }, { "name": "q", "type": "string" }, { "name": "events_filter", "type": "flags.0?ChannelAdminLogEventsFilter" }, { "name": "admins", "type": "flags.1?Vector<InputUser>" }, { "name": "max_id", "type": "long" }, { "name": "min_id", "type": "long" }, { "name": "limit", "type": "int" }], "type": "channels.AdminLogResults" }, { "id": -359881479, "method": "channels.setStickers", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "stickerset", "type": "InputStickerSet" }], "type": "Bool" }, { "id": -357180360, "method": "channels.readMessageContents", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "id", "type": "Vector<int>" }], "type": "Bool" }, { "id": -1355375294, "method": "channels.deleteHistory", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "max_id", "type": "int" }], "type": "Bool" }, { "id": -356796084, "method": "channels.togglePreHistoryHidden", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "enabled", "type": "Bool" }], "type": "Updates" }, { "id": -2092831552, "method": "channels.getLeftChannels", "params": [{ "name": "offset", "type": "int" }], "type": "messages.Chats" }, { "id": -170208392, "method": "channels.getGroupsForDiscussion", "params": [], "type": "messages.Chats" }, { "id": 1079520178, "method": "channels.setDiscussionGroup", "params": [{ "name": "broadcast", "type": "InputChannel" }, { "name": "group", "type": "InputChannel" }], "type": "Bool" }, { "id": -1892102881, "method": "channels.editCreator", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "user_id", "type": "InputUser" }, { "name": "password", "type": "InputCheckPasswordSRP" }], "type": "Updates" }, { "id": 1491484525, "method": "channels.editLocation", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "geo_point", "type": "InputGeoPoint" }, { "name": "address", "type": "string" }], "type": "Bool" }, { "id": -304832784, "method": "channels.toggleSlowMode", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "seconds", "type": "int" }], "type": "Updates" }, { "id": 300429806, "method": "channels.getInactiveChannels", "params": [], "type": "messages.InactiveChats" }, { "id": 187239529, "method": "channels.convertToGigagroup", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "Updates" }, { "id": -1095836780, "method": "channels.viewSponsoredMessage", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "random_id", "type": "bytes" }], "type": "Bool" }, { "id": -333377601, "method": "channels.getSponsoredMessages", "params": [{ "name": "channel", "type": "InputChannel" }], "type": "messages.SponsoredMessages" }, { "id": -1440257555, "method": "bots.sendCustomRequest", "params": [{ "name": "custom_method", "type": "string" }, { "name": "params", "type": "DataJSON" }], "type": "DataJSON" }, { "id": -434028723, "method": "bots.answerWebhookJSONQuery", "params": [{ "name": "query_id", "type": "long" }, { "name": "data", "type": "DataJSON" }], "type": "Bool" }, { "id": 85399130, "method": "bots.setBotCommands", "params": [{ "name": "scope", "type": "BotCommandScope" }, { "name": "lang_code", "type": "string" }, { "name": "commands", "type": "Vector<BotCommand>" }], "type": "Bool" }, { "id": 1032708345, "method": "bots.resetBotCommands", "params": [{ "name": "scope", "type": "BotCommandScope" }, { "name": "lang_code", "type": "string" }], "type": "Bool" }, { "id": -481554986, "method": "bots.getBotCommands", "params": [{ "name": "scope", "type": "BotCommandScope" }, { "name": "lang_code", "type": "string" }], "type": "Vector<BotCommand>" }, { "id": -1976353651, "method": "payments.getPaymentForm", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "theme_params", "type": "flags.0?DataJSON" }], "type": "payments.PaymentForm" }, { "id": 611897804, "method": "payments.getPaymentReceipt", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }], "type": "payments.PaymentReceipt" }, { "id": -619695760, "method": "payments.validateRequestedInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "save", "type": "flags.0?true" }, { "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "info", "type": "PaymentRequestedInfo" }], "type": "payments.ValidatedRequestedInfo" }, { "id": 818134173, "method": "payments.sendPaymentForm", "params": [{ "name": "flags", "type": "#" }, { "name": "form_id", "type": "long" }, { "name": "peer", "type": "InputPeer" }, { "name": "msg_id", "type": "int" }, { "name": "requested_info_id", "type": "flags.0?string" }, { "name": "shipping_option_id", "type": "flags.1?string" }, { "name": "credentials", "type": "InputPaymentCredentials" }, { "name": "tip_amount", "type": "flags.2?long" }], "type": "payments.PaymentResult" }, { "id": 578650699, "method": "payments.getSavedInfo", "params": [], "type": "payments.SavedInfo" }, { "id": -667062079, "method": "payments.clearSavedInfo", "params": [{ "name": "flags", "type": "#" }, { "name": "credentials", "type": "flags.0?true" }, { "name": "info", "type": "flags.1?true" }], "type": "Bool" }, { "id": 779736953, "method": "payments.getBankCardData", "params": [{ "name": "number", "type": "string" }], "type": "payments.BankCardData" }, { "id": -1876841625, "method": "stickers.createStickerSet", "params": [{ "name": "flags", "type": "#" }, { "name": "masks", "type": "flags.0?true" }, { "name": "animated", "type": "flags.1?true" }, { "name": "user_id", "type": "InputUser" }, { "name": "title", "type": "string" }, { "name": "short_name", "type": "string" }, { "name": "thumb", "type": "flags.2?InputDocument" }, { "name": "stickers", "type": "Vector<InputStickerSetItem>" }, { "name": "software", "type": "flags.3?string" }], "type": "messages.StickerSet" }, { "id": -143257775, "method": "stickers.removeStickerFromSet", "params": [{ "name": "sticker", "type": "InputDocument" }], "type": "messages.StickerSet" }, { "id": -4795190, "method": "stickers.changeStickerPosition", "params": [{ "name": "sticker", "type": "InputDocument" }, { "name": "position", "type": "int" }], "type": "messages.StickerSet" }, { "id": -2041315650, "method": "stickers.addStickerToSet", "params": [{ "name": "stickerset", "type": "InputStickerSet" }, { "name": "sticker", "type": "InputStickerSetItem" }], "type": "messages.StickerSet" }, { "id": -1707717072, "method": "stickers.setStickerSetThumb", "params": [{ "name": "stickerset", "type": "InputStickerSet" }, { "name": "thumb", "type": "InputDocument" }], "type": "messages.StickerSet" }, { "id": 676017721, "method": "stickers.checkShortName", "params": [{ "name": "short_name", "type": "string" }], "type": "Bool" }, { "id": 1303364867, "method": "stickers.suggestShortName", "params": [{ "name": "title", "type": "string" }], "type": "stickers.SuggestedShortName" }, { "id": 1430593449, "method": "phone.getCallConfig", "params": [], "type": "DataJSON" }, { "id": 1124046573, "method": "phone.requestCall", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.0?true" }, { "name": "user_id", "type": "InputUser" }, { "name": "random_id", "type": "int" }, { "name": "g_a_hash", "type": "bytes" }, { "name": "protocol", "type": "PhoneCallProtocol" }], "type": "phone.PhoneCall" }, { "id": 1003664544, "method": "phone.acceptCall", "params": [{ "name": "peer", "type": "InputPhoneCall" }, { "name": "g_b", "type": "bytes" }, { "name": "protocol", "type": "PhoneCallProtocol" }], "type": "phone.PhoneCall" }, { "id": 788404002, "method": "phone.confirmCall", "params": [{ "name": "peer", "type": "InputPhoneCall" }, { "name": "g_a", "type": "bytes" }, { "name": "key_fingerprint", "type": "long" }, { "name": "protocol", "type": "PhoneCallProtocol" }], "type": "phone.PhoneCall" }, { "id": 399855457, "method": "phone.receivedCall", "params": [{ "name": "peer", "type": "InputPhoneCall" }], "type": "Bool" }, { "id": -1295269440, "method": "phone.discardCall", "params": [{ "name": "flags", "type": "#" }, { "name": "video", "type": "flags.0?true" }, { "name": "peer", "type": "InputPhoneCall" }, { "name": "duration", "type": "int" }, { "name": "reason", "type": "PhoneCallDiscardReason" }, { "name": "connection_id", "type": "long" }], "type": "Updates" }, { "id": 1508562471, "method": "phone.setCallRating", "params": [{ "name": "flags", "type": "#" }, { "name": "user_initiative", "type": "flags.0?true" }, { "name": "peer", "type": "InputPhoneCall" }, { "name": "rating", "type": "int" }, { "name": "comment", "type": "string" }], "type": "Updates" }, { "id": 662363518, "method": "phone.saveCallDebug", "params": [{ "name": "peer", "type": "InputPhoneCall" }, { "name": "debug", "type": "DataJSON" }], "type": "Bool" }, { "id": -8744061, "method": "phone.sendSignalingData", "params": [{ "name": "peer", "type": "InputPhoneCall" }, { "name": "data", "type": "bytes" }], "type": "Bool" }, { "id": 1221445336, "method": "phone.createGroupCall", "params": [{ "name": "flags", "type": "#" }, { "name": "peer", "type": "InputPeer" }, { "name": "random_id", "type": "int" }, { "name": "title", "type": "flags.0?string" }, { "name": "schedule_date", "type": "flags.1?int" }], "type": "Updates" }, { "id": -1322057861, "method": "phone.joinGroupCall", "params": [{ "name": "flags", "type": "#" }, { "name": "muted", "type": "flags.0?true" }, { "name": "video_stopped", "type": "flags.2?true" }, { "name": "call", "type": "InputGroupCall" }, { "name": "join_as", "type": "InputPeer" }, { "name": "invite_hash", "type": "flags.1?string" }, { "name": "params", "type": "DataJSON" }], "type": "Updates" }, { "id": 1342404601, "method": "phone.leaveGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "source", "type": "int" }], "type": "Updates" }, { "id": 2067345760, "method": "phone.inviteToGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "users", "type": "Vector<InputUser>" }], "type": "Updates" }, { "id": 2054648117, "method": "phone.discardGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }], "type": "Updates" }, { "id": 1958458429, "method": "phone.toggleGroupCallSettings", "params": [{ "name": "flags", "type": "#" }, { "name": "reset_invite_hash", "type": "flags.1?true" }, { "name": "call", "type": "InputGroupCall" }, { "name": "join_muted", "type": "flags.0?Bool" }], "type": "Updates" }, { "id": 68699611, "method": "phone.getGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "limit", "type": "int" }], "type": "phone.GroupCall" }, { "id": -984033109, "method": "phone.getGroupParticipants", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "ids", "type": "Vector<InputPeer>" }, { "name": "sources", "type": "Vector<int>" }, { "name": "offset", "type": "string" }, { "name": "limit", "type": "int" }], "type": "phone.GroupParticipants" }, { "id": -1248003721, "method": "phone.checkGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "sources", "type": "Vector<int>" }], "type": "Vector<int>" }, { "id": -248985848, "method": "phone.toggleGroupCallRecord", "params": [{ "name": "flags", "type": "#" }, { "name": "start", "type": "flags.0?true" }, { "name": "video", "type": "flags.2?true" }, { "name": "call", "type": "InputGroupCall" }, { "name": "title", "type": "flags.1?string" }, { "name": "video_portrait", "type": "flags.2?Bool" }], "type": "Updates" }, { "id": -1524155713, "method": "phone.editGroupCallParticipant", "params": [{ "name": "flags", "type": "#" }, { "name": "call", "type": "InputGroupCall" }, { "name": "participant", "type": "InputPeer" }, { "name": "muted", "type": "flags.0?Bool" }, { "name": "volume", "type": "flags.1?int" }, { "name": "raise_hand", "type": "flags.2?Bool" }, { "name": "video_stopped", "type": "flags.3?Bool" }, { "name": "video_paused", "type": "flags.4?Bool" }, { "name": "presentation_paused", "type": "flags.5?Bool" }], "type": "Updates" }, { "id": 480685066, "method": "phone.editGroupCallTitle", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "title", "type": "string" }], "type": "Updates" }, { "id": -277077702, "method": "phone.getGroupCallJoinAs", "params": [{ "name": "peer", "type": "InputPeer" }], "type": "phone.JoinAsPeers" }, { "id": -425040769, "method": "phone.exportGroupCallInvite", "params": [{ "name": "flags", "type": "#" }, { "name": "can_self_unmute", "type": "flags.0?true" }, { "name": "call", "type": "InputGroupCall" }], "type": "phone.ExportedGroupCallInvite" }, { "id": 563885286, "method": "phone.toggleGroupCallStartSubscription", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "subscribed", "type": "Bool" }], "type": "Updates" }, { "id": 1451287362, "method": "phone.startScheduledGroupCall", "params": [{ "name": "call", "type": "InputGroupCall" }], "type": "Updates" }, { "id": 1465786252, "method": "phone.saveDefaultGroupCallJoinAs", "params": [{ "name": "peer", "type": "InputPeer" }, { "name": "join_as", "type": "InputPeer" }], "type": "Bool" }, { "id": -873829436, "method": "phone.joinGroupCallPresentation", "params": [{ "name": "call", "type": "InputGroupCall" }, { "name": "params", "type": "DataJSON" }], "type": "Updates" }, { "id": 475058500, "method": "phone.leaveGroupCallPresentation", "params": [{ "name": "call", "type": "InputGroupCall" }], "type": "Updates" }, { "id": -219008246, "method": "langpack.getLangPack", "params": [{ "name": "lang_pack", "type": "string" }, { "name": "lang_code", "type": "string" }], "type": "LangPackDifference" }, { "id": -269862909, "method": "langpack.getStrings", "params": [{ "name": "lang_pack", "type": "string" }, { "name": "lang_code", "type": "string" }, { "name": "keys", "type": "Vector<string>" }], "type": "Vector<LangPackString>" }, { "id": -845657435, "method": "langpack.getDifference", "params": [{ "name": "lang_pack", "type": "string" }, { "name": "lang_code", "type": "string" }, { "name": "from_version", "type": "int" }], "type": "LangPackDifference" }, { "id": 1120311183, "method": "langpack.getLanguages", "params": [{ "name": "lang_pack", "type": "string" }], "type": "Vector<LangPackLanguage>" }, { "id": 1784243458, "method": "langpack.getLanguage", "params": [{ "name": "lang_pack", "type": "string" }, { "name": "lang_code", "type": "string" }], "type": "LangPackLanguage" }, { "id": 1749536939, "method": "folders.editPeerFolders", "params": [{ "name": "folder_peers", "type": "Vector<InputFolderPeer>" }], "type": "Updates" }, { "id": 472471681, "method": "folders.deleteFolder", "params": [{ "name": "folder_id", "type": "int" }], "type": "Updates" }, { "id": -1421720550, "method": "stats.getBroadcastStats", "params": [{ "name": "flags", "type": "#" }, { "name": "dark", "type": "flags.0?true" }, { "name": "channel", "type": "InputChannel" }], "type": "stats.BroadcastStats" }, { "id": 1646092192, "method": "stats.loadAsyncGraph", "params": [{ "name": "flags", "type": "#" }, { "name": "token", "type": "string" }, { "name": "x", "type": "flags.0?long" }], "type": "StatsGraph" }, { "id": -589330937, "method": "stats.getMegagroupStats", "params": [{ "name": "flags", "type": "#" }, { "name": "dark", "type": "flags.0?true" }, { "name": "channel", "type": "InputChannel" }], "type": "stats.MegagroupStats" }, { "id": 1445996571, "method": "stats.getMessagePublicForwards", "params": [{ "name": "channel", "type": "InputChannel" }, { "name": "msg_id", "type": "int" }, { "name": "offset_rate", "type": "int" }, { "name": "offset_peer", "type": "InputPeer" }, { "name": "offset_id", "type": "int" }, { "name": "limit", "type": "int" }], "type": "messages.Messages" }, { "id": -1226791947, "method": "stats.getMessageStats", "params": [{ "name": "flags", "type": "#" }, { "name": "dark", "type": "flags.0?true" }, { "name": "channel", "type": "InputChannel" }, { "name": "msg_id", "type": "int" }], "type": "stats.MessageStats" }] }, "layer": 133 });


/***/ }),

/***/ "./src/lib/mtproto/timeManager.ts":
/*!****************************************!*\
  !*** ./src/lib/mtproto/timeManager.ts ***!
  \****************************************/
/*! exports provided: TimeManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeManager", function() { return TimeManager; });
/* harmony import */ var _sessionStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sessionStorage */ "./src/lib/sessionStorage.ts");
/* harmony import */ var _bin_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/* harmony import */ var _helpers_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/random */ "./src/helpers/random.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/context */ "./src/helpers/context.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */





;
class TimeManager {
    constructor() {
        this.lastMessageId = [0, 0];
        this.timeOffset = 0;
        _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].get('server_time_offset').then((to) => {
            if (to) {
                this.timeOffset = to;
            }
        });
    }
    generateId() {
        const timeTicks = Date.now(), timeSec = Math.floor(timeTicks / 1000) + this.timeOffset, timeMSec = timeTicks % 1000, random = Object(_helpers_random__WEBPACK_IMPORTED_MODULE_2__["nextRandomUint"])(16);
        let messageId = [timeSec, (timeMSec << 21) | (random << 3) | 4];
        if (this.lastMessageId[0] > messageId[0] ||
            this.lastMessageId[0] === messageId[0] && this.lastMessageId[1] >= messageId[1]) {
            messageId = [this.lastMessageId[0], this.lastMessageId[1] + 4];
        }
        this.lastMessageId = messageId;
        const ret = Object(_bin_utils__WEBPACK_IMPORTED_MODULE_1__["longFromInts"])(messageId[0], messageId[1]);
        // if(lol[ret]) {
        //   console.error('[TimeManager]: Generated SAME msg id', messageId, this.timeOffset, ret);
        // }
        // lol[ret] = true;
        // console.log('[TimeManager]: Generated msg id', messageId, this.timeOffset, ret);
        return ret;
    }
    applyServerTime(serverTime, localTime) {
        localTime = (localTime || Date.now()) / 1000 | 0;
        const newTimeOffset = serverTime - localTime;
        const changed = Math.abs(this.timeOffset - newTimeOffset) > 10;
        _sessionStorage__WEBPACK_IMPORTED_MODULE_0__["default"].set({
            server_time_offset: newTimeOffset
        });
        this.lastMessageId = [0, 0];
        this.timeOffset = newTimeOffset;
        //console.log('[TimeManager]: Apply server time', serverTime, localTime, newTimeOffset, changed);
        const task = {
            type: 'applyServerTimeOffset',
            payload: newTimeOffset
        };
        Object(_helpers_context__WEBPACK_IMPORTED_MODULE_4__["notifySomeone"])(task);
        return changed;
    }
}
const timeManager = new TimeManager();
_config_debug__WEBPACK_IMPORTED_MODULE_3__["MOUNT_CLASS_TO"].timeManager = timeManager;
/* harmony default export */ __webpack_exports__["default"] = (timeManager);


/***/ }),

/***/ "./src/lib/mtproto/tl_utils.ts":
/*!*************************************!*\
  !*** ./src/lib/mtproto/tl_utils.ts ***!
  \*************************************/
/*! exports provided: TLDeserialization, TLSerialization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TLDeserialization", function() { return TLDeserialization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TLSerialization", function() { return TLSerialization; });
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/bytes */ "./src/helpers/bytes.ts");
/* harmony import */ var _bin_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bin_utils */ "./src/lib/mtproto/bin_utils.ts");
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _vendor_leemon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/leemon */ "./src/vendor/leemon.ts");
/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./schema */ "./src/lib/mtproto/schema.ts");
/* harmony import */ var _crypto_crypto_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/crypto_utils */ "./src/lib/crypto/crypto_utils.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 *
 * Originally from:
 * https://github.com/zhukov/webogram
 * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>
 * https://github.com/zhukov/webogram/blob/master/LICENSE
 */





// @ts-ignore

const boolFalse = +_schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.constructors.find(c => c.predicate === 'boolFalse').id;
const boolTrue = +_schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.constructors.find(c => c.predicate === 'boolTrue').id;
const vector = +_schema__WEBPACK_IMPORTED_MODULE_4__["default"].API.constructors.find(c => c.predicate === 'vector').id;
const gzipPacked = +_schema__WEBPACK_IMPORTED_MODULE_4__["default"].MTProto.constructors.find(c => c.predicate === 'gzip_packed').id;
//console.log('boolFalse', boolFalse === 0xbc799737);
class TLSerialization {
    constructor(options = {}) {
        this.maxLength = 2048; // 2Kb
        this.offset = 0; // in bytes
        this.mtproto = false;
        this.debug = false; //Modes.debug;
        this.maxLength = options.startMaxLength || 2048; // 2Kb
        this.mtproto = options.mtproto || false;
        this.createBuffer();
    }
    createBuffer() {
        this.buffer = new ArrayBuffer(this.maxLength);
        this.intView = new Int32Array(this.buffer);
        this.byteView = new Uint8Array(this.buffer);
    }
    getArray() {
        const resultBuffer = new ArrayBuffer(this.offset);
        //let perf = performance.now();
        /* const resultUint8: any = new Uint8Array(resultBuffer);
        resultUint8.set(this.byteView.subarray(0, this.offset)); */
        //console.log('perf uint8', performance.now() - perf);
        //perf = performance.now();
        const resultInt32 = new Int32Array(resultBuffer);
        resultInt32.set(this.intView.subarray(0, this.offset / 4));
        //console.log('perf int32', performance.now() - perf);
        /* if(resultUint8.buffer.byteLength !== resultInt32.buffer.byteLength) {
          console.error(resultUint8, resultInt32);
        } */
        return resultInt32;
    }
    getBuffer() {
        return this.getArray().buffer;
    }
    getBytes(typed = true) {
        if (typed) {
            const resultBuffer = new ArrayBuffer(this.offset);
            const resultArray = new Uint8Array(resultBuffer);
            resultArray.set(this.byteView.subarray(0, this.offset));
            return resultArray;
        }
        const bytes = new Array(this.offset);
        for (let i = 0; i < this.offset; i++) {
            bytes[i] = this.byteView[i];
        }
        return bytes;
    }
    getOffset() {
        return this.offset;
    }
    checkLength(needBytes) {
        if (this.offset + needBytes < this.maxLength) {
            return;
        }
        //console.log('Increase buffer start', this.offset, needBytes, this.maxLength, this.byteView.slice(0, 32));
        this.maxLength = Math.ceil(Math.max(this.maxLength * 2, this.offset + needBytes + 16) / 4) * 4;
        const previousBuffer = this.buffer;
        //const previousByteView = this.byteView;
        const previousArray = new Int32Array(previousBuffer);
        this.createBuffer();
        new Int32Array(this.buffer).set(previousArray);
        /* console.log('Increase buffer end', this.offset, needBytes, this.maxLength, this.byteView.slice(0, 32),
          bytesCmp(previousByteView, this.byteView.slice(0, previousByteView.length))); */
    }
    writeInt(i, field) {
        this.debug && console.log('>>>', i.toString(16), i, field);
        const offset = this.offset / 4;
        this.checkLength(4);
        this.intView[offset] = i;
        this.offset += 4;
        return offset;
    }
    storeInt(i, field) {
        return this.writeInt(i, (field || '') + ':int');
    }
    storeBool(i, field) {
        if (i) {
            this.writeInt(boolTrue, (field || '') + ':bool');
        }
        else {
            this.writeInt(boolFalse, (field || '') + ':bool');
        }
    }
    storeLongP(iHigh, iLow, field) {
        this.writeInt(iLow, (field || '') + ':long[low]');
        this.writeInt(iHigh, (field || '') + ':long[high]');
    }
    storeLong(sLong, field) {
        if (Array.isArray(sLong)) {
            if (sLong.length === 2) {
                return this.storeLongP(sLong[0], sLong[1], field);
            }
            else {
                return this.storeIntBytes(sLong, 64, field);
            }
        }
        if (typeof sLong !== 'string') {
            sLong = sLong ? sLong.toString() : '0';
        }
        const R = 0x100000000;
        //const divRem = bigStringInt(sLong).divideAndRemainder(bigint(R));
        const a = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["str2bigInt"])(sLong, 10, 64);
        const q = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["dup"])(a);
        const r = Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["dup"])(a);
        Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["divide_"])(a, Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["str2bigInt"])((R).toString(16), 16, 64), q, r);
        //divInt_(a, R);
        const high = +Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["bigInt2str"])(q, 10);
        let low = +Object(_vendor_leemon__WEBPACK_IMPORTED_MODULE_3__["bigInt2str"])(r, 10);
        if (high < low) {
            low -= R;
        }
        //console.log('storeLong', sLong, divRem[0].intValue(), divRem[1].intValue(), high, low);
        //this.writeInt(divRem[1].intValue(), (field || '') + ':long[low]');
        //this.writeInt(divRem[0].intValue(), (field || '') + ':long[high]');
        this.writeInt(low, (field || '') + ':long[low]');
        this.writeInt(high, (field || '') + ':long[high]');
    }
    storeDouble(f, field) {
        const buffer = new ArrayBuffer(8);
        const intView = new Int32Array(buffer);
        const doubleView = new Float64Array(buffer);
        doubleView[0] = f;
        this.writeInt(intView[0], (field || '') + ':double[low]');
        this.writeInt(intView[1], (field || '') + ':double[high]');
    }
    storeString(s, field) {
        this.debug && console.log('>>>', s, (field || '') + ':string');
        if (s === undefined) {
            s = '';
        }
        const sUTF8 = unescape(encodeURIComponent(s));
        this.checkLength(sUTF8.length + 8);
        const len = sUTF8.length;
        if (len <= 253) {
            this.byteView[this.offset++] = len;
        }
        else {
            this.byteView[this.offset++] = 254;
            this.byteView[this.offset++] = len & 0xFF;
            this.byteView[this.offset++] = (len & 0xFF00) >> 8;
            this.byteView[this.offset++] = (len & 0xFF0000) >> 16;
        }
        for (let i = 0; i < len; i++) {
            this.byteView[this.offset++] = sUTF8.charCodeAt(i);
        }
        // Padding
        while (this.offset % 4) {
            this.byteView[this.offset++] = 0;
        }
    }
    storeBytes(bytes, field) {
        if (bytes instanceof ArrayBuffer) {
            bytes = new Uint8Array(bytes);
        }
        else if (bytes === undefined) {
            bytes = [];
        }
        this.debug && console.log('>>>', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || '') + ':bytes');
        // if uint8array was json.stringified, then will be: {'0': 123, '1': 123}
        const len = bytes.length;
        this.checkLength(len + 8);
        if (len <= 253) {
            this.byteView[this.offset++] = len;
        }
        else {
            this.byteView[this.offset++] = 254;
            this.byteView[this.offset++] = len & 0xFF;
            this.byteView[this.offset++] = (len & 0xFF00) >> 8;
            this.byteView[this.offset++] = (len & 0xFF0000) >> 16;
        }
        this.byteView.set(bytes, this.offset);
        this.offset += len;
        // Padding
        while (this.offset % 4) {
            this.byteView[this.offset++] = 0;
        }
    }
    storeIntBytes(bytes, bits, field) {
        if (bytes instanceof ArrayBuffer) {
            bytes = new Uint8Array(bytes);
        }
        const len = bytes.length;
        if ((bits % 32) || (len * 8) !== bits) {
            const error = new Error('Invalid bits: ' + bits + ', ' + len);
            console.error(error, bytes, field);
            throw error;
        }
        this.debug && console.log('>>>', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || '') + ':int' + bits);
        this.checkLength(len);
        this.byteView.set(bytes, this.offset);
        this.offset += len;
    }
    storeRawBytes(bytes, field) {
        if (bytes instanceof ArrayBuffer) {
            bytes = new Uint8Array(bytes);
        }
        const len = bytes.length;
        this.debug && console.log('>>>', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || ''));
        this.checkLength(len);
        this.byteView.set(bytes, this.offset);
        this.offset += len;
    }
    storeMethod(methodName, params) {
        const schema = this.mtproto ? _schema__WEBPACK_IMPORTED_MODULE_4__["default"].MTProto : _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API;
        const methodData = schema.methods.find(m => m.method === methodName);
        if (!methodData) {
            throw new Error('No method ' + methodName + ' found');
        }
        this.storeInt(methodData.id, methodName + '[id]');
        const pFlags = params.pFlags || params; // * support pFlags, though am not expecting it to be there
        const flagsOffsets = {};
        //console.log('storeMethod', len, methodData);
        for (const param of methodData.params) {
            let type = param.type;
            if (type.indexOf('?') !== -1) {
                const condType = type.split('?');
                const fieldBit = condType[0].split('.');
                if (!(params[fieldBit[0]] & (1 << +fieldBit[1]))) {
                    if (condType[1] === 'true' ? pFlags[param.name] : params[param.name] !== undefined) {
                        //console.log('storeMethod autocompleting', methodName, param.name, params[param.name], type);
                        params[fieldBit[0]] |= 1 << +fieldBit[1];
                    }
                    else {
                        continue;
                    }
                }
                //console.log('storeMethod', methodName, fieldBit, params[fieldBit[0]], params, param, condType, !!(params[fieldBit[0]] & (1 << +fieldBit[1])));
                type = condType[1];
            }
            //console.log('storeMethod', methodName, param.name, params[param.name], type);
            const result = this.storeObject(params[param.name], type, methodName + '[' + param.name + ']');
            if (type === '#') {
                params[param.name] = params[param.name] || 0;
                flagsOffsets[param.name] = result;
            }
        }
        for (let paramName in flagsOffsets) {
            this.intView[flagsOffsets[paramName]] = params[paramName];
        }
        return methodData.type;
    }
    storeObject(obj, type, field) {
        //console.log('storeObject', obj, type, field, this.offset, this.getBytes(true).hex);
        switch (type) {
            case '#':
                obj = obj || 0;
            case 'int':
                return this.storeInt(obj, field);
            case 'long':
                return this.storeLong(obj, field);
            case 'int128':
                return this.storeIntBytes(obj, 128, field);
            case 'int256':
                return this.storeIntBytes(obj, 256, field);
            case 'int512':
                return this.storeIntBytes(obj, 512, field);
            case 'string':
                return this.storeString(obj, field);
            case 'bytes':
                return this.storeBytes(obj, field);
            case 'double':
                return this.storeDouble(obj, field);
            case 'Bool':
                return this.storeBool(obj, field);
            case 'true':
                return;
        }
        if (Array.isArray(obj)) {
            if (type.substr(0, 6) === 'Vector') {
                this.writeInt(vector, field + '[id]');
            }
            else if (type.substr(0, 6) !== 'vector') {
                throw new Error('Invalid vector type ' + type);
            }
            const itemType = type.substr(7, type.length - 8); // for "Vector<itemType>"
            this.writeInt(obj.length, field + '[count]');
            for (let i = 0; i < obj.length; i++) {
                this.storeObject(obj[i], itemType, field + '[' + i + ']');
            }
            return true;
        }
        else if (type.substr(0, 6).toLowerCase() === 'vector') {
            throw new Error('Invalid vector object');
        }
        if (!Object(_bin_utils__WEBPACK_IMPORTED_MODULE_1__["isObject"])(obj)) {
            throw new Error('Invalid object for type ' + type);
        }
        const schema = this.mtproto ? _schema__WEBPACK_IMPORTED_MODULE_4__["default"].MTProto : _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API;
        const predicate = obj['_'];
        let isBare = false;
        const constructorData = schema.constructors.find(c => c.predicate === predicate);
        if (isBare = (type.charAt(0) === '%')) {
            type = type.substr(1);
        }
        if (!constructorData) {
            throw new Error('No predicate ' + predicate + ' found');
        }
        if (predicate === type) {
            isBare = true;
        }
        if (!isBare) {
            this.writeInt(constructorData.id, field + '[' + predicate + '][id]');
        }
        const pFlags = obj.pFlags;
        const flagsOffsets = {};
        //console.log('storeObject', len, constructorData);
        for (const param of constructorData.params) {
            let type = param.type;
            //console.log('storeObject', param, type);
            if (type.indexOf('?') !== -1) {
                const condType = type.split('?');
                const fieldBit = condType[0].split('.');
                //console.log('storeObject fieldBit', fieldBit, obj[fieldBit[0]]);
                if (!(obj[fieldBit[0]] & (1 << +fieldBit[1]))) {
                    if (condType[1] === 'true' ? pFlags && pFlags[param.name] : obj[param.name] !== undefined) {
                        //console.log('storeObject autocompleting', param.name, obj[param.name], type);
                        obj[fieldBit[0]] |= 1 << +fieldBit[1];
                    }
                    else {
                        continue;
                    }
                }
                type = condType[1];
            }
            //console.log('storeObject', param, type);
            const result = this.storeObject(obj[param.name], type, field + '[' + predicate + '][' + param.name + ']');
            if (type === '#') {
                obj[param.name] = obj[param.name] || 0;
                flagsOffsets[param.name] = result;
            }
        }
        for (let paramName in flagsOffsets) {
            this.intView[flagsOffsets[paramName]] = obj[paramName];
        }
        return constructorData.type;
    }
}
class TLDeserialization {
    constructor(buffer, options = {}) {
        this.offset = 0; // in bytes
        // this.debug = 
        this.mtproto = false;
        //buffer = addPadding(buffer, 4, true); // fix 21.01.2020 for wss
        if (buffer instanceof ArrayBuffer) {
            this.buffer = buffer;
            this.intView = new Int32Array(buffer);
            this.byteView = new Uint8Array(this.buffer);
        }
        else {
            this.buffer = buffer.buffer;
            this.intView = new Int32Array(buffer.buffer);
            this.byteView = buffer;
        }
        //console.log(this.intView);
        this.override = options.override || {};
        this.mtproto = !!options.mtproto;
        this.debug = options.debug !== undefined ? options.debug : /* Modes.debug */ false;
    }
    readInt(field) {
        //if(this.offset >= this.intView.length * 4) {
        if ((this.byteView.length - this.offset) < 4) {
            console.error(this.byteView, this.offset);
            throw new Error('Nothing to fetch: ' + field);
        }
        const i = this.intView[this.offset / 4];
        // const i = new Uint32Array(this.byteView.buffer.slice(this.offset, this.offset + 4))[0];
        this.debug /*  || field.includes('[dialog][read_outbox_max_id]') */
            && console.log('<<<', i.toString(16), i, field, this.byteView.slice(this.offset - 16, this.offset + 16), this.byteView.slice(this.offset - 16, this.offset + 16).hex);
        this.offset += 4;
        return i;
    }
    fetchInt(field) {
        return this.readInt((field || '') + ':int');
    }
    fetchDouble(field) {
        const buffer = new ArrayBuffer(8);
        const intView = new Int32Array(buffer);
        const doubleView = new Float64Array(buffer);
        intView[0] = this.readInt((field || '') + ':double[low]'),
            intView[1] = this.readInt((field || '') + ':double[high]');
        return doubleView[0];
    }
    fetchLong(field) {
        const iLow = this.readInt((field || '') + ':long[low]');
        const iHigh = this.readInt((field || '') + ':long[high]');
        //const longDec = bigint(iHigh).shiftLeft(32).add(bigint(iLow)).toString();
        const longDec = Object(_bin_utils__WEBPACK_IMPORTED_MODULE_1__["longFromInts"])(iHigh, iLow);
        if (!this.mtproto) {
            const num = +longDec;
            if (Number.isSafeInteger(num)) {
                // @ts-ignore
                return num;
            }
        }
        // @ts-ignore
        return longDec;
    }
    fetchBool(field) {
        const i = this.readInt((field || '') + ':bool');
        if (i === boolTrue) {
            return true;
        }
        else if (i === boolFalse) {
            return false;
        }
        this.offset -= 4;
        return this.fetchObject('Object', field);
    }
    fetchString(field) {
        let len = this.byteView[this.offset++];
        if (len === 254) {
            len = this.byteView[this.offset++] |
                (this.byteView[this.offset++] << 8) |
                (this.byteView[this.offset++] << 16);
        }
        let sUTF8 = '';
        for (let i = 0; i < len; i++) {
            sUTF8 += String.fromCharCode(this.byteView[this.offset++]);
        }
        // Padding
        while (this.offset % 4) {
            this.offset++;
        }
        let s;
        try {
            s = decodeURIComponent(escape(sUTF8));
        }
        catch (e) {
            s = sUTF8;
        }
        this.debug && console.log('<<<', s, (field || '') + ':string');
        return s;
    }
    fetchBytes(field) {
        let len = this.byteView[this.offset++];
        if (len === 254) {
            len = this.byteView[this.offset++] |
                (this.byteView[this.offset++] << 8) |
                (this.byteView[this.offset++] << 16);
        }
        const bytes = this.byteView.subarray(this.offset, this.offset + len);
        this.offset += len;
        // Padding
        while (this.offset % 4) {
            this.offset++;
        }
        this.debug && console.log('<<<', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || '') + ':bytes');
        return bytes;
    }
    fetchIntBytes(bits, typed = true, field) {
        if (bits % 32) {
            throw new Error('Invalid bits: ' + bits);
        }
        const len = bits / 8;
        if (typed) {
            const result = this.byteView.subarray(this.offset, this.offset + len);
            this.offset += len;
            return result;
        }
        const bytes = new Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = this.byteView[this.offset++];
        }
        this.debug && console.log('<<<', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || '') + ':int' + bits);
        return bytes;
    }
    fetchRawBytes(len, typed = true, field) {
        if (len === false) {
            len = this.readInt((field || '') + '_length');
            if (len > this.byteView.byteLength) {
                throw new Error('Invalid raw bytes length: ' + len + ', buffer len: ' + this.byteView.byteLength);
            }
        }
        if (typed) {
            const bytes = new Uint8Array(len);
            bytes.set(this.byteView.subarray(this.offset, this.offset + len));
            this.offset += len;
            return bytes;
        }
        const bytes = new Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = this.byteView[this.offset++];
        }
        this.debug && console.log('<<<', Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(bytes), (field || ''));
        return bytes;
    }
    fetchVector(type, field) {
        const len = this.readInt(field + '[count]');
        const result = new Array(len);
        if (len > 0) {
            const itemType = type.substr(7, type.length - 8); // for "Vector<itemType>"
            for (let i = 0; i < len; ++i) {
                result[i] = this.fetchObject(itemType, field + '[' + i + ']');
            }
        }
        return result;
    }
    fetchObject(type, field) {
        switch (type) {
            case '#':
            case 'int':
                return this.fetchInt(field);
            case 'long':
                return this.fetchLong(field);
            case 'int128':
                return this.fetchIntBytes(128, true, field);
            case 'int256':
                return this.fetchIntBytes(256, true, field);
            case 'int512':
                return this.fetchIntBytes(512, true, field);
            case 'string':
                return this.fetchString(field);
            case 'bytes':
                return this.fetchBytes(field);
            case 'double':
                return this.fetchDouble(field);
            case 'Bool':
                return this.fetchBool(field);
            case 'true':
                return true;
        }
        field = field || type || 'Object';
        if (type.charAt(0) === 'v' && type.substr(1, 5) === 'ector') {
            return this.fetchVector(type, field);
        }
        const schema = this.mtproto ? _schema__WEBPACK_IMPORTED_MODULE_4__["default"].MTProto : _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API;
        let constructorData = null;
        let fallback = false;
        if (type.charAt(0) === '%') {
            const checkType = type.substr(1);
            constructorData = schema.constructors.find(c => c.type === checkType);
            if (!constructorData) {
                throw new Error('Constructor not found for type: ' + type);
            }
        } /*  else if(type.charAt(0) >= 97 && type.charAt(0) <= 122) {
          constructorData = schema.constructors.find(c => c.predicate === type);
          if(!constructorData) {
            throw new Error('Constructor not found for predicate: ' + type);
          }
        } */
        else {
            const constructorCmp = this.readInt(field + '[id]');
            if (constructorCmp === gzipPacked) { // Gzip packed
                const compressed = this.fetchBytes(field + '[packed_string]');
                const uncompressed = Object(_crypto_crypto_utils__WEBPACK_IMPORTED_MODULE_5__["gzipUncompress"])(compressed);
                const newDeserializer = new TLDeserialization(uncompressed); // rpc_result is packed here
                return newDeserializer.fetchObject(type, field);
            }
            if (constructorCmp === vector) {
                return this.fetchVector(type, field);
            }
            let index = schema.constructorsIndex;
            if (!index) {
                schema.constructorsIndex = index = {};
                for (let i = 0, len = schema.constructors.length; i < len; i++) {
                    index[schema.constructors[i].id] = i;
                }
            }
            const i = index[constructorCmp];
            if (i !== undefined) {
                constructorData = schema.constructors[i];
            }
            if (!constructorData && this.mtproto) {
                const schemaFallback = _schema__WEBPACK_IMPORTED_MODULE_4__["default"].API;
                for (let i = 0, len = schemaFallback.constructors.length; i < len; i++) {
                    if (+schemaFallback.constructors[i].id === constructorCmp) {
                        constructorData = schemaFallback.constructors[i];
                        delete this.mtproto;
                        fallback = true;
                        break;
                    }
                }
            }
            if (!constructorData) {
                console.error('Constructor not found:', constructorCmp);
                let int1, int2;
                try {
                    int1 = this.fetchInt(field);
                    int2 = this.fetchInt(field);
                }
                catch (err) {
                }
                throw new Error('Constructor not found: ' + constructorCmp + ' ' + int1 + ' ' + int2 + ' ' + field);
            }
        }
        const predicate = constructorData.predicate;
        const result = { '_': predicate };
        const overrideKey = (this.mtproto ? 'mt_' : '') + predicate;
        if (this.override[overrideKey]) {
            this.override[overrideKey](result, field + '[' + predicate + ']');
        }
        else {
            for (let i = 0, len = constructorData.params.length; i < len; i++) {
                const param = constructorData.params[i];
                let type = param.type;
                if (type === '#' && result.pFlags === undefined) {
                    result.pFlags = {};
                }
                const isCond = (type.indexOf('?') !== -1);
                if (isCond) {
                    const condType = type.split('?');
                    const fieldBit = condType[0].split('.');
                    if (!(result[fieldBit[0]] & (1 << +fieldBit[1]))) {
                        //console.log('fetchObject bad', constructorData, result[fieldBit[0]], fieldBit);
                        continue;
                    }
                    //console.log('fetchObject good', constructorData, result[fieldBit[0]], fieldBit);
                    type = condType[1];
                }
                const value = this.fetchObject(type, field + '[' + predicate + '][' + param.name + ']');
                if (isCond && type === 'true') {
                    result.pFlags[param.name] = value;
                }
                else {
                    /* if(param.name === 'read_outbox_max_id') {
                      console.log(result, param.name, value, field + '[' + predicate + '][' + param.name + ']');
                    } */
                    result[param.name] = value;
                }
            }
        }
        if (fallback) {
            this.mtproto = true;
        }
        return result;
    }
    getOffset() {
        return this.offset;
    }
    setOffset(offset) {
        this.offset = offset;
    }
}
_config_debug__WEBPACK_IMPORTED_MODULE_2__["MOUNT_CLASS_TO"].TLDeserialization = TLDeserialization;
_config_debug__WEBPACK_IMPORTED_MODULE_2__["MOUNT_CLASS_TO"].TLSerialization = TLSerialization;



/***/ }),

/***/ "./src/lib/mtproto/transports/intermediate.ts":
/*!****************************************************!*\
  !*** ./src/lib/mtproto/transports/intermediate.ts ***!
  \****************************************************/
/*! exports provided: IntermediatePacketCodec, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntermediatePacketCodec", function() { return IntermediatePacketCodec; });
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
class IntermediatePacketCodec {
    constructor() {
        this.tag = 0xee;
        this.obfuscateTag = new Uint8Array([this.tag, this.tag, this.tag, this.tag]);
    }
    //private lol = 0;
    encodePacket(data) {
        if ((data.length % 4) !== 0) {
            console.error('Encode error!', data.length, data);
        }
        const len = data.length;
        const header = new Uint8Array(new Int32Array([/* ++this.lol >= 25 ? 0x80000001 :  */ len]).buffer);
        //console.log('got nobody cause im braindead', header, len, /* data,  */data.buffer.byteLength === data.length);
        return header.concat(data);
    }
    readPacket(data) {
        const length = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);
        return data.slice(4, 4 + length);
    }
}
/* harmony default export */ __webpack_exports__["default"] = (new IntermediatePacketCodec());


/***/ }),

/***/ "./src/lib/mtproto/transports/obfuscation.ts":
/*!***************************************************!*\
  !*** ./src/lib/mtproto/transports/obfuscation.ts ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Obfuscation; });
/* harmony import */ var _cryptography_aes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cryptography/aes */ "./node_modules/@cryptography/aes/dist/es/aes.js");
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers/bytes */ "./src/helpers/bytes.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */
//import aesjs from 'aes-js';


class Counter {
    constructor(initialValue) {
        this._counter = initialValue;
    }
    increment() {
        for (let i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            }
            else {
                this._counter[i]++;
                break;
            }
        }
    }
}
class CTR {
    constructor(key, counter) {
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._counter = new Counter(counter);
        this._aes = new _cryptography_aes__WEBPACK_IMPORTED_MODULE_0__["default"](key);
    }
    update(payload) {
        const encrypted = payload.slice();
        for (let i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = new Uint8Array(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_1__["bytesFromWordss"])(this._aes.encrypt(this._counter._counter)));
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
    }
}
/*
@cryptography/aes не работает с массивами которые не кратны 4, поэтому использую intermediate а не abridged
*/
class Obfuscation {
    init(codec) {
        const initPayload = new Uint8Array(64);
        initPayload.randomize();
        while (true) {
            let val = (initPayload[3] << 24) | (initPayload[2] << 16) | (initPayload[1] << 8) | (initPayload[0]);
            let val2 = (initPayload[7] << 24) | (initPayload[6] << 16) | (initPayload[5] << 8) | (initPayload[4]);
            if (initPayload[0] !== 0xef &&
                val !== 0x44414548 &&
                val !== 0x54534f50 &&
                val !== 0x20544547 &&
                val !== 0x4954504f &&
                val !== 0xeeeeeeee &&
                val !== 0xdddddddd &&
                val2 !== 0x00000000) {
                //initPayload[56] = initPayload[57] = initPayload[58] = initPayload[59] = transport;
                break;
            }
            initPayload.randomize();
        }
        ////////////////////////initPayload.subarray(60, 62).hex = dcId;
        /* initPayload.set(new Uint8Array([161, 208, 67, 71, 118, 109, 20, 111, 113, 255, 134, 10, 159, 241, 7, 44, 217, 82, 187, 76, 108, 131, 200, 186, 33, 57, 177, 251, 52, 34, 18, 54, 65, 105, 37, 89, 38, 20, 47, 168, 126, 181, 24, 138, 212, 68, 60, 150, 225, 37, 181, 4, 201, 50, 72, 151, 168, 143, 204, 169, 81, 187, 241, 23]));
        console.log('initPayload', initPayload); */
        const reversedPayload = initPayload.slice().reverse();
        const encKey = initPayload.slice(8, 40);
        const encIv = initPayload.slice(40, 56);
        const decKey = reversedPayload.slice(8, 40);
        const decIv = reversedPayload.slice(40, 56);
        /* this.enc = new aesjs.ModeOfOperation.ctr(encKey, new aesjs.Counter(encIv as any));
        this.dec = new aesjs.ModeOfOperation.ctr(decKey, new aesjs.Counter(decIv as any)); */
        // console.log('encKey', encKey.hex, encIv.hex);
        // console.log('decKey', decKey.hex, decIv.hex);
        this.encNew = new CTR(encKey, encIv);
        this.decNew = new CTR(decKey, decIv);
        initPayload.set(codec.obfuscateTag, 56);
        const encrypted = this.encode(initPayload);
        //console.log('encrypted', encrypted);
        initPayload.set(encrypted.slice(56, 64), 56);
        return initPayload;
    }
    /* public encode(payload: Uint8Array) {
      let startTime = performance.now();
      let res = this.enc.encrypt(payload);
      let time = performance.now() - startTime;
  
      try {
        startTime = performance.now();
        let arr = this.encNew.encrypt(payload);
        //let resNew = bytesFromWords({words: arr, sigBytes: arr.length});
        let resNew = new Uint8Array(bytesFromWordss(arr));
        let time2 = performance.now() - startTime;
        console.log('Obfuscation: encode comparison:', res, arr, resNew, res.hex === resNew.hex, time2 < time);
      } catch(err) {
        console.error('Obfuscation: error:', err);
      }
      
      return res;
    }
  
    public decode(payload: Uint8Array) {
      let res = this.dec.encrypt(payload);
  
      try {
        let arr = this.decNew.decrypt(payload);
        //let resNew = bytesFromWords({words: arr, sigBytes: arr.length});
        let resNew = new Uint8Array(bytesFromWordss(arr));
        console.log('Obfuscation: decode comparison:', res, arr, resNew, res.hex === resNew.hex);
      } catch(err) {
        console.error('Obfuscation: error:', err);
      }
      
      return res;
    } */
    encode(payload) {
        return this.encNew.update(payload);
    }
    decode(payload) {
        return this.decNew.update(payload);
    }
}


/***/ }),

/***/ "./src/lib/mtproto/transports/socketProxied.ts":
/*!*****************************************************!*\
  !*** ./src/lib/mtproto/transports/socketProxied.ts ***!
  \*****************************************************/
/*! exports provided: default, socketsProxied */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SocketProxied; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "socketsProxied", function() { return socketsProxied; });
/* harmony import */ var _helpers_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/context */ "./src/helpers/context.ts");
/* harmony import */ var _helpers_eventListenerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers/eventListenerBase */ "./src/helpers/eventListenerBase.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */


let socketId = 0;
;
;
;
;
class SocketProxied extends _helpers_eventListenerBase__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(dcId, url, logSuffix) {
        super();
        this.dcId = dcId;
        this.url = url;
        this.id = ++socketId;
        socketsProxied.set(this.id, this);
        const task = {
            type: 'socketProxy',
            payload: {
                type: 'setup',
                payload: {
                    dcId,
                    url,
                    logSuffix
                },
                id: this.id
            }
        };
        Object(_helpers_context__WEBPACK_IMPORTED_MODULE_0__["notifyAll"])(task);
    }
    send(payload) {
        const task = {
            type: 'socketProxy',
            payload: {
                type: 'send',
                payload,
                id: this.id
            }
        };
        Object(_helpers_context__WEBPACK_IMPORTED_MODULE_0__["notifyAll"])(task);
    }
    close() {
        const task = {
            type: 'socketProxy',
            payload: {
                type: 'close',
                id: this.id
            }
        };
        Object(_helpers_context__WEBPACK_IMPORTED_MODULE_0__["notifyAll"])(task);
    }
}
const socketsProxied = new Map();


/***/ }),

/***/ "./src/lib/mtproto/transports/tcpObfuscated.ts":
/*!*****************************************************!*\
  !*** ./src/lib/mtproto/transports/tcpObfuscated.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TcpObfuscated; });
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../logger */ "./src/lib/logger.ts");
/* harmony import */ var _obfuscation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./obfuscation */ "./src/lib/mtproto/transports/obfuscation.ts");
/* harmony import */ var _intermediate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./intermediate */ "./src/lib/mtproto/transports/intermediate.ts");
/* harmony import */ var _connectionStatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../connectionStatus */ "./src/lib/mtproto/connectionStatus.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */





class TcpObfuscated {
    //private debugPayloads: MTPNetworker['debugRequests'] = [];
    constructor(Connection, dcId, url, logSuffix, retryTimeout) {
        this.Connection = Connection;
        this.dcId = dcId;
        this.url = url;
        this.logSuffix = logSuffix;
        this.retryTimeout = retryTimeout;
        this.codec = _intermediate__WEBPACK_IMPORTED_MODULE_3__["default"];
        this.obfuscation = new _obfuscation__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.pending = [];
        this.debug = _config_modes__WEBPACK_IMPORTED_MODULE_0__["default"].debug && false /* true */;
        this.connected = false;
        this.autoReconnect = true;
        this.onOpen = () => {
            this.connected = true;
            const initPayload = this.obfuscation.init(this.codec);
            this.connection.send(initPayload);
            if (this.networker) {
                this.pending.length = 0; // ! clear queue and reformat messages to container, because if sending simultaneously 10+ messages, connection will die
                this.networker.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_4__["ConnectionStatus"].Connected);
                this.networker.cleanupSent();
                this.networker.resend();
            }
            else {
                for (const pending of this.pending) {
                    if (pending.encoded && pending.body) {
                        pending.encoded = this.encodeBody(pending.body);
                    }
                }
            }
            setTimeout(() => {
                this.releasePending();
            }, 0);
        };
        this.onMessage = (buffer) => {
            let data = this.obfuscation.decode(new Uint8Array(buffer));
            data = this.codec.readPacket(data);
            if (this.networker) { // authenticated!
                //this.pending = this.pending.filter(p => p.body); // clear pending
                this.debug && this.log.debug('redirecting to networker', data.length);
                this.networker.parseResponse(data).then(response => {
                    this.debug && this.log.debug('redirecting to networker response:', response);
                    try {
                        this.networker.processMessage(response.response, response.messageId, response.sessionId);
                    }
                    catch (err) {
                        this.log.error('handleMessage networker processMessage error', err);
                    }
                    //this.releasePending();
                }).catch(err => {
                    this.log.error('handleMessage networker parseResponse error', err);
                });
                //this.dd();
                return;
            }
            //console.log('got hex:', data.hex);
            const pending = this.pending.shift();
            if (!pending) {
                this.debug && this.log.debug('no pending for res:', data.hex);
                return;
            }
            pending.resolve(data);
        };
        this.onClose = () => {
            this.clear();
            let needTimeout, retryAt;
            if (this.autoReconnect) {
                const time = Date.now();
                const diff = time - this.lastCloseTime;
                needTimeout = !isNaN(diff) && diff < this.retryTimeout ? this.retryTimeout - diff : 0;
                retryAt = time + needTimeout;
            }
            if (this.networker) {
                this.networker.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_4__["ConnectionStatus"].Closed, retryAt);
                this.pending.length = 0;
            }
            if (this.autoReconnect) {
                this.log('will try to reconnect after timeout:', needTimeout / 1000);
                this.reconnectTimeout = self.setTimeout(this.reconnect, needTimeout);
            }
            else {
                this.log('reconnect isn\'t needed');
            }
        };
        /**
         * invoke only when closed
         */
        this.reconnect = () => {
            if (this.reconnectTimeout !== undefined) {
                clearTimeout(this.reconnectTimeout);
                this.reconnectTimeout = undefined;
            }
            if (this.connection) {
                return;
            }
            this.log('trying to reconnect...');
            this.lastCloseTime = Date.now();
            if (!this.networker) {
                for (const pending of this.pending) {
                    if (pending.bodySent) {
                        pending.bodySent = false;
                    }
                }
            }
            else {
                this.networker.setConnectionStatus(_connectionStatus__WEBPACK_IMPORTED_MODULE_4__["ConnectionStatus"].Connecting);
            }
            this.connect();
        };
        let logTypes = _logger__WEBPACK_IMPORTED_MODULE_1__["LogTypes"].Error | _logger__WEBPACK_IMPORTED_MODULE_1__["LogTypes"].Log;
        if (this.debug)
            logTypes |= _logger__WEBPACK_IMPORTED_MODULE_1__["LogTypes"].Debug;
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_1__["logger"])(`TCP-${dcId}` + logSuffix, logTypes);
        this.log('constructor');
        this.connect();
    }
    clear() {
        this.connected = false;
        if (this.connection) {
            this.connection.removeEventListener('open', this.onOpen);
            this.connection.removeEventListener('close', this.onClose);
            this.connection.removeEventListener('message', this.onMessage);
            this.connection = undefined;
        }
    }
    forceReconnect() {
        this.close();
        this.reconnect();
    }
    destroy() {
        this.setAutoReconnect(false);
        this.close();
    }
    close() {
        const connection = this.connection;
        if (connection) {
            const connected = this.connected;
            this.clear();
            if (connected) { // wait for buffered messages if they are there
                connection.addEventListener('message', this.onMessage);
                connection.addEventListener('close', () => {
                    connection.removeEventListener('message', this.onMessage);
                }, { once: true });
                connection.close();
            }
        }
    }
    /**
     * Will connect if enable and disconnected \
     * Will reset reconnection timeout if disable
     */
    setAutoReconnect(enable) {
        this.autoReconnect = enable;
        if (!enable) {
            if (this.reconnectTimeout !== undefined) {
                clearTimeout(this.reconnectTimeout);
                this.reconnectTimeout = undefined;
            }
        }
        else if (!this.connection && this.reconnectTimeout === undefined) {
            this.reconnect();
        }
    }
    connect() {
        if (this.connection) {
            this.close();
        }
        this.connection = new this.Connection(this.dcId, this.url, this.logSuffix);
        this.connection.addEventListener('open', this.onOpen);
        this.connection.addEventListener('close', this.onClose);
        this.connection.addEventListener('message', this.onMessage);
    }
    encodeBody(body) {
        const toEncode = this.codec.encodePacket(body);
        //this.log('send before obf:', /* body.hex, nonce.hex, */ toEncode.hex);
        const encoded = this.obfuscation.encode(toEncode);
        //this.log('send after obf:', enc.hex);
        return encoded;
    }
    send(body) {
        this.debug && this.log.debug('-> body length to pending:', body.length);
        const encoded = this.connected ? this.encodeBody(body) : undefined;
        //return;
        if (this.networker) {
            this.pending.push({ body, encoded });
            this.releasePending();
        }
        else {
            const promise = new Promise((resolve, reject) => {
                this.pending.push({ resolve, reject, body, encoded });
            });
            this.releasePending();
            return promise;
        }
    }
    releasePending( /* tt = false */) {
        if (!this.connected) {
            //this.connect();
            return;
        }
        /* if(!tt) {
          this.releasePendingDebounced();
          return;
        } */
        //this.log('-> messages to send:', this.pending.length);
        let length = this.pending.length;
        //for(let i = length - 1; i >= 0; --i) {
        for (let i = 0; i < length; ++i) {
            /* if(this.ws.bufferedAmount) {
              break;
            } */
            const pending = this.pending[i];
            const { body, bodySent } = pending;
            let encoded = pending.encoded;
            if (body && !bodySent) {
                //this.debugPayloads.push({before: body.slice(), after: enc});
                this.debug && this.log.debug('-> body length to send:', body.length);
                /* if(this.ws.bufferedAmount) {
                  this.log.error('bufferedAmount:', this.ws.bufferedAmount);
                } */
                /* if(this.ws.readyState !== this.ws.OPEN) {
                  this.log.error('ws is closed?');
                  this.connected = false;
                  break;
                } */
                if (!encoded) {
                    encoded = pending.encoded = this.encodeBody(body);
                }
                //this.lol.push(body);
                //setTimeout(() => {
                this.connection.send(encoded);
                //}, 100);
                //this.dd();
                if (!pending.resolve) { // remove if no response needed
                    this.pending.splice(i--, 1);
                    length--;
                }
                else {
                    pending.bodySent = true;
                }
                //delete pending.body;
            }
        }
    }
}


/***/ }),

/***/ "./src/lib/mtproto/transports/websocket.ts":
/*!*************************************************!*\
  !*** ./src/lib/mtproto/transports/websocket.ts ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Socket; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../logger */ "./src/lib/logger.ts");
/* harmony import */ var _config_modes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config/modes */ "./src/config/modes.ts");
/* harmony import */ var _helpers_eventListenerBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../helpers/eventListenerBase */ "./src/helpers/eventListenerBase.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */



class Socket extends _helpers_eventListenerBase__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(dcId, url, logSuffix) {
        super();
        this.dcId = dcId;
        this.url = url;
        this.debug = _config_modes__WEBPACK_IMPORTED_MODULE_1__["default"].debug && false;
        this.handleOpen = () => {
            this.log('opened');
            this.debug && this.log.debug('sending init packet');
            this.dispatchEvent('open');
        };
        this.handleError = (e) => {
            this.log.error('handleError', e);
            this.close();
        };
        this.handleClose = () => {
            this.log('closed' /* , event, this.pending, this.ws.bufferedAmount */);
            this.removeListeners();
            this.dispatchEvent('close');
        };
        this.handleMessage = (event) => {
            this.debug && this.log.debug('<-', 'handleMessage', /* event,  */ event.data.byteLength);
            this.dispatchEvent('message', event.data);
        };
        this.send = (body) => {
            this.debug && this.log.debug('-> body length to send:', body.length);
            this.ws.send(body);
        };
        let logTypes = _logger__WEBPACK_IMPORTED_MODULE_0__["LogTypes"].Error | _logger__WEBPACK_IMPORTED_MODULE_0__["LogTypes"].Log;
        if (this.debug)
            logTypes |= _logger__WEBPACK_IMPORTED_MODULE_0__["LogTypes"].Debug;
        this.log = Object(_logger__WEBPACK_IMPORTED_MODULE_0__["logger"])(`WS-${dcId}` + logSuffix, logTypes);
        this.log('constructor');
        this.connect();
        return this;
    }
    removeListeners() {
        if (!this.ws) {
            return;
        }
        this.ws.removeEventListener('open', this.handleOpen);
        this.ws.removeEventListener('close', this.handleClose);
        this.ws.removeEventListener('error', this.handleError);
        this.ws.removeEventListener('message', this.handleMessage);
        this.ws = undefined;
    }
    connect() {
        this.ws = new WebSocket(this.url, 'binary');
        this.ws.binaryType = 'arraybuffer';
        this.ws.addEventListener('open', this.handleOpen);
        this.ws.addEventListener('close', this.handleClose);
        this.ws.addEventListener('error', this.handleError);
        this.ws.addEventListener('message', this.handleMessage);
    }
    close() {
        if (!this.ws) {
            return;
        }
        this.log('close execution');
        try {
            this.ws.close();
        }
        catch (err) {
        }
        this.handleClose();
    }
}


/***/ }),

/***/ "./src/lib/polyfill.ts":
/*!*****************************!*\
  !*** ./src/lib/polyfill.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/bytes */ "./src/helpers/bytes.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */

Object.defineProperty(Uint8Array.prototype, 'hex', {
    get: function () {
        return Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesToHex"])(this);
    },
    set: function (str) {
        this.set(Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bytesFromHex"])(str));
    },
    enumerable: true,
    configurable: true
});
Uint8Array.prototype.randomize = function () {
    if (crypto && 'getRandomValues' in crypto) {
        crypto.getRandomValues(this);
    }
    else {
        throw new Error('NO_SECURE_RANDOM');
    }
    return this;
};
Uint8Array.prototype.concat = function (...args) {
    return Object(_helpers_bytes__WEBPACK_IMPORTED_MODULE_0__["bufferConcats"])(this, ...args);
};
/* Uint8Array.prototype.toString = function() {
  return String.fromCharCode.apply(null, [...this]);
}; */
Uint8Array.prototype.toJSON = function () {
    return [...this];
    //return {type: 'bytes', value: [...this]};
};
Array.prototype.findAndSplice = function (verify) {
    let index = this.findIndex(verify);
    return index !== -1 ? this.splice(index, 1)[0] : undefined;
};
String.prototype.toHHMMSS = function (leadZero = false) {
    const sec_num = parseInt(this + '', 10);
    const hours = Math.floor(sec_num / 3600);
    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    let seconds = sec_num - (hours * 3600) - (minutes * 60);
    if (hours)
        leadZero = true;
    if (minutes < 10)
        minutes = leadZero ? "0" + minutes : minutes;
    if (seconds < 10)
        seconds = "0" + seconds;
    return (hours ? /* ('0' + hours).slice(-2) */ hours + ':' : '') + minutes + ':' + seconds;
};
/* Promise.prototype.finally = Promise.prototype.finally || {
  finally(fn: () => any) {
    const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);
    return this.then(
      result => onFinally(() => result),
      reason => onFinally(() => Promise.reject(reason))
    );
  }
}.finally; */
Promise.prototype.finally = Promise.prototype.finally || function (fn) {
    const onFinally = (callback) => Promise.resolve(fn()).then(callback);
    return this.then(result => onFinally(() => result), reason => onFinally(() => Promise.reject(reason)));
};
Promise.prototype.safeFinally = function (fn) {
    return this.catch(() => { }).finally(fn);
};


/***/ }),

/***/ "./src/lib/sessionStorage.ts":
/*!***********************************!*\
  !*** ./src/lib/sessionStorage.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/debug */ "./src/config/debug.ts");
/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localStorage */ "./src/lib/localStorage.ts");
/*
 * https://github.com/morethanwords/tweb
 * Copyright (C) 2019-2021 Eduard Kuzmenko
 * https://github.com/morethanwords/tweb/blob/master/LICENSE
 */


const sessionStorage = new _localStorage__WEBPACK_IMPORTED_MODULE_1__["default"]( /* ['kz_version'] */);
_config_debug__WEBPACK_IMPORTED_MODULE_0__["MOUNT_CLASS_TO"].appStorage = sessionStorage;
/* harmony default export */ __webpack_exports__["default"] = (sessionStorage);


/***/ }),

/***/ "./src/vendor/leemon.ts":
/*!******************************!*\
  !*** ./src/vendor/leemon.ts ***!
  \******************************/
/*! exports provided: bpe, one, zero, findPrimes, millerRabinInt, millerRabin, bitSize, expand, mod, mult, powMod, pow, sub, add, multMod, GCD, GCD_, inverseModInt, eGCD_, negative, greaterShift, greater, divide_, carry_, modInt, int2bigInt, str2bigInt, equalsInt, equals, isZero, bigInt2str, bigInt2bytes, cmp, dup, copy_, copyInt_, addInt_, rightShift_, halve_, leftShift_, multInt_, divInt_, linComb_, linCombShift_, addShift_, subShift_, sub_, add_, mult_, mod_, multMod_, squareMod_, trim, powMod_, mont_ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bpe", function() { return bpe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "one", function() { return one; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findPrimes", function() { return findPrimes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "millerRabinInt", function() { return millerRabinInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "millerRabin", function() { return millerRabin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bitSize", function() { return bitSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expand", function() { return expand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return mod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mult", function() { return mult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "powMod", function() { return powMod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multMod", function() { return multMod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GCD", function() { return GCD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GCD_", function() { return GCD_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverseModInt", function() { return inverseModInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eGCD_", function() { return eGCD_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negative", function() { return negative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greaterShift", function() { return greaterShift; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return greater; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide_", function() { return divide_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "carry_", function() { return carry_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modInt", function() { return modInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int2bigInt", function() { return int2bigInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str2bigInt", function() { return str2bigInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equalsInt", function() { return equalsInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isZero", function() { return isZero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bigInt2str", function() { return bigInt2str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bigInt2bytes", function() { return bigInt2bytes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cmp", function() { return cmp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dup", function() { return dup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy_", function() { return copy_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyInt_", function() { return copyInt_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addInt_", function() { return addInt_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rightShift_", function() { return rightShift_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "halve_", function() { return halve_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leftShift_", function() { return leftShift_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multInt_", function() { return multInt_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divInt_", function() { return divInt_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linComb_", function() { return linComb_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linCombShift_", function() { return linCombShift_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addShift_", function() { return addShift_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subShift_", function() { return subShift_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub_", function() { return sub_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add_", function() { return add_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mult_", function() { return mult_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mod_", function() { return mod_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multMod_", function() { return multMod_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squareMod_", function() { return squareMod_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trim", function() { return trim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "powMod_", function() { return powMod_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mont_", function() { return mont_; });

//globals
var bpe = 0; //bits stored per array element
var mask = 0; //AND this with an array element to chop it down to bpe bits
var radix = mask + 1; //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.
//the digits for converting to different bases
var digitsStr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\'"+-';
//initialize the global variables
//bpe=number of bits in the mantissa on this platform
for (bpe = 0; 1 << (bpe + 1) > 1 << bpe; bpe++)
    ;
bpe >>= 1; //bpe=number of bits in one element of the array representing the bigInt
mask = (1 << bpe) - 1; //AND the mask with an integer to get its bpe least significant bits
radix = mask + 1; //2^bpe.  a single 1 bit to the left of the first bit of mask
var one = int2bigInt(1, 1, 1); //constant used in powMod_()
var zero = int2bigInt(0, 1, 1);
//the following global variables are scratchpad memory to
//reduce dynamic memory allocation in the inner loop
var t = new Array(0);
var ss = t; //used in mult_()
var s0 = t; //used in multMod_(), squareMod_()
// var s1=t;    //used in powMod_(), multMod_(), squareMod_()
// var s2=t;    //used in powMod_(), multMod_()
var s3 = t; //used in powMod_()
var s4 = t, s5 = t; //used in mod_()
var s6 = t; //used in bigInt2str()
var s7 = t; //used in powMod_()
var T = t; //used in GCD_()
var sa = t; //used in mont_()
var mr_x1 = t, mr_r = t, mr_a = t, //used in millerRabin()
eg_v = t, eg_u = t, eg_A = t, eg_B = t, eg_C = t, eg_D = t, //used in eGCD_(), inverseMod_()
//, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()
primes = t, pows = t, s_i = t, s_i2 = t, s_R = t, s_rm = t, s_q = t, s_n1 = t, s_a = t, s_r2 = t, s_n = t, s_b = t, s_d = t, s_x1 = t, s_x2 = t, s_aa = t, //used in randTruePrime_()
rpprb = t; //used in randProbPrimeRounds() (which also uses "primes")
////////////////////////////////////////////////////////////////////////////////////////
var k, buff;
/**
 * return array of all primes less than integer n
 *
 * @param {number} n
 * @returns {number[]}
 */
function findPrimes(n) {
    var i, s, p, ans;
    s = new Array(n);
    for (i = 0; i < n; i++)
        s[i] = 0;
    s[0] = 2;
    p = 0; //first p elements of s are primes, the rest are a sieve
    for (; s[p] < n;) {
        //s[p] is the pth prime
        for (i = s[p] * s[p]; i < n; i += s[p] //mark multiples of s[p]
        )
            s[i] = 1;
        p++;
        s[p] = s[p - 1] + 1;
        for (; s[p] < n && s[s[p]]; s[p]++)
            ; //find next prime (where s[p]==0)
    }
    ans = new Array(p);
    for (i = 0; i < p; i++)
        ans[i] = s[i];
    return ans;
}
/**
 * does a single round of Miller-Rabin base b consider x to be a possible prime?
 *
 * x is a bigInt, and b is an integer, with b<x
 *
 * @export
 * @param {number[]} x
 * @param {number} b
 * @returns {(0 | 1)}
 */
function millerRabinInt(x, b) {
    if (mr_x1.length !== x.length) {
        mr_x1 = dup(x);
        mr_r = dup(x);
        mr_a = dup(x);
    }
    copyInt_(mr_a, b);
    return millerRabin(x, mr_a);
}
/**
 * does a single round of Miller-Rabin base b consider x to be a possible prime?
 *
 * x and b are bigInts with b<x
 *
 * @export
 * @param {number[]} x
 * @param {number[]} b
 * @returns {(0 | 1)}
 */
function millerRabin(x, b) {
    var i, j, k, s;
    if (mr_x1.length !== x.length) {
        mr_x1 = dup(x);
        mr_r = dup(x);
        mr_a = dup(x);
    }
    copy_(mr_a, b);
    copy_(mr_r, x);
    copy_(mr_x1, x);
    addInt_(mr_r, -1);
    addInt_(mr_x1, -1);
    //s=the highest power of two that divides mr_r
    k = 0;
    for (i = 0; i < mr_r.length; i++)
        for (j = 1; j < mask; j <<= 1)
            if (x[i] & j) {
                s = k < mr_r.length + bpe ? k : 0;
                i = mr_r.length;
                j = mask;
            }
            else
                k++;
    if (s)
        rightShift_(mr_r, s);
    powMod_(mr_a, mr_r, x);
    if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {
        j = 1;
        //$off
        while (j <= s - 1 && !equals(mr_a, mr_x1)) {
            squareMod_(mr_a, x);
            if (equalsInt(mr_a, 1)) {
                return 0;
            }
            j++;
        }
        if (!equals(mr_a, mr_x1)) {
            return 0;
        }
    }
    return 1;
}
/**
 * returns how many bits long the bigInt is, not counting leading zeros.
 *
 * @param {number[]} x
 * @returns {number}
 */
function bitSize(x) {
    var j, z, w;
    for (j = x.length - 1; x[j] == 0 && j > 0; j--)
        ;
    for (z = 0, w = x[j]; w; w >>= 1, z++)
        ;
    z += bpe * j;
    return z;
}
/**
 * return a copy of x with at least n elements, adding leading zeros if needed
 *
 * @param {number[]} x
 * @param {number} n
 * @returns {number[]}
 */
function expand(x, n) {
    var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0);
    copy_(ans, x);
    return ans;
}
/**
 * return a k-bit true random prime using Maurer's algorithm.
 *
 * @export
 * @param {number} k
 * @returns {number[]}
 */
/* export function randTruePrime(k: number): number[] {
  var ans = int2bigInt(0, k, 0)
  randTruePrime_(ans, k)
  return trim(ans, 1)
} */
/**
 * return a k-bit random probable prime with probability of error < 2^-80
 *
 * @export
 * @param {number} k
 * @returns {number[]}
 */
/* export function randProbPrime(k: number): number[] {
  if (k >= 600) return randProbPrimeRounds(k, 2) //numbers from HAC table 4.3
  if (k >= 550) return randProbPrimeRounds(k, 4)
  if (k >= 500) return randProbPrimeRounds(k, 5)
  if (k >= 400) return randProbPrimeRounds(k, 6)
  if (k >= 350) return randProbPrimeRounds(k, 7)
  if (k >= 300) return randProbPrimeRounds(k, 9)
  if (k >= 250) return randProbPrimeRounds(k, 12) //numbers from HAC table 4.4
  if (k >= 200) return randProbPrimeRounds(k, 15)
  if (k >= 150) return randProbPrimeRounds(k, 18)
  if (k >= 100) return randProbPrimeRounds(k, 27)
  return randProbPrimeRounds(k, 40) //number from HAC remark 4.26 (only an estimate)
} */
/**
 * return a k-bit probable random prime using n rounds of Miller Rabin
 * (after trial division with small primes)
 *
 * @export
 * @param {number} k
 * @param {number} n
 * @returns {number[]}
 */
/* export function randProbPrimeRounds(k: number, n: number): number[] {
  var ans, i, divisible, B
  B = 30000 //B is largest prime to use in trial division
  ans = int2bigInt(0, k, 0)

  //optimization: try larger and smaller B to find the best limit.

  if (primes.length === 0) primes = findPrimes(30000) //check for divisibility by primes <=30000

  if (rpprb.length !== ans.length) rpprb = dup(ans)

  for (;;) {
    //keep trying random values for ans until one appears to be prime
    //optimization: pick a random number times L=2*3*5*...*p, plus a
    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.
    //   This can reduce the amount of random number generation.

    randBigInt_(ans, k, 0) //ans = a random odd number to check
    ans[0] |= 1
    divisible = 0

    //check ans for divisibility by small primes up to B
    for (i = 0; i < primes.length && primes[i] <= B; i++)
      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {
        divisible = 1
        break
      }

    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.

    //do n rounds of Miller Rabin, with random bases less than ans
    for (i = 0; i < n && !divisible; i++) {
      randBigInt_(rpprb, k, 0)
      while (
        !greater(ans, rpprb) //pick a random rpprb that's < ans
      )
        randBigInt_(rpprb, k, 0)
      if (!millerRabin(ans, rpprb)) divisible = 1
    }

    if (!divisible) return ans
  }
} */
/**
 * return a new bigInt equal to (x mod n) for bigInts x and n.
 *
 * @param {number[]} x
 * @param {number[]} n
 * @returns {number[]}
 */
function mod(x, n) {
    var ans = dup(x);
    mod_(ans, n);
    return trim(ans, 1);
}
/**
 * return (x+n) where x is a bigInt and n is an integer.
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 * @returns {number[]}
 */
/* export function addInt(x: number[], n: number): number[] {
  var ans = expand(x, x.length + 1)
  addInt_(ans, n)
  return trim(ans, 1)
} */
/**
 * return x*y for bigInts x and y. This is faster when y<x.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {number[]}
 */
function mult(x, y) {
    var ans = expand(x, x.length + y.length);
    mult_(ans, y);
    return trim(ans, 1);
}
/**
 * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.
 *
 * 0**0=1.
 *
 * Faster for odd n.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} n
 * @returns {number[]}
 */
function powMod(x, y, n) {
    var ans = expand(x, n.length);
    powMod_(
    //this should work without the trim, but doesn't
    ans, trim(y, 2), trim(n, 2));
    return trim(ans, 1);
}
/**
 * Simple pow with no optimizations (in 40x times slower than jsbn's pow)
 * @param x bigInt
 * @param e
 */
function pow(x, e) {
    let ans = dup(x);
    e -= 1;
    for (let i = 0; i < e; ++i) {
        ans = mult(ans, x);
    }
    return trim(ans, 1);
}
/**
 * return (x-y) for bigInts x and y
 *
 * Negative answers will be 2s complement
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {number[]}
 */
function sub(x, y) {
    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);
    sub_(ans, y);
    return trim(ans, 1);
}
/**
 * return (x+y) for bigInts x and y
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {number[]}
 */
function add(x, y) {
    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);
    add_(ans, y);
    return trim(ans, 1);
}
/**
 * return (x**(-1) mod n) for bigInts x and n.
 *
 * If no inverse exists, it returns null
 *
 * @param {number[]} x
 * @param {number[]} n
 * @returns {(number[] | null)}
 */
/* export function inverseMod(x: number[], n: number[]): number[] | null {
  var ans = expand(x, n.length)
  var s = inverseMod_(ans, n)
  return s ? trim(ans, 1) : null
} */
/**
 * return (x*y mod n) for bigInts x,y,n.
 *
 * For greater speed, let y<x.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} n
 * @returns {number[]}
 */
function multMod(x, y, n) {
    var ans = expand(x, n.length);
    multMod_(ans, y, n);
    return trim(ans, 1);
}
/**
 * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.
 *
 * The bigInt ans must be large enough to hold it.
 *
 * @export
 * @param {number[]} ans
 * @param {number} k
 * @return {void}
 */
/* export function randTruePrime_(ans: number[], k: number): void {
  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize
  var w
  if (primes.length == 0) primes = findPrimes(30000) //check for divisibility by primes <=30000

  if (pows.length == 0) {
    pows = new Array(512)
    for (j = 0; j < 512; j++) {
      pows[j] = Math.pow(2, j / 511 - 1)
    }
  }

  //c and m should be tuned for a particular machine and value of k, to maximize speed
  c = 0.1 //c=0.1 in HAC
  m = 20 //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
  var recLimit = 20 //stop recursion when k <=recLimit.  Must have recLimit >= 2

  if (s_i2.length != ans.length) {
    s_i2 = dup(ans)
    s_R = dup(ans)
    s_n1 = dup(ans)
    s_r2 = dup(ans)
    s_d = dup(ans)
    s_x1 = dup(ans) //TODO Seems like a bug in eslint, reports as unused
    s_x2 = dup(ans)
    s_b = dup(ans)
    s_n = dup(ans)
    s_i = dup(ans)
    s_rm = dup(ans)
    s_q = dup(ans)
    s_a = dup(ans)
    s_aa = dup(ans)
  }

  if (k <= recLimit) {
    //generate small random primes by trial division up to its square root
    pm = (1 << ((k + 2) >> 1)) - 1 //pm is binary number with all ones, just over sqrt(2^k)
    copyInt_(ans, 0)
    for (dd = 1; dd; ) {
      dd = 0
      ans[0] = 1 | (1 << (k - 1)) | Math.floor(Math.random() * (1 << k)) //random, k-bit, odd integer, with msb 1
      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {
        //trial division by all primes 3...sqrt(2^k)
        if (0 == ans[0] % primes[j]) {
          dd = 1
          break
        }
      }
    }
    carry_(ans)
    return
  }

  B = c * k * k //try small primes up to B (or all the primes[] array if the largest is less than B).
  if (k > 2 * m)
    //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
    for (r = 1; k - k * r <= m; ) r = pows[Math.floor(Math.random() * 512)] //r=Math.pow(2,Math.random()-1);
  else r = 0.5

  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.

  recSize = Math.floor(r * k) + 1

  randTruePrime_(s_q, recSize)
  copyInt_(s_i2, 0)
  s_i2[Math.floor((k - 2) / bpe)] |= 1 << ((k - 2) % bpe) //s_i2=2^(k-2)
  divide_(s_i2, s_q, s_i, s_rm) //s_i=floor((2^(k-1))/(2q))

  z = bitSize(s_i)

  for (;;) {
    for (;;) {
      //generate z-bit numbers until one falls in the range [0,s_i-1]
      randBigInt_(s_R, z, 0)
      if (greater(s_i, s_R)) break
    } //now s_R is in the range [0,s_i-1]
    addInt_(s_R, 1) //now s_R is in the range [1,s_i]
    add_(s_R, s_i) //now s_R is in the range [s_i+1,2*s_i]

    copy_(s_n, s_q)
    mult_(s_n, s_R)
    multInt_(s_n, 2)
    addInt_(s_n, 1) //s_n=2*s_R*s_q+1

    copy_(s_r2, s_R)
    multInt_(s_r2, 2) //s_r2=2*s_R

    //check s_n for divisibility by small primes up to B
    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++)
      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {
        divisible = 1
        break
      }

    if (!divisible)
      if (!millerRabinInt(s_n, 2))
        //if it passes small primes check, then try a single Miller-Rabin base 2
        //this line represents 75% of the total runtime for randTruePrime_
        divisible = 1

    if (!divisible) {
      //if it passes that test, continue checking s_n
      addInt_(s_n, -3)
      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--); //strip leading zeros
      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++);
      zz += bpe * j //zz=number of bits in s_n, ignoring leading zeros
      for (;;) {
        //generate z-bit numbers until one falls in the range [0,s_n-1]
        randBigInt_(s_a, zz, 0)
        if (greater(s_n, s_a)) break
      } //now s_a is in the range [0,s_n-1]
      addInt_(s_n, 3) //now s_a is in the range [0,s_n-4]
      addInt_(s_a, 2) //now s_a is in the range [2,s_n-2]
      copy_(s_b, s_a)
      copy_(s_n1, s_n)
      addInt_(s_n1, -1)
      powMod_(s_b, s_n1, s_n) //s_b=s_a^(s_n-1) modulo s_n
      addInt_(s_b, -1)
      if (isZero(s_b)) {
        copy_(s_b, s_a)
        powMod_(s_b, s_r2, s_n)
        addInt_(s_b, -1)
        copy_(s_aa, s_n)
        copy_(s_d, s_b)
        GCD_(s_d, s_n) //if s_b and s_n are relatively prime, then s_n is a prime
        if (equalsInt(s_d, 1)) {
          copy_(ans, s_aa)
          return //if we've made it this far, then s_n is absolutely guaranteed to be prime
        }
      }
    }
  }
} */
/**
 * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
 *
 * @export
 * @param {number} n
 * @param {number} s
 * @returns {number[]}
 */
/* export function randBigInt(n: number, s: number): number[] {
  var a, b
  a = Math.floor((n - 1) / bpe) + 2 //# array elements to hold the BigInt with a leading 0 element
  b = int2bigInt(0, 0, a)
  randBigInt_(b, n, s)
  return b
} */
/**
 * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.
 *
 * Array b must be big enough to hold the result. Must have n>=1
 *
 * @export
 * @param {number[]} b
 * @param {number} n
 * @param {number} s
 * @return {void}
 */
/* export function randBigInt_(b: number[], n: number, s: number): void {
  var i, a
  for (i = 0; i < b.length; i++) b[i] = 0
  a = Math.floor((n - 1) / bpe) + 1 //# array elements to hold the BigInt
  for (i = 0; i < a; i++) {
    b[i] = Math.floor(Math.random() * (1 << (bpe - 1)))
  }
  b[a - 1] &= (2 << ((n - 1) % bpe)) - 1
  if (s == 1) b[a - 1] |= 1 << ((n - 1) % bpe)
} */
/**
 * Return the greatest common divisor of bigInts x and y (each with same number of elements).
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {number[]}
 */
function GCD(x, y) {
    var xc, yc;
    xc = dup(x);
    yc = dup(y);
    GCD_(xc, yc);
    return xc;
}
/**
 * set x to the greatest common divisor of bigInts x and y (each with same number of elements).
 *
 * y is destroyed.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 */
function GCD_(x, y) {
    var i, xp, yp, A, B, C, D, q, sing;
    var qp;
    if (T.length !== x.length)
        T = dup(x);
    sing = 1;
    while (sing) {
        //while y has nonzero elements other than y[0]
        sing = 0;
        for (i = 1; i < y.length; i++ //check if y has nonzero elements other than 0
        )
            if (y[i]) {
                sing = 1;
                break;
            }
        if (!sing)
            break; //quit when y all zero elements except possibly y[0]
        for (i = x.length; !x[i] && i >= 0; i--)
            ; //find most significant element of x
        xp = x[i];
        yp = y[i];
        A = 1;
        B = 0;
        C = 0;
        D = 1;
        while (yp + C && yp + D) {
            q = Math.floor((xp + A) / (yp + C));
            qp = Math.floor((xp + B) / (yp + D));
            if (q != qp)
                break;
            t = A - q * C;
            A = C;
            C = t; //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)
            t = B - q * D;
            B = D;
            D = t;
            t = xp - q * yp;
            xp = yp;
            yp = t;
        }
        if (B) {
            copy_(T, x);
            linComb_(x, y, A, B); //x=A*x+B*y
            linComb_(y, T, D, C); //y=D*y+C*T
        }
        else {
            mod_(x, y);
            copy_(T, x);
            copy_(x, y);
            copy_(y, T);
        }
    }
    if (y[0] === 0)
        return;
    t = modInt(x, y[0]);
    copyInt_(x, y[0]);
    y[0] = t;
    while (y[0]) {
        x[0] %= y[0];
        t = x[0];
        x[0] = y[0];
        y[0] = t;
    }
}
/**
 * do x=x**(-1) mod n, for bigInts x and n.
 *
 * If no inverse exists, it sets x to zero and returns 0, else it returns 1.
 * The x array must be at least as large as the n array.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} n
 * @returns {(0 | 1)}
 */
/* export function inverseMod_(x: number[], n: number[]): Bool {
  var k = 1 + 2 * Math.max(x.length, n.length)

  if (!(x[0] & 1) && !(n[0] & 1)) {
    //if both inputs are even, then inverse doesn't exist
    copyInt_(x, 0)
    return 0
  }

  if (eg_u.length != k) {
    eg_u = new Array(k)
    eg_v = new Array(k)
    eg_A = new Array(k)
    eg_B = new Array(k)
    eg_C = new Array(k)
    eg_D = new Array(k)
  }

  copy_(eg_u, x)
  copy_(eg_v, n)
  copyInt_(eg_A, 1)
  copyInt_(eg_B, 0)
  copyInt_(eg_C, 0)
  copyInt_(eg_D, 1)
  for (;;) {
    while (!(eg_u[0] & 1)) {
      //while eg_u is even
      halve_(eg_u)
      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {
        //if eg_A==eg_B==0 mod 2
        halve_(eg_A)
        halve_(eg_B)
      } else {
        add_(eg_A, n)
        halve_(eg_A)
        sub_(eg_B, x)
        halve_(eg_B)
      }
    }

    while (!(eg_v[0] & 1)) {
      //while eg_v is even
      halve_(eg_v)
      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {
        //if eg_C==eg_D==0 mod 2
        halve_(eg_C)
        halve_(eg_D)
      } else {
        add_(eg_C, n)
        halve_(eg_C)
        sub_(eg_D, x)
        halve_(eg_D)
      }
    }

    if (!greater(eg_v, eg_u)) {
      //eg_v <= eg_u
      sub_(eg_u, eg_v)
      sub_(eg_A, eg_C)
      sub_(eg_B, eg_D)
    } else {
      //eg_v > eg_u
      sub_(eg_v, eg_u)
      sub_(eg_C, eg_A)
      sub_(eg_D, eg_B)
    }

    if (equalsInt(eg_u, 0)) {
      while (
        negative(eg_C) //make sure answer is nonnegative
      )
        add_(eg_C, n)
      copy_(x, eg_C)

      if (!equalsInt(eg_v, 1)) {
        //if GCD_(x,n)!=1, then there is no inverse
        copyInt_(x, 0)
        return 0
      }
      return 1
    }
  }
} */
/**
 * return x**(-1) mod n, for integers x and n.
 *
 * Return 0 if there is no inverse
 *
 * @param {number} x
 * @param {number} n
 * @returns {number}
 */
function inverseModInt(x, n) {
    var a = 1, b = 0, t;
    for (;;) {
        if (x === 1)
            return a;
        if (x === 0)
            return 0;
        b -= a * Math.floor(n / x);
        //$off
        n %= x;
        if (n === 1)
            return b; //to avoid negatives, change this b to n-b, and each -= to +=
        if (n === 0)
            return 0;
        a -= b * Math.floor(x / n);
        //$off
        x %= n;
    }
    /*::
    declare var never: empty
    return never
    */
}
//this deprecated function is for backward compatibility only.
/* function inverseModInt_(x: number, n: number) {
  return inverseModInt(x, n)
} */
/**
 * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:
 *
 *      v = GCD_(x,y) = a*x-b*y
 *
 * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} v
 * @param {number[]} a
 * @param {number[]} b
 * @return {void}
 */
function eGCD_(x, y, v, a, b) {
    var g = 0;
    var k = Math.max(x.length, y.length);
    if (eg_u.length != k) {
        eg_u = new Array(k);
        eg_A = new Array(k);
        eg_B = new Array(k);
        eg_C = new Array(k);
        eg_D = new Array(k);
    }
    while (!(x[0] & 1) && !(y[0] & 1)) {
        //while x and y both even
        halve_(x);
        halve_(y);
        g++;
    }
    copy_(eg_u, x);
    copy_(v, y);
    copyInt_(eg_A, 1);
    copyInt_(eg_B, 0);
    copyInt_(eg_C, 0);
    copyInt_(eg_D, 1);
    for (;;) {
        while (!(eg_u[0] & 1)) {
            //while u is even
            halve_(eg_u);
            if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {
                //if A==B==0 mod 2
                halve_(eg_A);
                halve_(eg_B);
            }
            else {
                add_(eg_A, y);
                halve_(eg_A);
                sub_(eg_B, x);
                halve_(eg_B);
            }
        }
        while (!(v[0] & 1)) {
            //while v is even
            halve_(v);
            if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {
                //if C==D==0 mod 2
                halve_(eg_C);
                halve_(eg_D);
            }
            else {
                add_(eg_C, y);
                halve_(eg_C);
                sub_(eg_D, x);
                halve_(eg_D);
            }
        }
        if (!greater(v, eg_u)) {
            //v<=u
            sub_(eg_u, v);
            sub_(eg_A, eg_C);
            sub_(eg_B, eg_D);
        }
        else {
            //v>u
            sub_(v, eg_u);
            sub_(eg_C, eg_A);
            sub_(eg_D, eg_B);
        }
        if (equalsInt(eg_u, 0)) {
            while (negative(eg_C)) {
                //make sure a (C) is nonnegative
                add_(eg_C, y);
                sub_(eg_D, x);
            }
            multInt_(eg_D, -1); ///make sure b (D) is nonnegative
            copy_(a, eg_C);
            copy_(b, eg_D);
            leftShift_(v, g);
            return;
        }
    }
}
/**
 * is bigInt x negative?
 *
 * @param {number[]} x
 * @returns {(1 | 0)}
 */
function negative(x) {
    //TODO Flow Bool type inference
    return (x[x.length - 1] >> (bpe - 1)) & 1;
}
/**
 * is (x << (shift*bpe)) > y?
 *
 * x and y are nonnegative bigInts
 * shift is a nonnegative integer
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number} shift
 * @returns {(1 | 0)}
 */
function greaterShift(x, y, shift) {
    var i, kx = x.length, ky = y.length;
    k = kx + shift < ky ? kx + shift : ky;
    for (i = ky - 1 - shift; i < kx && i >= 0; i++)
        if (x[i] > 0)
            return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger
    for (i = kx - 1 + shift; i < ky; i++)
        if (y[i] > 0)
            return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger
    for (i = k - 1; i >= shift; i--)
        if (x[i - shift] > y[i])
            return 1;
        else if (x[i - shift] < y[i])
            return 0;
    return 0;
}
/**
 * is x > y?
 *
 * x and y both nonnegative
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {(1 | 0)}
 */
function greater(x, y) {
    var i;
    var k = x.length < y.length ? x.length : y.length;
    for (i = x.length; i < y.length; i++)
        if (y[i])
            return 0; //y has more digits
    for (i = y.length; i < x.length; i++)
        if (x[i])
            return 1; //x has more digits
    for (i = k - 1; i >= 0; i--)
        if (x[i] > y[i])
            return 1;
        else if (x[i] < y[i])
            return 0;
    return 0;
}
/**
 * divide x by y giving quotient q and remainder r.
 *
 *     q = floor(x/y)
 *     r = x mod y
 *
 * All 4 are bigints.
 *
 * * x must have at least one leading zero element.
 * * y must be nonzero.
 * * q and r must be arrays that are exactly the same length as x. (Or q can have more).
 * * Must have x.length >= y.length >= 2.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} q
 * @param {number[]} r
 * @return {void}
 */
function divide_(x, y, q, r) {
    var kx, ky;
    var i, j, y1, y2, c, a, b;
    copy_(r, x);
    for (ky = y.length; y[ky - 1] === 0; ky--)
        ; //ky is number of elements in y, not including leading zeros
    //normalize: ensure the most significant element of y has its highest bit set
    b = y[ky - 1];
    for (a = 0; b; a++)
        b >>= 1;
    a = bpe - a; //a is how many bits to shift so that the high order bit of y is leftmost in its array element
    leftShift_(y, a); //multiply both by 1<<a now, then divide both by that at the end
    leftShift_(r, a);
    //Rob Visser discovered a bug: the following line was originally just before the normalization.
    for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--)
        ; //kx is number of elements in normalized x, not including leading zeros
    copyInt_(q, 0); // q=0
    while (!greaterShift(y, r, kx - ky)) {
        // while (leftShift_(y,kx-ky) <= r) {
        subShift_(r, y, kx - ky); //   r=r-leftShift_(y,kx-ky)
        q[kx - ky]++; //   q[kx-ky]++;
    } // }
    for (i = kx - 1; i >= ky; i--) {
        if (r[i] == y[ky - 1])
            q[i - ky] = mask;
        else
            q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1]);
        //The following for(;;) loop is equivalent to the commented while loop,
        //except that the uncommented version avoids overflow.
        //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0
        //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])
        //    q[i-ky]--;
        for (;;) {
            y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky];
            c = y2 >> bpe;
            y2 = y2 & mask;
            y1 = c + q[i - ky] * y[ky - 1];
            c = y1 >> bpe;
            y1 = y1 & mask;
            if (c == r[i]
                ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1]
                : c > r[i])
                q[i - ky]--;
            else
                break;
        }
        linCombShift_(r, y, -q[i - ky], i - ky); //r=r-q[i-ky]*leftShift_(y,i-ky)
        if (negative(r)) {
            addShift_(r, y, i - ky); //r=r+leftShift_(y,i-ky)
            q[i - ky]--;
        }
    }
    rightShift_(y, a); //undo the normalization step
    rightShift_(r, a); //undo the normalization step
}
/**
 * do carries and borrows so each element of the bigInt x fits in bpe bits.
 *
 * @param {number[]} x
 */
function carry_(x) {
    var i, k, c, b;
    k = x.length;
    c = 0;
    for (i = 0; i < k; i++) {
        c += x[i];
        b = 0;
        if (c < 0) {
            b = -(c >> bpe);
            c += b * radix;
        }
        x[i] = c & mask;
        c = (c >> bpe) - b;
    }
}
/**
 * return x mod n for bigInt x and integer n.
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 * @returns {number}
 */
function modInt(x, n) {
    var i, c = 0;
    for (i = x.length - 1; i >= 0; i--)
        c = (c * radix + x[i]) % n;
    return c;
}
/**
 * convert the integer t into a bigInt with at least the given number of bits.
 * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)
 * Pad the array with leading zeros so that it has at least minSize elements.
 *
 * There will always be at least one leading 0 element.
 *
 * @export
 * @param {number} t
 * @param {number} bits
 * @param {number} minSize
 * @returns {number[]}
 */
function int2bigInt(t, bits, minSize) {
    var i, k;
    k = Math.ceil(bits / bpe) + 1;
    k = minSize > k ? minSize : k;
    var buff = new Array(k);
    copyInt_(buff, t);
    return buff;
}
/**
 * return the bigInt given a string representation in a given base.
 * Pad the array with leading zeros so that it has at least minSize elements.
 * If base=-1, then it reads in a space-separated list of array elements in decimal.
 *
 * The array will always have at least one leading zero, unless base=-1.
 *
 * @export
 * @param {string} s
 * @param {number} base
 * @param {number} [minSize]
 * @returns {number[]}
 */
function str2bigInt(s, base, minSize) {
    var d, i, x, y, kk;
    var k = s.length;
    if (base === -1) {
        //comma-separated list of array elements in decimal
        x = new Array(0);
        for (;;) {
            y = new Array(x.length + 1);
            for (i = 0; i < x.length; i++)
                y[i + 1] = x[i];
            y[0] = parseInt(s, 10); //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7
            x = y;
            d = s.indexOf(',', 0);
            if (d < 1)
                break;
            //$off
            s = s.substring(d + 1);
            if (s.length == 0)
                break;
        }
        //$off
        if (x.length < minSize) {
            //$off
            y = new Array(minSize);
            copy_(y, x);
            return y;
        }
        return x;
    }
    x = int2bigInt(0, base * k, 0);
    for (i = 0; i < k; i++) {
        d = digitsStr.indexOf(s.substring(i, i + 1), 0);
        if (base <= 36 && d >= 36)
            //convert lowercase to uppercase if base<=36
            d -= 26;
        if (d >= base || d < 0) {
            //stop at first illegal character
            break;
        }
        multInt_(x, base);
        addInt_(x, d);
    }
    for (k = x.length; k > 0 && !x[k - 1]; k--)
        ; //strip off leading zeros
    //$off
    k = minSize > k + 1 ? minSize : k + 1;
    //$off
    y = new Array(k);
    //$off
    kk = k < x.length ? k : x.length;
    //$off
    for (i = 0; i < kk; i++)
        y[i] = x[i];
    //$off
    for (; i < k; i++)
        y[i] = 0;
    return y;
}
//return the bigInt given a string representation in a given base.
//Pad the array with leading zeros so that it has at least minSize elements.
//If base=-1, then it reads in a space-separated list of array elements in decimal.
//The array will always have at least one leading zero, unless base=-1.
// function str2bigInt(s,b,minSize) {
//   var d, i, j, base, str, x, y, kk;
//   if (typeof b === 'string') {
//           base = b.length;
//           str = b;
//   } else {
//           base = b;
//           str = digitsStr;
//   }
//   var k=s.length;
//   if (base==-1) { //comma-separated list of array elements in decimal
//       x=new Array(0);
//       for (;;) {
//           y=new Array(x.length+1);
//           for (i=0;i<x.length;i++)
//               y[i+1]=x[i];
//           y[0]=parseInt(s,10);
//           x=y;
//           d=s.indexOf(',',0);
//           if (d<1)
//               break;
//           s=s.substring(d+1);
//           if (s.length==0)
//               break;
//       }
//       if (x.length<minSize) {
//           y=new Array(minSize);
//           copy_(y,x);
//           return y;
//       }
//       return x;
//   }
//   x=int2bigInt(0,base*k,0);
// for (i=0;i<k;i++) {
//   d=str.indexOf(s.substring(i,i+1),0);
//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36
//       d-=26;
//   }
//   if (d>=base || d<0) {   //ignore illegal characters
//   continue;
//       }
//       multInt_(x,base);
//       addInt_(x,d);
//   }
//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros
//   k=minSize>k+1 ? minSize : k+1;
//   y=new Array(k);
//   kk=k<x.length ? k : x.length;
//   for (i=0;i<kk;i++)
//       y[i]=x[i];
//   for (;i<k;i++)
//       y[i]=0;
//   return y;
// }
/**
 * is bigint x equal to integer y?
 *
 * y must have less than bpe bits
 *
 * @export
 * @param {number[]} x
 * @param {number} y
 * @returns {(1 | 0)}
 */
function equalsInt(x, y) {
    var i;
    if (x[0] != y)
        return 0;
    for (i = 1; i < x.length; i++)
        if (x[i])
            return 0;
    return 1;
}
/**
 * are bigints x and y equal?
 *
 * this works even if x and y are different lengths and have arbitrarily many leading zeros
 *
 * @param {number[]} x
 * @param {number[]} y
 * @returns {(1 | 0)}
 */
function equals(x, y) {
    var i;
    var k = x.length < y.length ? x.length : y.length;
    for (i = 0; i < k; i++)
        if (x[i] !== y[i])
            return 0;
    if (x.length > y.length) {
        for (; i < x.length; i++)
            if (x[i])
                return 0;
    }
    else {
        for (; i < y.length; i++)
            if (y[i])
                return 0;
    }
    return 1;
}
/**
 * is the bigInt x equal to zero?
 *
 * @export
 * @param {number[]} x
 * @returns {(1 | 0)}
 */
function isZero(x) {
    var i;
    for (i = 0; i < x.length; i++)
        if (x[i])
            return 0;
    return 1;
}
/**
 * Convert a bigInt into a string in a given base, from base 2 up to base 95.
 *
 * Base -1 prints the contents of the array representing the number.
 *
 * @export
 * @param {number[]} x
 * @param {number} base
 * @returns {string}
 */
function bigInt2str(x, base) {
    var i, t, s = '';
    if (s6.length !== x.length)
        s6 = dup(x);
    else
        copy_(s6, x);
    if (base === -1) {
        //return the list of array contents
        for (i = x.length - 1; i > 0; i--)
            s += x[i] + ',';
        s += x[0];
    }
    else {
        //return it in the given base
        while (!isZero(s6)) {
            t = divInt_(s6, base); //t=s6 % base; s6=floor(s6/base);
            s = digitsStr.substring(t, t + 1) + s;
        }
    }
    if (s.length === 0)
        s = '0';
    return s;
}
/**
 * Convert a bigInt into bytes
 * @param x bigInt
 * @param littleEndian byte order by default
 */
function bigInt2bytes(x, littleEndian = true) {
    if (s6.length !== x.length)
        s6 = dup(x);
    else
        copy_(s6, x);
    const out = [];
    //console.log('bigInt2bytes');
    while (!isZero(s6)) {
        t = divInt_(s6, 256); //t=s6 % base; s6=floor(s6/base);
        out.push(t);
        //console.log('bigInt2bytes', t);
    }
    if (littleEndian) {
        out.reverse();
    }
    //console.log('bigInt2bytes', out);
    return out;
}
/**
 * Compare two bigInts and return -1 if x is less, 0 if equals, 1 if greater
 * @param x bigInt
 * @param y bigInt
 */
function cmp(x, y) {
    return greater(x, y) ? 1 : (equals(x, y) ? 0 : -1);
}
/* Object.assign(self, {
  cmp,
  str2bigInt,
  int2bigInt,
  bigInt2str,
  one,
  divide_,
  divInt_,
  dup,
  negative
}); */
/**
 * Returns a duplicate of bigInt x
 *
 * @export
 * @param {number[]} x
 * @returns {number[]}
 */
function dup(x) {
    var i;
    buff = Array(x.length);
    copy_(buff, x);
    return buff;
}
/**
 * do x=y on bigInts x and y.
 *
 * x must be an array at least as big as y (not counting the leading zeros in y).
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @returns {void}
 */
function copy_(x, y) {
    var i;
    var k = x.length < y.length ? x.length : y.length;
    for (i = 0; i < k; i++)
        x[i] = y[i];
    for (i = k; i < x.length; i++)
        x[i] = 0;
}
/**
 * do x=y on bigInt x and integer y.
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 * @returns {void}
 */
function copyInt_(x, n) {
    var i, c;
    var len = x.length; //TODO .length in for loop have perfomance costs. Bench this
    for (c = n, i = 0; i < len; i++) {
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x+n where x is a bigInt and n is an integer.
 *
 * x must be large enough to hold the result.
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 * @returns {void}
 */
function addInt_(x, n) {
    var i, k, c, b;
    x[0] += n;
    k = x.length;
    c = 0;
    for (i = 0; i < k; i++) {
        c += x[i];
        b = 0;
        if (c < 0) {
            b = -(c >> bpe);
            c += b * radix;
        }
        x[i] = c & mask;
        c = (c >> bpe) - b;
        if (!c)
            return; //stop carrying as soon as the carry is zero
    }
}
/**
 * right shift bigInt x by n bits.
 *
 *     0 <= n < bpe.
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 */
function rightShift_(x, n) {
    var i;
    var k = Math.floor(n / bpe);
    if (k) {
        for (i = 0; i < x.length - k; i++ //right shift x by k elements
        )
            x[i] = x[i + k];
        for (; i < x.length; i++)
            x[i] = 0;
        //$off
        n %= bpe;
    }
    for (i = 0; i < x.length - 1; i++) {
        x[i] = mask & ((x[i + 1] << (bpe - n)) | (x[i] >> n));
    }
    x[i] >>= n;
}
/**
 * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement
 *
 * @param {number[]} x
 * @returns {void}
 */
function halve_(x) {
    var i;
    for (i = 0; i < x.length - 1; i++) {
        x[i] = mask & ((x[i + 1] << (bpe - 1)) | (x[i] >> 1));
    }
    x[i] = (x[i] >> 1) | (x[i] & (radix >> 1)); //most significant bit stays the same
}
/**
 * left shift bigInt x by n bits
 *
 * @export
 * @param {number[]} x
 * @param {number} n
 * @returns {void}
 */
function leftShift_(x, n) {
    var i;
    var k = Math.floor(n / bpe);
    if (k) {
        for (i = x.length; i >= k; i-- //left shift x by k elements
        )
            x[i] = x[i - k];
        for (; i >= 0; i--)
            x[i] = 0;
        //$off
        n %= bpe;
    }
    if (!n)
        return;
    for (i = x.length - 1; i > 0; i--) {
        x[i] = mask & ((x[i] << n) | (x[i - 1] >> (bpe - n)));
    }
    x[i] = mask & (x[i] << n);
}
/**
 * do x=x*n where x is a bigInt and n is an integer.
 *
 * x must be large enough to hold the result.
 *
 * @param {number[]} x
 * @param {number} n
 * @returns {void}
 */
function multInt_(x, n) {
    var i, k, c, b;
    if (!n)
        return;
    k = x.length;
    c = 0;
    for (i = 0; i < k; i++) {
        c += x[i] * n;
        b = 0;
        if (c < 0) {
            b = -(c >> bpe);
            c += b * radix;
        }
        x[i] = c & mask;
        c = (c >> bpe) - b;
    }
}
/**
 * do x=floor(x/n) for bigInt x and integer n, and return the remainder
 *
 * @param {number[]} x
 * @param {number} n
 * @returns {number} remainder
 */
function divInt_(x, n) {
    var i, r = 0, s;
    for (i = x.length - 1; i >= 0; i--) {
        s = r * radix + x[i];
        x[i] = Math.floor(s / n);
        r = s % n;
    }
    return r;
}
/**
 * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.
 *
 * x must be large enough to hold the answer.
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number} a
 * @param {number} b
 * @returns {void}
 */
function linComb_(x, y, a, b) {
    var i, c, k, kk;
    k = x.length < y.length ? x.length : y.length;
    kk = x.length;
    for (c = 0, i = 0; i < k; i++) {
        c += a * x[i] + b * y[i];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; i < kk; i++) {
        c += a * x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.
 *
 * x must be large enough to hold the answer.
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number} b
 * @param {number} ys
 * @returns {void}
 */
function linCombShift_(x, y, b, ys) {
    var i, c, k, kk;
    k = x.length < ys + y.length ? x.length : ys + y.length;
    kk = x.length;
    for (c = 0, i = ys; i < k; i++) {
        c += x[i] + b * y[i - ys];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; c && i < kk; i++) {
        c += x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.
 *
 * x must be large enough to hold the answer.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number} ys
 * @return {void}
 */
function addShift_(x, y, ys) {
    var i, c, k, kk;
    k = x.length < ys + y.length ? x.length : ys + y.length;
    kk = x.length;
    for (c = 0, i = ys; i < k; i++) {
        c += x[i] + y[i - ys];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; c && i < kk; i++) {
        c += x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys
 *
 * x must be large enough to hold the answer
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number} ys
 * @return {void}
 */
function subShift_(x, y, ys) {
    var i, c, k, kk;
    k = x.length < ys + y.length ? x.length : ys + y.length;
    kk = x.length;
    for (c = 0, i = ys; i < k; i++) {
        c += x[i] - y[i - ys];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; c && i < kk; i++) {
        c += x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x-y for bigInts x and y
 *
 * x must be large enough to hold the answer
 *
 * negative answers will be 2s complement
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @return {void}
 */
function sub_(x, y) {
    var i, c, k, kk;
    k = x.length < y.length ? x.length : y.length;
    for (c = 0, i = 0; i < k; i++) {
        c += x[i] - y[i];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; c && i < x.length; i++) {
        c += x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x+y for bigInts x and y
 *
 * x must be large enough to hold the answer
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @return {void}
 */
function add_(x, y) {
    var i, c, k, kk;
    k = x.length < y.length ? x.length : y.length;
    for (c = 0, i = 0; i < k; i++) {
        c += x[i] + y[i];
        x[i] = c & mask;
        c >>= bpe;
    }
    for (i = k; c && i < x.length; i++) {
        c += x[i];
        x[i] = c & mask;
        c >>= bpe;
    }
}
/**
 * do x=x*y for bigInts x and y.
 *
 * This is faster when y<x.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @return {void}
 */
function mult_(x, y) {
    var i;
    if (ss.length != 2 * x.length)
        ss = new Array(2 * x.length);
    copyInt_(ss, 0);
    for (i = 0; i < y.length; i++)
        if (y[i])
            linCombShift_(ss, x, y[i], i); //ss=1*ss+y[i]*(x<<(i*bpe))
    copy_(x, ss);
}
/**
 * do x=x mod n for bigInts x and n
 *
 * @export
 * @param {number[]} x
 * @param {number[]} n
 * @return {void}
 */
function mod_(x, n) {
    if (s4.length !== x.length)
        s4 = dup(x);
    else
        copy_(s4, x);
    if (s5.length !== x.length)
        s5 = dup(x);
    divide_(s4, n, s5, x); //x = remainder of s4 / n
}
/**
 * do x=x*y mod n for bigInts x,y,n.
 *
 * for greater speed, let y<x.
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} n
 * @return {void}
 */
function multMod_(x, y, n) {
    var i;
    if (s0.length != 2 * x.length)
        s0 = new Array(2 * x.length);
    copyInt_(s0, 0);
    for (i = 0; i < y.length; i++)
        if (y[i])
            linCombShift_(s0, x, y[i], i); //s0=1*s0+y[i]*(x<<(i*bpe))
    mod_(s0, n);
    copy_(x, s0);
}
/**
 * do x=x*x mod n for bigInts x,n.
 *
 * @export
 * @param {number[]} x
 * @param {number[]} n
 * @return {void}
 */
function squareMod_(x, n) {
    var i, j, d, c, kx, kn, k;
    for (kx = x.length; kx > 0 && !x[kx - 1]; kx--)
        ; //ignore leading zeros in x
    k = kx > n.length ? 2 * kx : 2 * n.length; //k=# elements in the product, which is twice the elements in the larger of x and n
    if (s0.length != k)
        s0 = new Array(k);
    copyInt_(s0, 0);
    for (i = 0; i < kx; i++) {
        c = s0[2 * i] + x[i] * x[i];
        s0[2 * i] = c & mask;
        c >>= bpe;
        for (j = i + 1; j < kx; j++) {
            c = s0[i + j] + 2 * x[i] * x[j] + c;
            s0[i + j] = c & mask;
            c >>= bpe;
        }
        s0[i + kx] = c;
    }
    mod_(s0, n);
    copy_(x, s0);
}
/**
 * return x with exactly k leading zero elements
 *
 * @export
 * @param {number[]} x
 * @param {number} k
 * @returns {number[]}
 */
function trim(x, k) {
    var i, y;
    for (i = x.length; i > 0 && !x[i - 1]; i--)
        ;
    y = new Array(i + k);
    copy_(y, x);
    return y;
}
/**
 * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.
 *
 * this is faster when n is odd.
 *
 * x usually needs to have as many elements as n.
 *
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} n
 * @return {void}
 */
function powMod_(x, y, n) {
    var k1, k2, kn, np;
    if (s7.length != n.length)
        s7 = dup(n);
    //for even modulus, use a simple square-and-multiply algorithm,
    //rather than using the more complex Montgomery algorithm.
    if ((n[0] & 1) == 0) {
        copy_(s7, x);
        copyInt_(x, 1);
        while (!equalsInt(y, 0)) {
            if (y[0] & 1)
                multMod_(x, s7, n);
            divInt_(y, 2);
            squareMod_(s7, n);
        }
        return;
    }
    //calculate np from n for the Montgomery multiplications
    copyInt_(s7, 0);
    for (kn = n.length; kn > 0 && !n[kn - 1]; kn--)
        ;
    np = radix - inverseModInt(modInt(n, radix), radix);
    s7[kn] = 1;
    multMod_(x, s7, n); // x = x * 2**(kn*bp) mod n
    if (s3.length != x.length)
        s3 = dup(x);
    else
        copy_(s3, x);
    //$off
    // @ts-ignore
    for (k1 = y.length - 1; (k1 > 0) & !y[k1]; k1--)
        ; //k1=first nonzero element of y
    if (y[k1] == 0) {
        //anything to the 0th power is 1
        copyInt_(x, 1);
        return;
    }
    for (k2 = 1 << (bpe - 1); k2 && !(y[k1] & k2); k2 >>= 1)
        ; //k2=position of first 1 bit in y[k1]
    for (;;) {
        if (!(k2 >>= 1)) {
            //look at next bit of y
            k1--;
            if (k1 < 0) {
                mont_(x, one, n, np);
                return;
            }
            k2 = 1 << (bpe - 1);
        }
        mont_(x, x, n, np);
        if (k2 & y[k1])
            //if next bit is a 1
            mont_(x, s3, n, np);
    }
}
/**
 * do x=x*y*Ri mod n for bigInts x,y,n,
 * where Ri = 2**(-kn*bpe) mod n, and kn is the
 * number of elements in the n array, not
 * counting leading zeros.
 *
 * x array must have at least as many elemnts as the n array
 * It's OK if x and y are the same variable.
 *
 * must have:
 *  * x,y < n
 *  * n is odd
 *  * np = -(n^(-1)) mod radix
 *
 * @export
 * @param {number[]} x
 * @param {number[]} y
 * @param {number[]} n
 * @param {number} np
 * @return {void}
 */
function mont_(x, y, n, np) {
    var i, j, c, ui, t, ks;
    var kn = n.length;
    var ky = y.length;
    if (sa.length != kn)
        sa = new Array(kn);
    copyInt_(sa, 0);
    for (; kn > 0 && n[kn - 1] == 0; kn--)
        ; //ignore leading zeros of n
    for (; ky > 0 && y[ky - 1] == 0; ky--)
        ; //ignore leading zeros of y
    ks = sa.length - 1; //sa will never have more than this many nonzero elements.
    //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers
    for (i = 0; i < kn; i++) {
        t = sa[0] + x[i] * y[0];
        ui = ((t & mask) * np) & mask; //the inner "& mask" was needed on Safari (but not MSIE) at one time
        c = (t + ui * n[0]) >> bpe;
        t = x[i];
        //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed
        j = 1;
        for (; j < ky - 4;) {
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
        }
        for (; j < ky;) {
            c += sa[j] + ui * n[j] + t * y[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
        }
        for (; j < kn - 4;) {
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
        }
        for (; j < kn;) {
            c += sa[j] + ui * n[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
        }
        for (; j < ks;) {
            c += sa[j];
            sa[j - 1] = c & mask;
            c >>= bpe;
            j++;
        }
        sa[j - 1] = c & mask;
    }
    if (!greater(n, sa))
        sub_(sa, n);
    copy_(x, sa);
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,